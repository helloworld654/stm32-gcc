ARM GAS  /tmp/cc26wfU0.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f10x_usart.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.USART_DeInit,"ax",%progbits
  16              		.align	1
  17              		.global	USART_DeInit
  18              		.arch armv7-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	USART_DeInit:
  25              	.LFB63:
  26              		.file 1 "Drivers/Src/stm32f10x_usart.c"
   1:Drivers/Src/stm32f10x_usart.c **** /**
   2:Drivers/Src/stm32f10x_usart.c ****   ******************************************************************************
   3:Drivers/Src/stm32f10x_usart.c ****   * @file    stm32f10x_usart.c
   4:Drivers/Src/stm32f10x_usart.c ****   * @author  MCD Application Team
   5:Drivers/Src/stm32f10x_usart.c ****   * @version V3.5.0
   6:Drivers/Src/stm32f10x_usart.c ****   * @date    11-March-2011
   7:Drivers/Src/stm32f10x_usart.c ****   * @brief   This file provides all the USART firmware functions.
   8:Drivers/Src/stm32f10x_usart.c ****   ******************************************************************************
   9:Drivers/Src/stm32f10x_usart.c ****   * @attention
  10:Drivers/Src/stm32f10x_usart.c ****   *
  11:Drivers/Src/stm32f10x_usart.c ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12:Drivers/Src/stm32f10x_usart.c ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13:Drivers/Src/stm32f10x_usart.c ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14:Drivers/Src/stm32f10x_usart.c ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15:Drivers/Src/stm32f10x_usart.c ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16:Drivers/Src/stm32f10x_usart.c ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17:Drivers/Src/stm32f10x_usart.c ****   *
  18:Drivers/Src/stm32f10x_usart.c ****   * <h2><center>&copy; COPYRIGHT 2011 STMicroelectronics</center></h2>
  19:Drivers/Src/stm32f10x_usart.c ****   ******************************************************************************
  20:Drivers/Src/stm32f10x_usart.c ****   */
  21:Drivers/Src/stm32f10x_usart.c **** 
  22:Drivers/Src/stm32f10x_usart.c **** /* Includes ------------------------------------------------------------------*/
  23:Drivers/Src/stm32f10x_usart.c **** #include "stm32f10x_usart.h"
  24:Drivers/Src/stm32f10x_usart.c **** #include "stm32f10x_rcc.h"
  25:Drivers/Src/stm32f10x_usart.c **** 
  26:Drivers/Src/stm32f10x_usart.c **** /** @addtogroup STM32F10x_StdPeriph_Driver
  27:Drivers/Src/stm32f10x_usart.c ****   * @{
  28:Drivers/Src/stm32f10x_usart.c ****   */
  29:Drivers/Src/stm32f10x_usart.c **** 
  30:Drivers/Src/stm32f10x_usart.c **** /** @defgroup USART 
  31:Drivers/Src/stm32f10x_usart.c ****   * @brief USART driver modules
  32:Drivers/Src/stm32f10x_usart.c ****   * @{
ARM GAS  /tmp/cc26wfU0.s 			page 2


  33:Drivers/Src/stm32f10x_usart.c ****   */
  34:Drivers/Src/stm32f10x_usart.c **** 
  35:Drivers/Src/stm32f10x_usart.c **** /** @defgroup USART_Private_TypesDefinitions
  36:Drivers/Src/stm32f10x_usart.c ****   * @{
  37:Drivers/Src/stm32f10x_usart.c ****   */
  38:Drivers/Src/stm32f10x_usart.c **** 
  39:Drivers/Src/stm32f10x_usart.c **** /**
  40:Drivers/Src/stm32f10x_usart.c ****   * @}
  41:Drivers/Src/stm32f10x_usart.c ****   */
  42:Drivers/Src/stm32f10x_usart.c **** 
  43:Drivers/Src/stm32f10x_usart.c **** /** @defgroup USART_Private_Defines
  44:Drivers/Src/stm32f10x_usart.c ****   * @{
  45:Drivers/Src/stm32f10x_usart.c ****   */
  46:Drivers/Src/stm32f10x_usart.c **** 
  47:Drivers/Src/stm32f10x_usart.c **** #define CR1_UE_Set                ((uint16_t)0x2000)  /*!< USART Enable Mask */
  48:Drivers/Src/stm32f10x_usart.c **** #define CR1_UE_Reset              ((uint16_t)0xDFFF)  /*!< USART Disable Mask */
  49:Drivers/Src/stm32f10x_usart.c **** 
  50:Drivers/Src/stm32f10x_usart.c **** #define CR1_WAKE_Mask             ((uint16_t)0xF7FF)  /*!< USART WakeUp Method Mask */
  51:Drivers/Src/stm32f10x_usart.c **** 
  52:Drivers/Src/stm32f10x_usart.c **** #define CR1_RWU_Set               ((uint16_t)0x0002)  /*!< USART mute mode Enable Mask */
  53:Drivers/Src/stm32f10x_usart.c **** #define CR1_RWU_Reset             ((uint16_t)0xFFFD)  /*!< USART mute mode Enable Mask */
  54:Drivers/Src/stm32f10x_usart.c **** #define CR1_SBK_Set               ((uint16_t)0x0001)  /*!< USART Break Character send Mask */
  55:Drivers/Src/stm32f10x_usart.c **** #define CR1_CLEAR_Mask            ((uint16_t)0xE9F3)  /*!< USART CR1 Mask */
  56:Drivers/Src/stm32f10x_usart.c **** #define CR2_Address_Mask          ((uint16_t)0xFFF0)  /*!< USART address Mask */
  57:Drivers/Src/stm32f10x_usart.c **** 
  58:Drivers/Src/stm32f10x_usart.c **** #define CR2_LINEN_Set              ((uint16_t)0x4000)  /*!< USART LIN Enable Mask */
  59:Drivers/Src/stm32f10x_usart.c **** #define CR2_LINEN_Reset            ((uint16_t)0xBFFF)  /*!< USART LIN Disable Mask */
  60:Drivers/Src/stm32f10x_usart.c **** 
  61:Drivers/Src/stm32f10x_usart.c **** #define CR2_LBDL_Mask             ((uint16_t)0xFFDF)  /*!< USART LIN Break detection Mask */
  62:Drivers/Src/stm32f10x_usart.c **** #define CR2_STOP_CLEAR_Mask       ((uint16_t)0xCFFF)  /*!< USART CR2 STOP Bits Mask */
  63:Drivers/Src/stm32f10x_usart.c **** #define CR2_CLOCK_CLEAR_Mask      ((uint16_t)0xF0FF)  /*!< USART CR2 Clock Mask */
  64:Drivers/Src/stm32f10x_usart.c **** 
  65:Drivers/Src/stm32f10x_usart.c **** #define CR3_SCEN_Set              ((uint16_t)0x0020)  /*!< USART SC Enable Mask */
  66:Drivers/Src/stm32f10x_usart.c **** #define CR3_SCEN_Reset            ((uint16_t)0xFFDF)  /*!< USART SC Disable Mask */
  67:Drivers/Src/stm32f10x_usart.c **** 
  68:Drivers/Src/stm32f10x_usart.c **** #define CR3_NACK_Set              ((uint16_t)0x0010)  /*!< USART SC NACK Enable Mask */
  69:Drivers/Src/stm32f10x_usart.c **** #define CR3_NACK_Reset            ((uint16_t)0xFFEF)  /*!< USART SC NACK Disable Mask */
  70:Drivers/Src/stm32f10x_usart.c **** 
  71:Drivers/Src/stm32f10x_usart.c **** #define CR3_HDSEL_Set             ((uint16_t)0x0008)  /*!< USART Half-Duplex Enable Mask */
  72:Drivers/Src/stm32f10x_usart.c **** #define CR3_HDSEL_Reset           ((uint16_t)0xFFF7)  /*!< USART Half-Duplex Disable Mask */
  73:Drivers/Src/stm32f10x_usart.c **** 
  74:Drivers/Src/stm32f10x_usart.c **** #define CR3_IRLP_Mask             ((uint16_t)0xFFFB)  /*!< USART IrDA LowPower mode Mask */
  75:Drivers/Src/stm32f10x_usart.c **** #define CR3_CLEAR_Mask            ((uint16_t)0xFCFF)  /*!< USART CR3 Mask */
  76:Drivers/Src/stm32f10x_usart.c **** 
  77:Drivers/Src/stm32f10x_usart.c **** #define CR3_IREN_Set              ((uint16_t)0x0002)  /*!< USART IrDA Enable Mask */
  78:Drivers/Src/stm32f10x_usart.c **** #define CR3_IREN_Reset            ((uint16_t)0xFFFD)  /*!< USART IrDA Disable Mask */
  79:Drivers/Src/stm32f10x_usart.c **** #define GTPR_LSB_Mask             ((uint16_t)0x00FF)  /*!< Guard Time Register LSB Mask */
  80:Drivers/Src/stm32f10x_usart.c **** #define GTPR_MSB_Mask             ((uint16_t)0xFF00)  /*!< Guard Time Register MSB Mask */
  81:Drivers/Src/stm32f10x_usart.c **** #define IT_Mask                   ((uint16_t)0x001F)  /*!< USART Interrupt Mask */
  82:Drivers/Src/stm32f10x_usart.c **** 
  83:Drivers/Src/stm32f10x_usart.c **** /* USART OverSampling-8 Mask */
  84:Drivers/Src/stm32f10x_usart.c **** #define CR1_OVER8_Set             ((u16)0x8000)  /* USART OVER8 mode Enable Mask */
  85:Drivers/Src/stm32f10x_usart.c **** #define CR1_OVER8_Reset           ((u16)0x7FFF)  /* USART OVER8 mode Disable Mask */
  86:Drivers/Src/stm32f10x_usart.c **** 
  87:Drivers/Src/stm32f10x_usart.c **** /* USART One Bit Sampling Mask */
  88:Drivers/Src/stm32f10x_usart.c **** #define CR3_ONEBITE_Set           ((u16)0x0800)  /* USART ONEBITE mode Enable Mask */
  89:Drivers/Src/stm32f10x_usart.c **** #define CR3_ONEBITE_Reset         ((u16)0xF7FF)  /* USART ONEBITE mode Disable Mask */
ARM GAS  /tmp/cc26wfU0.s 			page 3


  90:Drivers/Src/stm32f10x_usart.c **** 
  91:Drivers/Src/stm32f10x_usart.c **** /**
  92:Drivers/Src/stm32f10x_usart.c ****   * @}
  93:Drivers/Src/stm32f10x_usart.c ****   */
  94:Drivers/Src/stm32f10x_usart.c **** 
  95:Drivers/Src/stm32f10x_usart.c **** /** @defgroup USART_Private_Macros
  96:Drivers/Src/stm32f10x_usart.c ****   * @{
  97:Drivers/Src/stm32f10x_usart.c ****   */
  98:Drivers/Src/stm32f10x_usart.c **** 
  99:Drivers/Src/stm32f10x_usart.c **** /**
 100:Drivers/Src/stm32f10x_usart.c ****   * @}
 101:Drivers/Src/stm32f10x_usart.c ****   */
 102:Drivers/Src/stm32f10x_usart.c **** 
 103:Drivers/Src/stm32f10x_usart.c **** /** @defgroup USART_Private_Variables
 104:Drivers/Src/stm32f10x_usart.c ****   * @{
 105:Drivers/Src/stm32f10x_usart.c ****   */
 106:Drivers/Src/stm32f10x_usart.c **** 
 107:Drivers/Src/stm32f10x_usart.c **** /**
 108:Drivers/Src/stm32f10x_usart.c ****   * @}
 109:Drivers/Src/stm32f10x_usart.c ****   */
 110:Drivers/Src/stm32f10x_usart.c **** 
 111:Drivers/Src/stm32f10x_usart.c **** /** @defgroup USART_Private_FunctionPrototypes
 112:Drivers/Src/stm32f10x_usart.c ****   * @{
 113:Drivers/Src/stm32f10x_usart.c ****   */
 114:Drivers/Src/stm32f10x_usart.c **** 
 115:Drivers/Src/stm32f10x_usart.c **** /**
 116:Drivers/Src/stm32f10x_usart.c ****   * @}
 117:Drivers/Src/stm32f10x_usart.c ****   */
 118:Drivers/Src/stm32f10x_usart.c **** 
 119:Drivers/Src/stm32f10x_usart.c **** /** @defgroup USART_Private_Functions
 120:Drivers/Src/stm32f10x_usart.c ****   * @{
 121:Drivers/Src/stm32f10x_usart.c ****   */
 122:Drivers/Src/stm32f10x_usart.c **** 
 123:Drivers/Src/stm32f10x_usart.c **** /**
 124:Drivers/Src/stm32f10x_usart.c ****   * @brief  Deinitializes the USARTx peripheral registers to their default reset values.
 125:Drivers/Src/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 126:Drivers/Src/stm32f10x_usart.c ****   *   This parameter can be one of the following values: 
 127:Drivers/Src/stm32f10x_usart.c ****   *      USART1, USART2, USART3, UART4 or UART5.
 128:Drivers/Src/stm32f10x_usart.c ****   * @retval None
 129:Drivers/Src/stm32f10x_usart.c ****   */
 130:Drivers/Src/stm32f10x_usart.c **** void USART_DeInit(USART_TypeDef* USARTx)
 131:Drivers/Src/stm32f10x_usart.c **** {
  27              		.loc 1 131 1
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
  36 0002 82B0     		sub	sp, sp, #8
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 16
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
ARM GAS  /tmp/cc26wfU0.s 			page 4


  42 0006 7860     		str	r0, [r7, #4]
 132:Drivers/Src/stm32f10x_usart.c ****   /* Check the parameters */
 133:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 134:Drivers/Src/stm32f10x_usart.c **** 
 135:Drivers/Src/stm32f10x_usart.c ****   if (USARTx == USART1)
  43              		.loc 1 135 6
  44 0008 7B68     		ldr	r3, [r7, #4]
  45 000a 264A     		ldr	r2, .L8
  46 000c 9342     		cmp	r3, r2
  47 000e 0AD1     		bne	.L2
 136:Drivers/Src/stm32f10x_usart.c ****   {
 137:Drivers/Src/stm32f10x_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
  48              		.loc 1 137 5
  49 0010 0121     		movs	r1, #1
  50 0012 4FF48040 		mov	r0, #16384
  51 0016 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 138:Drivers/Src/stm32f10x_usart.c ****     RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  52              		.loc 1 138 5
  53 001a 0021     		movs	r1, #0
  54 001c 4FF48040 		mov	r0, #16384
  55 0020 FFF7FEFF 		bl	RCC_APB2PeriphResetCmd
 139:Drivers/Src/stm32f10x_usart.c ****   }
 140:Drivers/Src/stm32f10x_usart.c ****   else if (USARTx == USART2)
 141:Drivers/Src/stm32f10x_usart.c ****   {
 142:Drivers/Src/stm32f10x_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 143:Drivers/Src/stm32f10x_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 144:Drivers/Src/stm32f10x_usart.c ****   }
 145:Drivers/Src/stm32f10x_usart.c ****   else if (USARTx == USART3)
 146:Drivers/Src/stm32f10x_usart.c ****   {
 147:Drivers/Src/stm32f10x_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
 148:Drivers/Src/stm32f10x_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
 149:Drivers/Src/stm32f10x_usart.c ****   }    
 150:Drivers/Src/stm32f10x_usart.c ****   else if (USARTx == UART4)
 151:Drivers/Src/stm32f10x_usart.c ****   {
 152:Drivers/Src/stm32f10x_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
 153:Drivers/Src/stm32f10x_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
 154:Drivers/Src/stm32f10x_usart.c ****   }    
 155:Drivers/Src/stm32f10x_usart.c ****   else
 156:Drivers/Src/stm32f10x_usart.c ****   {
 157:Drivers/Src/stm32f10x_usart.c ****     if (USARTx == UART5)
 158:Drivers/Src/stm32f10x_usart.c ****     { 
 159:Drivers/Src/stm32f10x_usart.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
 160:Drivers/Src/stm32f10x_usart.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 161:Drivers/Src/stm32f10x_usart.c ****     }
 162:Drivers/Src/stm32f10x_usart.c ****   }
 163:Drivers/Src/stm32f10x_usart.c **** }
  56              		.loc 1 163 1
  57 0024 3AE0     		b	.L7
  58              	.L2:
 140:Drivers/Src/stm32f10x_usart.c ****   {
  59              		.loc 1 140 11
  60 0026 7B68     		ldr	r3, [r7, #4]
  61 0028 1F4A     		ldr	r2, .L8+4
  62 002a 9342     		cmp	r3, r2
  63 002c 0AD1     		bne	.L4
 142:Drivers/Src/stm32f10x_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
  64              		.loc 1 142 5
ARM GAS  /tmp/cc26wfU0.s 			page 5


  65 002e 0121     		movs	r1, #1
  66 0030 4FF40030 		mov	r0, #131072
  67 0034 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 143:Drivers/Src/stm32f10x_usart.c ****   }
  68              		.loc 1 143 5
  69 0038 0021     		movs	r1, #0
  70 003a 4FF40030 		mov	r0, #131072
  71 003e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  72              		.loc 1 163 1
  73 0042 2BE0     		b	.L7
  74              	.L4:
 145:Drivers/Src/stm32f10x_usart.c ****   {
  75              		.loc 1 145 11
  76 0044 7B68     		ldr	r3, [r7, #4]
  77 0046 194A     		ldr	r2, .L8+8
  78 0048 9342     		cmp	r3, r2
  79 004a 0AD1     		bne	.L5
 147:Drivers/Src/stm32f10x_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
  80              		.loc 1 147 5
  81 004c 0121     		movs	r1, #1
  82 004e 4FF48020 		mov	r0, #262144
  83 0052 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 148:Drivers/Src/stm32f10x_usart.c ****   }    
  84              		.loc 1 148 5
  85 0056 0021     		movs	r1, #0
  86 0058 4FF48020 		mov	r0, #262144
  87 005c FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
  88              		.loc 1 163 1
  89 0060 1CE0     		b	.L7
  90              	.L5:
 150:Drivers/Src/stm32f10x_usart.c ****   {
  91              		.loc 1 150 11
  92 0062 7B68     		ldr	r3, [r7, #4]
  93 0064 124A     		ldr	r2, .L8+12
  94 0066 9342     		cmp	r3, r2
  95 0068 0AD1     		bne	.L6
 152:Drivers/Src/stm32f10x_usart.c ****     RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
  96              		.loc 1 152 5
  97 006a 0121     		movs	r1, #1
  98 006c 4FF40020 		mov	r0, #524288
  99 0070 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 153:Drivers/Src/stm32f10x_usart.c ****   }    
 100              		.loc 1 153 5
 101 0074 0021     		movs	r1, #0
 102 0076 4FF40020 		mov	r0, #524288
 103 007a FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 104              		.loc 1 163 1
 105 007e 0DE0     		b	.L7
 106              	.L6:
 157:Drivers/Src/stm32f10x_usart.c ****     { 
 107              		.loc 1 157 8
 108 0080 7B68     		ldr	r3, [r7, #4]
 109 0082 0C4A     		ldr	r2, .L8+16
 110 0084 9342     		cmp	r3, r2
 111 0086 09D1     		bne	.L7
 159:Drivers/Src/stm32f10x_usart.c ****       RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
 112              		.loc 1 159 7
ARM GAS  /tmp/cc26wfU0.s 			page 6


 113 0088 0121     		movs	r1, #1
 114 008a 4FF48010 		mov	r0, #1048576
 115 008e FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 160:Drivers/Src/stm32f10x_usart.c ****     }
 116              		.loc 1 160 7
 117 0092 0021     		movs	r1, #0
 118 0094 4FF48010 		mov	r0, #1048576
 119 0098 FFF7FEFF 		bl	RCC_APB1PeriphResetCmd
 120              	.L7:
 121              		.loc 1 163 1
 122 009c 00BF     		nop
 123 009e 0837     		adds	r7, r7, #8
 124              	.LCFI3:
 125              		.cfi_def_cfa_offset 8
 126 00a0 BD46     		mov	sp, r7
 127              	.LCFI4:
 128              		.cfi_def_cfa_register 13
 129              		@ sp needed
 130 00a2 80BD     		pop	{r7, pc}
 131              	.L9:
 132              		.align	2
 133              	.L8:
 134 00a4 00380140 		.word	1073821696
 135 00a8 00440040 		.word	1073759232
 136 00ac 00480040 		.word	1073760256
 137 00b0 004C0040 		.word	1073761280
 138 00b4 00500040 		.word	1073762304
 139              		.cfi_endproc
 140              	.LFE63:
 142              		.section	.text.USART_Init,"ax",%progbits
 143              		.align	1
 144              		.global	USART_Init
 145              		.syntax unified
 146              		.thumb
 147              		.thumb_func
 148              		.fpu softvfp
 150              	USART_Init:
 151              	.LFB64:
 164:Drivers/Src/stm32f10x_usart.c **** 
 165:Drivers/Src/stm32f10x_usart.c **** /**
 166:Drivers/Src/stm32f10x_usart.c ****   * @brief  Initializes the USARTx peripheral according to the specified
 167:Drivers/Src/stm32f10x_usart.c ****   *         parameters in the USART_InitStruct .
 168:Drivers/Src/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 169:Drivers/Src/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 170:Drivers/Src/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 171:Drivers/Src/stm32f10x_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
 172:Drivers/Src/stm32f10x_usart.c ****   *         that contains the configuration information for the specified USART 
 173:Drivers/Src/stm32f10x_usart.c ****   *         peripheral.
 174:Drivers/Src/stm32f10x_usart.c ****   * @retval None
 175:Drivers/Src/stm32f10x_usart.c ****   */
 176:Drivers/Src/stm32f10x_usart.c **** void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
 177:Drivers/Src/stm32f10x_usart.c **** {
 152              		.loc 1 177 1
 153              		.cfi_startproc
 154              		@ args = 0, pretend = 0, frame = 48
 155              		@ frame_needed = 1, uses_anonymous_args = 0
 156 0000 80B5     		push	{r7, lr}
ARM GAS  /tmp/cc26wfU0.s 			page 7


 157              	.LCFI5:
 158              		.cfi_def_cfa_offset 8
 159              		.cfi_offset 7, -8
 160              		.cfi_offset 14, -4
 161 0002 8CB0     		sub	sp, sp, #48
 162              	.LCFI6:
 163              		.cfi_def_cfa_offset 56
 164 0004 00AF     		add	r7, sp, #0
 165              	.LCFI7:
 166              		.cfi_def_cfa_register 7
 167 0006 7860     		str	r0, [r7, #4]
 168 0008 3960     		str	r1, [r7]
 178:Drivers/Src/stm32f10x_usart.c ****   uint32_t tmpreg = 0x00, apbclock = 0x00;
 169              		.loc 1 178 12
 170 000a 0023     		movs	r3, #0
 171 000c FB62     		str	r3, [r7, #44]
 172              		.loc 1 178 27
 173 000e 0023     		movs	r3, #0
 174 0010 BB62     		str	r3, [r7, #40]
 179:Drivers/Src/stm32f10x_usart.c ****   uint32_t integerdivider = 0x00;
 175              		.loc 1 179 12
 176 0012 0023     		movs	r3, #0
 177 0014 7B62     		str	r3, [r7, #36]
 180:Drivers/Src/stm32f10x_usart.c ****   uint32_t fractionaldivider = 0x00;
 178              		.loc 1 180 12
 179 0016 0023     		movs	r3, #0
 180 0018 3B62     		str	r3, [r7, #32]
 181:Drivers/Src/stm32f10x_usart.c ****   uint32_t usartxbase = 0;
 181              		.loc 1 181 12
 182 001a 0023     		movs	r3, #0
 183 001c FB61     		str	r3, [r7, #28]
 182:Drivers/Src/stm32f10x_usart.c ****   RCC_ClocksTypeDef RCC_ClocksStatus;
 183:Drivers/Src/stm32f10x_usart.c ****   /* Check the parameters */
 184:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 185:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_USART_BAUDRATE(USART_InitStruct->USART_BaudRate));  
 186:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_USART_WORD_LENGTH(USART_InitStruct->USART_WordLength));
 187:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_USART_STOPBITS(USART_InitStruct->USART_StopBits));
 188:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
 189:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
 190:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
 191:Drivers/Src/stm32f10x_usart.c ****   /* The hardware flow control is available only for USART1, USART2 and USART3 */
 192:Drivers/Src/stm32f10x_usart.c ****   if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
 193:Drivers/Src/stm32f10x_usart.c ****   {
 194:Drivers/Src/stm32f10x_usart.c ****     assert_param(IS_USART_123_PERIPH(USARTx));
 195:Drivers/Src/stm32f10x_usart.c ****   }
 196:Drivers/Src/stm32f10x_usart.c **** 
 197:Drivers/Src/stm32f10x_usart.c ****   usartxbase = (uint32_t)USARTx;
 184              		.loc 1 197 14
 185 001e 7B68     		ldr	r3, [r7, #4]
 186 0020 FB61     		str	r3, [r7, #28]
 198:Drivers/Src/stm32f10x_usart.c **** 
 199:Drivers/Src/stm32f10x_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 200:Drivers/Src/stm32f10x_usart.c ****   tmpreg = USARTx->CR2;
 187              		.loc 1 200 18
 188 0022 7B68     		ldr	r3, [r7, #4]
 189 0024 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 190 0026 9BB2     		uxth	r3, r3
ARM GAS  /tmp/cc26wfU0.s 			page 8


 191              		.loc 1 200 10
 192 0028 FB62     		str	r3, [r7, #44]
 201:Drivers/Src/stm32f10x_usart.c ****   /* Clear STOP[13:12] bits */
 202:Drivers/Src/stm32f10x_usart.c ****   tmpreg &= CR2_STOP_CLEAR_Mask;
 193              		.loc 1 202 10
 194 002a FA6A     		ldr	r2, [r7, #44]
 195 002c 4CF6FF73 		movw	r3, #53247
 196 0030 1340     		ands	r3, r3, r2
 197 0032 FB62     		str	r3, [r7, #44]
 203:Drivers/Src/stm32f10x_usart.c ****   /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
 204:Drivers/Src/stm32f10x_usart.c ****   /* Set STOP[13:12] bits according to USART_StopBits value */
 205:Drivers/Src/stm32f10x_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 198              		.loc 1 205 39
 199 0034 3B68     		ldr	r3, [r7]
 200 0036 DB88     		ldrh	r3, [r3, #6]
 201              		.loc 1 205 13
 202 0038 1A46     		mov	r2, r3
 203              		.loc 1 205 10
 204 003a FB6A     		ldr	r3, [r7, #44]
 205 003c 1343     		orrs	r3, r3, r2
 206 003e FB62     		str	r3, [r7, #44]
 206:Drivers/Src/stm32f10x_usart.c ****   
 207:Drivers/Src/stm32f10x_usart.c ****   /* Write to USART CR2 */
 208:Drivers/Src/stm32f10x_usart.c ****   USARTx->CR2 = (uint16_t)tmpreg;
 207              		.loc 1 208 17
 208 0040 FB6A     		ldr	r3, [r7, #44]
 209 0042 9AB2     		uxth	r2, r3
 210              		.loc 1 208 15
 211 0044 7B68     		ldr	r3, [r7, #4]
 212 0046 1A82     		strh	r2, [r3, #16]	@ movhi
 209:Drivers/Src/stm32f10x_usart.c **** 
 210:Drivers/Src/stm32f10x_usart.c **** /*---------------------------- USART CR1 Configuration -----------------------*/
 211:Drivers/Src/stm32f10x_usart.c ****   tmpreg = USARTx->CR1;
 213              		.loc 1 211 18
 214 0048 7B68     		ldr	r3, [r7, #4]
 215 004a 9B89     		ldrh	r3, [r3, #12]	@ movhi
 216 004c 9BB2     		uxth	r3, r3
 217              		.loc 1 211 10
 218 004e FB62     		str	r3, [r7, #44]
 212:Drivers/Src/stm32f10x_usart.c ****   /* Clear M, PCE, PS, TE and RE bits */
 213:Drivers/Src/stm32f10x_usart.c ****   tmpreg &= CR1_CLEAR_Mask;
 219              		.loc 1 213 10
 220 0050 FA6A     		ldr	r2, [r7, #44]
 221 0052 4EF6F313 		movw	r3, #59891
 222 0056 1340     		ands	r3, r3, r2
 223 0058 FB62     		str	r3, [r7, #44]
 214:Drivers/Src/stm32f10x_usart.c ****   /* Configure the USART Word Length, Parity and mode ----------------------- */
 215:Drivers/Src/stm32f10x_usart.c ****   /* Set the M bits according to USART_WordLength value */
 216:Drivers/Src/stm32f10x_usart.c ****   /* Set PCE and PS bits according to USART_Parity value */
 217:Drivers/Src/stm32f10x_usart.c ****   /* Set TE and RE bits according to USART_Mode value */
 218:Drivers/Src/stm32f10x_usart.c ****   tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 224              		.loc 1 218 39
 225 005a 3B68     		ldr	r3, [r7]
 226 005c 9A88     		ldrh	r2, [r3, #4]
 227              		.loc 1 218 76
 228 005e 3B68     		ldr	r3, [r7]
 229 0060 1B89     		ldrh	r3, [r3, #8]
ARM GAS  /tmp/cc26wfU0.s 			page 9


 230              		.loc 1 218 91
 231 0062 1343     		orrs	r3, r3, r2
 232 0064 9AB2     		uxth	r2, r3
 219:Drivers/Src/stm32f10x_usart.c ****             USART_InitStruct->USART_Mode;
 233              		.loc 1 219 29
 234 0066 3B68     		ldr	r3, [r7]
 235 0068 5B89     		ldrh	r3, [r3, #10]
 218:Drivers/Src/stm32f10x_usart.c ****             USART_InitStruct->USART_Mode;
 236              		.loc 1 218 91
 237 006a 1343     		orrs	r3, r3, r2
 238 006c 9BB2     		uxth	r3, r3
 239 006e 1A46     		mov	r2, r3
 218:Drivers/Src/stm32f10x_usart.c ****             USART_InitStruct->USART_Mode;
 240              		.loc 1 218 10
 241 0070 FB6A     		ldr	r3, [r7, #44]
 242 0072 1343     		orrs	r3, r3, r2
 243 0074 FB62     		str	r3, [r7, #44]
 220:Drivers/Src/stm32f10x_usart.c ****   /* Write to USART CR1 */
 221:Drivers/Src/stm32f10x_usart.c ****   USARTx->CR1 = (uint16_t)tmpreg;
 244              		.loc 1 221 17
 245 0076 FB6A     		ldr	r3, [r7, #44]
 246 0078 9AB2     		uxth	r2, r3
 247              		.loc 1 221 15
 248 007a 7B68     		ldr	r3, [r7, #4]
 249 007c 9A81     		strh	r2, [r3, #12]	@ movhi
 222:Drivers/Src/stm32f10x_usart.c **** 
 223:Drivers/Src/stm32f10x_usart.c **** /*---------------------------- USART CR3 Configuration -----------------------*/  
 224:Drivers/Src/stm32f10x_usart.c ****   tmpreg = USARTx->CR3;
 250              		.loc 1 224 18
 251 007e 7B68     		ldr	r3, [r7, #4]
 252 0080 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 253 0082 9BB2     		uxth	r3, r3
 254              		.loc 1 224 10
 255 0084 FB62     		str	r3, [r7, #44]
 225:Drivers/Src/stm32f10x_usart.c ****   /* Clear CTSE and RTSE bits */
 226:Drivers/Src/stm32f10x_usart.c ****   tmpreg &= CR3_CLEAR_Mask;
 256              		.loc 1 226 10
 257 0086 FA6A     		ldr	r2, [r7, #44]
 258 0088 4FF6FF43 		movw	r3, #64767
 259 008c 1340     		ands	r3, r3, r2
 260 008e FB62     		str	r3, [r7, #44]
 227:Drivers/Src/stm32f10x_usart.c ****   /* Configure the USART HFC -------------------------------------------------*/
 228:Drivers/Src/stm32f10x_usart.c ****   /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
 229:Drivers/Src/stm32f10x_usart.c ****   tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 261              		.loc 1 229 29
 262 0090 3B68     		ldr	r3, [r7]
 263 0092 9B89     		ldrh	r3, [r3, #12]
 264 0094 1A46     		mov	r2, r3
 265              		.loc 1 229 10
 266 0096 FB6A     		ldr	r3, [r7, #44]
 267 0098 1343     		orrs	r3, r3, r2
 268 009a FB62     		str	r3, [r7, #44]
 230:Drivers/Src/stm32f10x_usart.c ****   /* Write to USART CR3 */
 231:Drivers/Src/stm32f10x_usart.c ****   USARTx->CR3 = (uint16_t)tmpreg;
 269              		.loc 1 231 17
 270 009c FB6A     		ldr	r3, [r7, #44]
 271 009e 9AB2     		uxth	r2, r3
ARM GAS  /tmp/cc26wfU0.s 			page 10


 272              		.loc 1 231 15
 273 00a0 7B68     		ldr	r3, [r7, #4]
 274 00a2 9A82     		strh	r2, [r3, #20]	@ movhi
 232:Drivers/Src/stm32f10x_usart.c **** 
 233:Drivers/Src/stm32f10x_usart.c **** /*---------------------------- USART BRR Configuration -----------------------*/
 234:Drivers/Src/stm32f10x_usart.c ****   /* Configure the USART Baud Rate -------------------------------------------*/
 235:Drivers/Src/stm32f10x_usart.c ****   RCC_GetClocksFreq(&RCC_ClocksStatus);
 275              		.loc 1 235 3
 276 00a4 07F10803 		add	r3, r7, #8
 277 00a8 1846     		mov	r0, r3
 278 00aa FFF7FEFF 		bl	RCC_GetClocksFreq
 236:Drivers/Src/stm32f10x_usart.c ****   if (usartxbase == USART1_BASE)
 279              		.loc 1 236 6
 280 00ae FB69     		ldr	r3, [r7, #28]
 281 00b0 2E4A     		ldr	r2, .L17
 282 00b2 9342     		cmp	r3, r2
 283 00b4 02D1     		bne	.L11
 237:Drivers/Src/stm32f10x_usart.c ****   {
 238:Drivers/Src/stm32f10x_usart.c ****     apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 284              		.loc 1 238 14
 285 00b6 7B69     		ldr	r3, [r7, #20]
 286 00b8 BB62     		str	r3, [r7, #40]
 287 00ba 01E0     		b	.L12
 288              	.L11:
 239:Drivers/Src/stm32f10x_usart.c ****   }
 240:Drivers/Src/stm32f10x_usart.c ****   else
 241:Drivers/Src/stm32f10x_usart.c ****   {
 242:Drivers/Src/stm32f10x_usart.c ****     apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 289              		.loc 1 242 14
 290 00bc 3B69     		ldr	r3, [r7, #16]
 291 00be BB62     		str	r3, [r7, #40]
 292              	.L12:
 243:Drivers/Src/stm32f10x_usart.c ****   }
 244:Drivers/Src/stm32f10x_usart.c ****   
 245:Drivers/Src/stm32f10x_usart.c ****   /* Determine the integer part */
 246:Drivers/Src/stm32f10x_usart.c ****   if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 293              		.loc 1 246 14
 294 00c0 7B68     		ldr	r3, [r7, #4]
 295 00c2 9B89     		ldrh	r3, [r3, #12]	@ movhi
 296 00c4 9BB2     		uxth	r3, r3
 297              		.loc 1 246 37
 298 00c6 1BB2     		sxth	r3, r3
 299              		.loc 1 246 6
 300 00c8 002B     		cmp	r3, #0
 301 00ca 0CDA     		bge	.L13
 247:Drivers/Src/stm32f10x_usart.c ****   {
 248:Drivers/Src/stm32f10x_usart.c ****     /* Integer part computing in case Oversampling mode is 8 Samples */
 249:Drivers/Src/stm32f10x_usart.c ****     integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 302              		.loc 1 249 27
 303 00cc BA6A     		ldr	r2, [r7, #40]
 304 00ce 1346     		mov	r3, r2
 305 00d0 9B00     		lsls	r3, r3, #2
 306 00d2 1344     		add	r3, r3, r2
 307 00d4 9A00     		lsls	r2, r3, #2
 308 00d6 1A44     		add	r2, r2, r3
 309              		.loc 1 249 63
 310 00d8 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/cc26wfU0.s 			page 11


 311 00da 1B68     		ldr	r3, [r3]
 312              		.loc 1 249 44
 313 00dc 5B00     		lsls	r3, r3, #1
 314              		.loc 1 249 20
 315 00de B2FBF3F3 		udiv	r3, r2, r3
 316 00e2 7B62     		str	r3, [r7, #36]
 317 00e4 0BE0     		b	.L14
 318              	.L13:
 250:Drivers/Src/stm32f10x_usart.c ****   }
 251:Drivers/Src/stm32f10x_usart.c ****   else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
 252:Drivers/Src/stm32f10x_usart.c ****   {
 253:Drivers/Src/stm32f10x_usart.c ****     /* Integer part computing in case Oversampling mode is 16 Samples */
 254:Drivers/Src/stm32f10x_usart.c ****     integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 319              		.loc 1 254 27
 320 00e6 BA6A     		ldr	r2, [r7, #40]
 321 00e8 1346     		mov	r3, r2
 322 00ea 9B00     		lsls	r3, r3, #2
 323 00ec 1344     		add	r3, r3, r2
 324 00ee 9A00     		lsls	r2, r3, #2
 325 00f0 1A44     		add	r2, r2, r3
 326              		.loc 1 254 63
 327 00f2 3B68     		ldr	r3, [r7]
 328 00f4 1B68     		ldr	r3, [r3]
 329              		.loc 1 254 44
 330 00f6 9B00     		lsls	r3, r3, #2
 331              		.loc 1 254 20
 332 00f8 B2FBF3F3 		udiv	r3, r2, r3
 333 00fc 7B62     		str	r3, [r7, #36]
 334              	.L14:
 255:Drivers/Src/stm32f10x_usart.c ****   }
 256:Drivers/Src/stm32f10x_usart.c ****   tmpreg = (integerdivider / 100) << 4;
 335              		.loc 1 256 28
 336 00fe 7B6A     		ldr	r3, [r7, #36]
 337 0100 1B4A     		ldr	r2, .L17+4
 338 0102 A2FB0323 		umull	r2, r3, r2, r3
 339 0106 5B09     		lsrs	r3, r3, #5
 340              		.loc 1 256 10
 341 0108 1B01     		lsls	r3, r3, #4
 342 010a FB62     		str	r3, [r7, #44]
 257:Drivers/Src/stm32f10x_usart.c **** 
 258:Drivers/Src/stm32f10x_usart.c ****   /* Determine the fractional part */
 259:Drivers/Src/stm32f10x_usart.c ****   fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 343              		.loc 1 259 55
 344 010c FB6A     		ldr	r3, [r7, #44]
 345 010e 1B09     		lsrs	r3, r3, #4
 346              		.loc 1 259 45
 347 0110 6422     		movs	r2, #100
 348 0112 02FB03F3 		mul	r3, r2, r3
 349              		.loc 1 259 21
 350 0116 7A6A     		ldr	r2, [r7, #36]
 351 0118 D31A     		subs	r3, r2, r3
 352 011a 3B62     		str	r3, [r7, #32]
 260:Drivers/Src/stm32f10x_usart.c **** 
 261:Drivers/Src/stm32f10x_usart.c ****   /* Implement the fractional part in the register */
 262:Drivers/Src/stm32f10x_usart.c ****   if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 353              		.loc 1 262 14
 354 011c 7B68     		ldr	r3, [r7, #4]
ARM GAS  /tmp/cc26wfU0.s 			page 12


 355 011e 9B89     		ldrh	r3, [r3, #12]	@ movhi
 356 0120 9BB2     		uxth	r3, r3
 357              		.loc 1 262 37
 358 0122 1BB2     		sxth	r3, r3
 359              		.loc 1 262 6
 360 0124 002B     		cmp	r3, #0
 361 0126 0CDA     		bge	.L15
 263:Drivers/Src/stm32f10x_usart.c ****   {
 264:Drivers/Src/stm32f10x_usart.c ****     tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 362              		.loc 1 264 37
 363 0128 3B6A     		ldr	r3, [r7, #32]
 364 012a DB00     		lsls	r3, r3, #3
 365              		.loc 1 264 42
 366 012c 3233     		adds	r3, r3, #50
 367              		.loc 1 264 48
 368 012e 104A     		ldr	r2, .L17+4
 369 0130 A2FB0323 		umull	r2, r3, r2, r3
 370 0134 5B09     		lsrs	r3, r3, #5
 371              		.loc 1 264 56
 372 0136 03F00703 		and	r3, r3, #7
 373              		.loc 1 264 12
 374 013a FA6A     		ldr	r2, [r7, #44]
 375 013c 1343     		orrs	r3, r3, r2
 376 013e FB62     		str	r3, [r7, #44]
 377 0140 0BE0     		b	.L16
 378              	.L15:
 265:Drivers/Src/stm32f10x_usart.c ****   }
 266:Drivers/Src/stm32f10x_usart.c ****   else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
 267:Drivers/Src/stm32f10x_usart.c ****   {
 268:Drivers/Src/stm32f10x_usart.c ****     tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 379              		.loc 1 268 37
 380 0142 3B6A     		ldr	r3, [r7, #32]
 381 0144 1B01     		lsls	r3, r3, #4
 382              		.loc 1 268 43
 383 0146 3233     		adds	r3, r3, #50
 384              		.loc 1 268 49
 385 0148 094A     		ldr	r2, .L17+4
 386 014a A2FB0323 		umull	r2, r3, r2, r3
 387 014e 5B09     		lsrs	r3, r3, #5
 388              		.loc 1 268 57
 389 0150 03F00F03 		and	r3, r3, #15
 390              		.loc 1 268 12
 391 0154 FA6A     		ldr	r2, [r7, #44]
 392 0156 1343     		orrs	r3, r3, r2
 393 0158 FB62     		str	r3, [r7, #44]
 394              	.L16:
 269:Drivers/Src/stm32f10x_usart.c ****   }
 270:Drivers/Src/stm32f10x_usart.c ****   
 271:Drivers/Src/stm32f10x_usart.c ****   /* Write to USART BRR */
 272:Drivers/Src/stm32f10x_usart.c ****   USARTx->BRR = (uint16_t)tmpreg;
 395              		.loc 1 272 17
 396 015a FB6A     		ldr	r3, [r7, #44]
 397 015c 9AB2     		uxth	r2, r3
 398              		.loc 1 272 15
 399 015e 7B68     		ldr	r3, [r7, #4]
 400 0160 1A81     		strh	r2, [r3, #8]	@ movhi
 273:Drivers/Src/stm32f10x_usart.c **** }
ARM GAS  /tmp/cc26wfU0.s 			page 13


 401              		.loc 1 273 1
 402 0162 00BF     		nop
 403 0164 3037     		adds	r7, r7, #48
 404              	.LCFI8:
 405              		.cfi_def_cfa_offset 8
 406 0166 BD46     		mov	sp, r7
 407              	.LCFI9:
 408              		.cfi_def_cfa_register 13
 409              		@ sp needed
 410 0168 80BD     		pop	{r7, pc}
 411              	.L18:
 412 016a 00BF     		.align	2
 413              	.L17:
 414 016c 00380140 		.word	1073821696
 415 0170 1F85EB51 		.word	1374389535
 416              		.cfi_endproc
 417              	.LFE64:
 419              		.section	.text.USART_StructInit,"ax",%progbits
 420              		.align	1
 421              		.global	USART_StructInit
 422              		.syntax unified
 423              		.thumb
 424              		.thumb_func
 425              		.fpu softvfp
 427              	USART_StructInit:
 428              	.LFB65:
 274:Drivers/Src/stm32f10x_usart.c **** 
 275:Drivers/Src/stm32f10x_usart.c **** /**
 276:Drivers/Src/stm32f10x_usart.c ****   * @brief  Fills each USART_InitStruct member with its default value.
 277:Drivers/Src/stm32f10x_usart.c ****   * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
 278:Drivers/Src/stm32f10x_usart.c ****   *         which will be initialized.
 279:Drivers/Src/stm32f10x_usart.c ****   * @retval None
 280:Drivers/Src/stm32f10x_usart.c ****   */
 281:Drivers/Src/stm32f10x_usart.c **** void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
 282:Drivers/Src/stm32f10x_usart.c **** {
 429              		.loc 1 282 1
 430              		.cfi_startproc
 431              		@ args = 0, pretend = 0, frame = 8
 432              		@ frame_needed = 1, uses_anonymous_args = 0
 433              		@ link register save eliminated.
 434 0000 80B4     		push	{r7}
 435              	.LCFI10:
 436              		.cfi_def_cfa_offset 4
 437              		.cfi_offset 7, -4
 438 0002 83B0     		sub	sp, sp, #12
 439              	.LCFI11:
 440              		.cfi_def_cfa_offset 16
 441 0004 00AF     		add	r7, sp, #0
 442              	.LCFI12:
 443              		.cfi_def_cfa_register 7
 444 0006 7860     		str	r0, [r7, #4]
 283:Drivers/Src/stm32f10x_usart.c ****   /* USART_InitStruct members default value */
 284:Drivers/Src/stm32f10x_usart.c ****   USART_InitStruct->USART_BaudRate = 9600;
 445              		.loc 1 284 36
 446 0008 7B68     		ldr	r3, [r7, #4]
 447 000a 4FF41652 		mov	r2, #9600
 448 000e 1A60     		str	r2, [r3]
ARM GAS  /tmp/cc26wfU0.s 			page 14


 285:Drivers/Src/stm32f10x_usart.c ****   USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 449              		.loc 1 285 38
 450 0010 7B68     		ldr	r3, [r7, #4]
 451 0012 0022     		movs	r2, #0
 452 0014 9A80     		strh	r2, [r3, #4]	@ movhi
 286:Drivers/Src/stm32f10x_usart.c ****   USART_InitStruct->USART_StopBits = USART_StopBits_1;
 453              		.loc 1 286 36
 454 0016 7B68     		ldr	r3, [r7, #4]
 455 0018 0022     		movs	r2, #0
 456 001a DA80     		strh	r2, [r3, #6]	@ movhi
 287:Drivers/Src/stm32f10x_usart.c ****   USART_InitStruct->USART_Parity = USART_Parity_No ;
 457              		.loc 1 287 34
 458 001c 7B68     		ldr	r3, [r7, #4]
 459 001e 0022     		movs	r2, #0
 460 0020 1A81     		strh	r2, [r3, #8]	@ movhi
 288:Drivers/Src/stm32f10x_usart.c ****   USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 461              		.loc 1 288 32
 462 0022 7B68     		ldr	r3, [r7, #4]
 463 0024 0C22     		movs	r2, #12
 464 0026 5A81     		strh	r2, [r3, #10]	@ movhi
 289:Drivers/Src/stm32f10x_usart.c ****   USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 465              		.loc 1 289 47
 466 0028 7B68     		ldr	r3, [r7, #4]
 467 002a 0022     		movs	r2, #0
 468 002c 9A81     		strh	r2, [r3, #12]	@ movhi
 290:Drivers/Src/stm32f10x_usart.c **** }
 469              		.loc 1 290 1
 470 002e 00BF     		nop
 471 0030 0C37     		adds	r7, r7, #12
 472              	.LCFI13:
 473              		.cfi_def_cfa_offset 4
 474 0032 BD46     		mov	sp, r7
 475              	.LCFI14:
 476              		.cfi_def_cfa_register 13
 477              		@ sp needed
 478 0034 80BC     		pop	{r7}
 479              	.LCFI15:
 480              		.cfi_restore 7
 481              		.cfi_def_cfa_offset 0
 482 0036 7047     		bx	lr
 483              		.cfi_endproc
 484              	.LFE65:
 486              		.section	.text.USART_ClockInit,"ax",%progbits
 487              		.align	1
 488              		.global	USART_ClockInit
 489              		.syntax unified
 490              		.thumb
 491              		.thumb_func
 492              		.fpu softvfp
 494              	USART_ClockInit:
 495              	.LFB66:
 291:Drivers/Src/stm32f10x_usart.c **** 
 292:Drivers/Src/stm32f10x_usart.c **** /**
 293:Drivers/Src/stm32f10x_usart.c ****   * @brief  Initializes the USARTx peripheral Clock according to the 
 294:Drivers/Src/stm32f10x_usart.c ****   *          specified parameters in the USART_ClockInitStruct .
 295:Drivers/Src/stm32f10x_usart.c ****   * @param  USARTx: where x can be 1, 2, 3 to select the USART peripheral.
 296:Drivers/Src/stm32f10x_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
ARM GAS  /tmp/cc26wfU0.s 			page 15


 297:Drivers/Src/stm32f10x_usart.c ****   *         structure that contains the configuration information for the specified 
 298:Drivers/Src/stm32f10x_usart.c ****   *         USART peripheral.  
 299:Drivers/Src/stm32f10x_usart.c ****   * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
 300:Drivers/Src/stm32f10x_usart.c ****   * @retval None
 301:Drivers/Src/stm32f10x_usart.c ****   */
 302:Drivers/Src/stm32f10x_usart.c **** void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
 303:Drivers/Src/stm32f10x_usart.c **** {
 496              		.loc 1 303 1
 497              		.cfi_startproc
 498              		@ args = 0, pretend = 0, frame = 16
 499              		@ frame_needed = 1, uses_anonymous_args = 0
 500              		@ link register save eliminated.
 501 0000 80B4     		push	{r7}
 502              	.LCFI16:
 503              		.cfi_def_cfa_offset 4
 504              		.cfi_offset 7, -4
 505 0002 85B0     		sub	sp, sp, #20
 506              	.LCFI17:
 507              		.cfi_def_cfa_offset 24
 508 0004 00AF     		add	r7, sp, #0
 509              	.LCFI18:
 510              		.cfi_def_cfa_register 7
 511 0006 7860     		str	r0, [r7, #4]
 512 0008 3960     		str	r1, [r7]
 304:Drivers/Src/stm32f10x_usart.c ****   uint32_t tmpreg = 0x00;
 513              		.loc 1 304 12
 514 000a 0023     		movs	r3, #0
 515 000c FB60     		str	r3, [r7, #12]
 305:Drivers/Src/stm32f10x_usart.c ****   /* Check the parameters */
 306:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_USART_123_PERIPH(USARTx));
 307:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
 308:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
 309:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
 310:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
 311:Drivers/Src/stm32f10x_usart.c ****   
 312:Drivers/Src/stm32f10x_usart.c **** /*---------------------------- USART CR2 Configuration -----------------------*/
 313:Drivers/Src/stm32f10x_usart.c ****   tmpreg = USARTx->CR2;
 516              		.loc 1 313 18
 517 000e 7B68     		ldr	r3, [r7, #4]
 518 0010 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 519 0012 9BB2     		uxth	r3, r3
 520              		.loc 1 313 10
 521 0014 FB60     		str	r3, [r7, #12]
 314:Drivers/Src/stm32f10x_usart.c ****   /* Clear CLKEN, CPOL, CPHA and LBCL bits */
 315:Drivers/Src/stm32f10x_usart.c ****   tmpreg &= CR2_CLOCK_CLEAR_Mask;
 522              		.loc 1 315 10
 523 0016 FA68     		ldr	r2, [r7, #12]
 524 0018 4FF2FF03 		movw	r3, #61695
 525 001c 1340     		ands	r3, r3, r2
 526 001e FB60     		str	r3, [r7, #12]
 316:Drivers/Src/stm32f10x_usart.c ****   /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
 317:Drivers/Src/stm32f10x_usart.c ****   /* Set CLKEN bit according to USART_Clock value */
 318:Drivers/Src/stm32f10x_usart.c ****   /* Set CPOL bit according to USART_CPOL value */
 319:Drivers/Src/stm32f10x_usart.c ****   /* Set CPHA bit according to USART_CPHA value */
 320:Drivers/Src/stm32f10x_usart.c ****   /* Set LBCL bit according to USART_LastBit value */
 321:Drivers/Src/stm32f10x_usart.c ****   tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 527              		.loc 1 321 44
ARM GAS  /tmp/cc26wfU0.s 			page 16


 528 0020 3B68     		ldr	r3, [r7]
 529 0022 1A88     		ldrh	r2, [r3]
 530              		.loc 1 321 81
 531 0024 3B68     		ldr	r3, [r7]
 532 0026 5B88     		ldrh	r3, [r3, #2]
 322:Drivers/Src/stm32f10x_usart.c ****                  USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 533              		.loc 1 322 52
 534 0028 1343     		orrs	r3, r3, r2
 535 002a 9AB2     		uxth	r2, r3
 536              		.loc 1 322 39
 537 002c 3B68     		ldr	r3, [r7]
 538 002e 9B88     		ldrh	r3, [r3, #4]
 539              		.loc 1 322 52
 540 0030 1343     		orrs	r3, r3, r2
 541 0032 9AB2     		uxth	r2, r3
 542              		.loc 1 322 75
 543 0034 3B68     		ldr	r3, [r7]
 544 0036 DB88     		ldrh	r3, [r3, #6]
 545              		.loc 1 322 52
 546 0038 1343     		orrs	r3, r3, r2
 547 003a 9BB2     		uxth	r3, r3
 548 003c 1A46     		mov	r2, r3
 321:Drivers/Src/stm32f10x_usart.c ****                  USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 549              		.loc 1 321 10
 550 003e FB68     		ldr	r3, [r7, #12]
 551 0040 1343     		orrs	r3, r3, r2
 552 0042 FB60     		str	r3, [r7, #12]
 323:Drivers/Src/stm32f10x_usart.c ****   /* Write to USART CR2 */
 324:Drivers/Src/stm32f10x_usart.c ****   USARTx->CR2 = (uint16_t)tmpreg;
 553              		.loc 1 324 17
 554 0044 FB68     		ldr	r3, [r7, #12]
 555 0046 9AB2     		uxth	r2, r3
 556              		.loc 1 324 15
 557 0048 7B68     		ldr	r3, [r7, #4]
 558 004a 1A82     		strh	r2, [r3, #16]	@ movhi
 325:Drivers/Src/stm32f10x_usart.c **** }
 559              		.loc 1 325 1
 560 004c 00BF     		nop
 561 004e 1437     		adds	r7, r7, #20
 562              	.LCFI19:
 563              		.cfi_def_cfa_offset 4
 564 0050 BD46     		mov	sp, r7
 565              	.LCFI20:
 566              		.cfi_def_cfa_register 13
 567              		@ sp needed
 568 0052 80BC     		pop	{r7}
 569              	.LCFI21:
 570              		.cfi_restore 7
 571              		.cfi_def_cfa_offset 0
 572 0054 7047     		bx	lr
 573              		.cfi_endproc
 574              	.LFE66:
 576              		.section	.text.USART_ClockStructInit,"ax",%progbits
 577              		.align	1
 578              		.global	USART_ClockStructInit
 579              		.syntax unified
 580              		.thumb
ARM GAS  /tmp/cc26wfU0.s 			page 17


 581              		.thumb_func
 582              		.fpu softvfp
 584              	USART_ClockStructInit:
 585              	.LFB67:
 326:Drivers/Src/stm32f10x_usart.c **** 
 327:Drivers/Src/stm32f10x_usart.c **** /**
 328:Drivers/Src/stm32f10x_usart.c ****   * @brief  Fills each USART_ClockInitStruct member with its default value.
 329:Drivers/Src/stm32f10x_usart.c ****   * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
 330:Drivers/Src/stm32f10x_usart.c ****   *         structure which will be initialized.
 331:Drivers/Src/stm32f10x_usart.c ****   * @retval None
 332:Drivers/Src/stm32f10x_usart.c ****   */
 333:Drivers/Src/stm32f10x_usart.c **** void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
 334:Drivers/Src/stm32f10x_usart.c **** {
 586              		.loc 1 334 1
 587              		.cfi_startproc
 588              		@ args = 0, pretend = 0, frame = 8
 589              		@ frame_needed = 1, uses_anonymous_args = 0
 590              		@ link register save eliminated.
 591 0000 80B4     		push	{r7}
 592              	.LCFI22:
 593              		.cfi_def_cfa_offset 4
 594              		.cfi_offset 7, -4
 595 0002 83B0     		sub	sp, sp, #12
 596              	.LCFI23:
 597              		.cfi_def_cfa_offset 16
 598 0004 00AF     		add	r7, sp, #0
 599              	.LCFI24:
 600              		.cfi_def_cfa_register 7
 601 0006 7860     		str	r0, [r7, #4]
 335:Drivers/Src/stm32f10x_usart.c ****   /* USART_ClockInitStruct members default value */
 336:Drivers/Src/stm32f10x_usart.c ****   USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 602              		.loc 1 336 38
 603 0008 7B68     		ldr	r3, [r7, #4]
 604 000a 0022     		movs	r2, #0
 605 000c 1A80     		strh	r2, [r3]	@ movhi
 337:Drivers/Src/stm32f10x_usart.c ****   USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 606              		.loc 1 337 37
 607 000e 7B68     		ldr	r3, [r7, #4]
 608 0010 0022     		movs	r2, #0
 609 0012 5A80     		strh	r2, [r3, #2]	@ movhi
 338:Drivers/Src/stm32f10x_usart.c ****   USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 610              		.loc 1 338 37
 611 0014 7B68     		ldr	r3, [r7, #4]
 612 0016 0022     		movs	r2, #0
 613 0018 9A80     		strh	r2, [r3, #4]	@ movhi
 339:Drivers/Src/stm32f10x_usart.c ****   USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 614              		.loc 1 339 40
 615 001a 7B68     		ldr	r3, [r7, #4]
 616 001c 0022     		movs	r2, #0
 617 001e DA80     		strh	r2, [r3, #6]	@ movhi
 340:Drivers/Src/stm32f10x_usart.c **** }
 618              		.loc 1 340 1
 619 0020 00BF     		nop
 620 0022 0C37     		adds	r7, r7, #12
 621              	.LCFI25:
 622              		.cfi_def_cfa_offset 4
 623 0024 BD46     		mov	sp, r7
ARM GAS  /tmp/cc26wfU0.s 			page 18


 624              	.LCFI26:
 625              		.cfi_def_cfa_register 13
 626              		@ sp needed
 627 0026 80BC     		pop	{r7}
 628              	.LCFI27:
 629              		.cfi_restore 7
 630              		.cfi_def_cfa_offset 0
 631 0028 7047     		bx	lr
 632              		.cfi_endproc
 633              	.LFE67:
 635              		.section	.text.USART_Cmd,"ax",%progbits
 636              		.align	1
 637              		.global	USART_Cmd
 638              		.syntax unified
 639              		.thumb
 640              		.thumb_func
 641              		.fpu softvfp
 643              	USART_Cmd:
 644              	.LFB68:
 341:Drivers/Src/stm32f10x_usart.c **** 
 342:Drivers/Src/stm32f10x_usart.c **** /**
 343:Drivers/Src/stm32f10x_usart.c ****   * @brief  Enables or disables the specified USART peripheral.
 344:Drivers/Src/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 345:Drivers/Src/stm32f10x_usart.c ****   *         This parameter can be one of the following values:
 346:Drivers/Src/stm32f10x_usart.c ****   *           USART1, USART2, USART3, UART4 or UART5.
 347:Drivers/Src/stm32f10x_usart.c ****   * @param  NewState: new state of the USARTx peripheral.
 348:Drivers/Src/stm32f10x_usart.c ****   *         This parameter can be: ENABLE or DISABLE.
 349:Drivers/Src/stm32f10x_usart.c ****   * @retval None
 350:Drivers/Src/stm32f10x_usart.c ****   */
 351:Drivers/Src/stm32f10x_usart.c **** void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 352:Drivers/Src/stm32f10x_usart.c **** {
 645              		.loc 1 352 1
 646              		.cfi_startproc
 647              		@ args = 0, pretend = 0, frame = 8
 648              		@ frame_needed = 1, uses_anonymous_args = 0
 649              		@ link register save eliminated.
 650 0000 80B4     		push	{r7}
 651              	.LCFI28:
 652              		.cfi_def_cfa_offset 4
 653              		.cfi_offset 7, -4
 654 0002 83B0     		sub	sp, sp, #12
 655              	.LCFI29:
 656              		.cfi_def_cfa_offset 16
 657 0004 00AF     		add	r7, sp, #0
 658              	.LCFI30:
 659              		.cfi_def_cfa_register 7
 660 0006 7860     		str	r0, [r7, #4]
 661 0008 0B46     		mov	r3, r1
 662 000a FB70     		strb	r3, [r7, #3]
 353:Drivers/Src/stm32f10x_usart.c ****   /* Check the parameters */
 354:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 355:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 356:Drivers/Src/stm32f10x_usart.c ****   
 357:Drivers/Src/stm32f10x_usart.c ****   if (NewState != DISABLE)
 663              		.loc 1 357 6
 664 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 665 000e 002B     		cmp	r3, #0
ARM GAS  /tmp/cc26wfU0.s 			page 19


 666 0010 08D0     		beq	.L23
 358:Drivers/Src/stm32f10x_usart.c ****   {
 359:Drivers/Src/stm32f10x_usart.c ****     /* Enable the selected USART by setting the UE bit in the CR1 register */
 360:Drivers/Src/stm32f10x_usart.c ****     USARTx->CR1 |= CR1_UE_Set;
 667              		.loc 1 360 17
 668 0012 7B68     		ldr	r3, [r7, #4]
 669 0014 9B89     		ldrh	r3, [r3, #12]	@ movhi
 670 0016 9BB2     		uxth	r3, r3
 671 0018 43F40053 		orr	r3, r3, #8192
 672 001c 9AB2     		uxth	r2, r3
 673 001e 7B68     		ldr	r3, [r7, #4]
 674 0020 9A81     		strh	r2, [r3, #12]	@ movhi
 361:Drivers/Src/stm32f10x_usart.c ****   }
 362:Drivers/Src/stm32f10x_usart.c ****   else
 363:Drivers/Src/stm32f10x_usart.c ****   {
 364:Drivers/Src/stm32f10x_usart.c ****     /* Disable the selected USART by clearing the UE bit in the CR1 register */
 365:Drivers/Src/stm32f10x_usart.c ****     USARTx->CR1 &= CR1_UE_Reset;
 366:Drivers/Src/stm32f10x_usart.c ****   }
 367:Drivers/Src/stm32f10x_usart.c **** }
 675              		.loc 1 367 1
 676 0022 07E0     		b	.L25
 677              	.L23:
 365:Drivers/Src/stm32f10x_usart.c ****   }
 678              		.loc 1 365 17
 679 0024 7B68     		ldr	r3, [r7, #4]
 680 0026 9B89     		ldrh	r3, [r3, #12]	@ movhi
 681 0028 9BB2     		uxth	r3, r3
 682 002a 23F40053 		bic	r3, r3, #8192
 683 002e 9AB2     		uxth	r2, r3
 684 0030 7B68     		ldr	r3, [r7, #4]
 685 0032 9A81     		strh	r2, [r3, #12]	@ movhi
 686              	.L25:
 687              		.loc 1 367 1
 688 0034 00BF     		nop
 689 0036 0C37     		adds	r7, r7, #12
 690              	.LCFI31:
 691              		.cfi_def_cfa_offset 4
 692 0038 BD46     		mov	sp, r7
 693              	.LCFI32:
 694              		.cfi_def_cfa_register 13
 695              		@ sp needed
 696 003a 80BC     		pop	{r7}
 697              	.LCFI33:
 698              		.cfi_restore 7
 699              		.cfi_def_cfa_offset 0
 700 003c 7047     		bx	lr
 701              		.cfi_endproc
 702              	.LFE68:
 704              		.section	.text.USART_ITConfig,"ax",%progbits
 705              		.align	1
 706              		.global	USART_ITConfig
 707              		.syntax unified
 708              		.thumb
 709              		.thumb_func
 710              		.fpu softvfp
 712              	USART_ITConfig:
 713              	.LFB69:
ARM GAS  /tmp/cc26wfU0.s 			page 20


 368:Drivers/Src/stm32f10x_usart.c **** 
 369:Drivers/Src/stm32f10x_usart.c **** /**
 370:Drivers/Src/stm32f10x_usart.c ****   * @brief  Enables or disables the specified USART interrupts.
 371:Drivers/Src/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 372:Drivers/Src/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 373:Drivers/Src/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 374:Drivers/Src/stm32f10x_usart.c ****   * @param  USART_IT: specifies the USART interrupt sources to be enabled or disabled.
 375:Drivers/Src/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 376:Drivers/Src/stm32f10x_usart.c ****   *     @arg USART_IT_CTS:  CTS change interrupt (not available for UART4 and UART5)
 377:Drivers/Src/stm32f10x_usart.c ****   *     @arg USART_IT_LBD:  LIN Break detection interrupt
 378:Drivers/Src/stm32f10x_usart.c ****   *     @arg USART_IT_TXE:  Transmit Data Register empty interrupt
 379:Drivers/Src/stm32f10x_usart.c ****   *     @arg USART_IT_TC:   Transmission complete interrupt
 380:Drivers/Src/stm32f10x_usart.c ****   *     @arg USART_IT_RXNE: Receive Data register not empty interrupt
 381:Drivers/Src/stm32f10x_usart.c ****   *     @arg USART_IT_IDLE: Idle line detection interrupt
 382:Drivers/Src/stm32f10x_usart.c ****   *     @arg USART_IT_PE:   Parity Error interrupt
 383:Drivers/Src/stm32f10x_usart.c ****   *     @arg USART_IT_ERR:  Error interrupt(Frame error, noise error, overrun error)
 384:Drivers/Src/stm32f10x_usart.c ****   * @param  NewState: new state of the specified USARTx interrupts.
 385:Drivers/Src/stm32f10x_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
 386:Drivers/Src/stm32f10x_usart.c ****   * @retval None
 387:Drivers/Src/stm32f10x_usart.c ****   */
 388:Drivers/Src/stm32f10x_usart.c **** void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
 389:Drivers/Src/stm32f10x_usart.c **** {
 714              		.loc 1 389 1
 715              		.cfi_startproc
 716              		@ args = 0, pretend = 0, frame = 24
 717              		@ frame_needed = 1, uses_anonymous_args = 0
 718              		@ link register save eliminated.
 719 0000 80B4     		push	{r7}
 720              	.LCFI34:
 721              		.cfi_def_cfa_offset 4
 722              		.cfi_offset 7, -4
 723 0002 87B0     		sub	sp, sp, #28
 724              	.LCFI35:
 725              		.cfi_def_cfa_offset 32
 726 0004 00AF     		add	r7, sp, #0
 727              	.LCFI36:
 728              		.cfi_def_cfa_register 7
 729 0006 7860     		str	r0, [r7, #4]
 730 0008 0B46     		mov	r3, r1
 731 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 732 000c 1346     		mov	r3, r2
 733 000e 7B70     		strb	r3, [r7, #1]
 390:Drivers/Src/stm32f10x_usart.c ****   uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 734              		.loc 1 390 12
 735 0010 0023     		movs	r3, #0
 736 0012 3B61     		str	r3, [r7, #16]
 737              		.loc 1 390 29
 738 0014 0023     		movs	r3, #0
 739 0016 FB60     		str	r3, [r7, #12]
 740              		.loc 1 390 43
 741 0018 0023     		movs	r3, #0
 742 001a BB60     		str	r3, [r7, #8]
 391:Drivers/Src/stm32f10x_usart.c ****   uint32_t usartxbase = 0x00;
 743              		.loc 1 391 12
 744 001c 0023     		movs	r3, #0
 745 001e 7B61     		str	r3, [r7, #20]
 392:Drivers/Src/stm32f10x_usart.c ****   /* Check the parameters */
ARM GAS  /tmp/cc26wfU0.s 			page 21


 393:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 394:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_USART_CONFIG_IT(USART_IT));
 395:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 396:Drivers/Src/stm32f10x_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */
 397:Drivers/Src/stm32f10x_usart.c ****   if (USART_IT == USART_IT_CTS)
 398:Drivers/Src/stm32f10x_usart.c ****   {
 399:Drivers/Src/stm32f10x_usart.c ****     assert_param(IS_USART_123_PERIPH(USARTx));
 400:Drivers/Src/stm32f10x_usart.c ****   }   
 401:Drivers/Src/stm32f10x_usart.c ****   
 402:Drivers/Src/stm32f10x_usart.c ****   usartxbase = (uint32_t)USARTx;
 746              		.loc 1 402 14
 747 0020 7B68     		ldr	r3, [r7, #4]
 748 0022 7B61     		str	r3, [r7, #20]
 403:Drivers/Src/stm32f10x_usart.c **** 
 404:Drivers/Src/stm32f10x_usart.c ****   /* Get the USART register index */
 405:Drivers/Src/stm32f10x_usart.c ****   usartreg = (((uint8_t)USART_IT) >> 0x05);
 749              		.loc 1 405 16
 750 0024 7B88     		ldrh	r3, [r7, #2]	@ movhi
 751 0026 DBB2     		uxtb	r3, r3
 752              		.loc 1 405 35
 753 0028 5B09     		lsrs	r3, r3, #5
 754 002a DBB2     		uxtb	r3, r3
 755              		.loc 1 405 12
 756 002c 3B61     		str	r3, [r7, #16]
 406:Drivers/Src/stm32f10x_usart.c **** 
 407:Drivers/Src/stm32f10x_usart.c ****   /* Get the interrupt position */
 408:Drivers/Src/stm32f10x_usart.c ****   itpos = USART_IT & IT_Mask;
 757              		.loc 1 408 20
 758 002e 7B88     		ldrh	r3, [r7, #2]
 759              		.loc 1 408 9
 760 0030 03F01F03 		and	r3, r3, #31
 761 0034 FB60     		str	r3, [r7, #12]
 409:Drivers/Src/stm32f10x_usart.c ****   itmask = (((uint32_t)0x01) << itpos);
 762              		.loc 1 409 10
 763 0036 0122     		movs	r2, #1
 764 0038 FB68     		ldr	r3, [r7, #12]
 765 003a 02FA03F3 		lsl	r3, r2, r3
 766 003e BB60     		str	r3, [r7, #8]
 410:Drivers/Src/stm32f10x_usart.c ****     
 411:Drivers/Src/stm32f10x_usart.c ****   if (usartreg == 0x01) /* The IT is in CR1 register */
 767              		.loc 1 411 6
 768 0040 3B69     		ldr	r3, [r7, #16]
 769 0042 012B     		cmp	r3, #1
 770 0044 03D1     		bne	.L27
 412:Drivers/Src/stm32f10x_usart.c ****   {
 413:Drivers/Src/stm32f10x_usart.c ****     usartxbase += 0x0C;
 771              		.loc 1 413 16
 772 0046 7B69     		ldr	r3, [r7, #20]
 773 0048 0C33     		adds	r3, r3, #12
 774 004a 7B61     		str	r3, [r7, #20]
 775 004c 09E0     		b	.L28
 776              	.L27:
 414:Drivers/Src/stm32f10x_usart.c ****   }
 415:Drivers/Src/stm32f10x_usart.c ****   else if (usartreg == 0x02) /* The IT is in CR2 register */
 777              		.loc 1 415 11
 778 004e 3B69     		ldr	r3, [r7, #16]
 779 0050 022B     		cmp	r3, #2
ARM GAS  /tmp/cc26wfU0.s 			page 22


 780 0052 03D1     		bne	.L29
 416:Drivers/Src/stm32f10x_usart.c ****   {
 417:Drivers/Src/stm32f10x_usart.c ****     usartxbase += 0x10;
 781              		.loc 1 417 16
 782 0054 7B69     		ldr	r3, [r7, #20]
 783 0056 1033     		adds	r3, r3, #16
 784 0058 7B61     		str	r3, [r7, #20]
 785 005a 02E0     		b	.L28
 786              	.L29:
 418:Drivers/Src/stm32f10x_usart.c ****   }
 419:Drivers/Src/stm32f10x_usart.c ****   else /* The IT is in CR3 register */
 420:Drivers/Src/stm32f10x_usart.c ****   {
 421:Drivers/Src/stm32f10x_usart.c ****     usartxbase += 0x14; 
 787              		.loc 1 421 16
 788 005c 7B69     		ldr	r3, [r7, #20]
 789 005e 1433     		adds	r3, r3, #20
 790 0060 7B61     		str	r3, [r7, #20]
 791              	.L28:
 422:Drivers/Src/stm32f10x_usart.c ****   }
 423:Drivers/Src/stm32f10x_usart.c ****   if (NewState != DISABLE)
 792              		.loc 1 423 6
 793 0062 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 794 0064 002B     		cmp	r3, #0
 795 0066 06D0     		beq	.L30
 424:Drivers/Src/stm32f10x_usart.c ****   {
 425:Drivers/Src/stm32f10x_usart.c ****     *(__IO uint32_t*)usartxbase  |= itmask;
 796              		.loc 1 425 34
 797 0068 7B69     		ldr	r3, [r7, #20]
 798 006a 1968     		ldr	r1, [r3]
 799 006c 7B69     		ldr	r3, [r7, #20]
 800 006e BA68     		ldr	r2, [r7, #8]
 801 0070 0A43     		orrs	r2, r2, r1
 802 0072 1A60     		str	r2, [r3]
 426:Drivers/Src/stm32f10x_usart.c ****   }
 427:Drivers/Src/stm32f10x_usart.c ****   else
 428:Drivers/Src/stm32f10x_usart.c ****   {
 429:Drivers/Src/stm32f10x_usart.c ****     *(__IO uint32_t*)usartxbase &= ~itmask;
 430:Drivers/Src/stm32f10x_usart.c ****   }
 431:Drivers/Src/stm32f10x_usart.c **** }
 803              		.loc 1 431 1
 804 0074 06E0     		b	.L32
 805              	.L30:
 429:Drivers/Src/stm32f10x_usart.c ****   }
 806              		.loc 1 429 33
 807 0076 7B69     		ldr	r3, [r7, #20]
 808 0078 1968     		ldr	r1, [r3]
 429:Drivers/Src/stm32f10x_usart.c ****   }
 809              		.loc 1 429 36
 810 007a BB68     		ldr	r3, [r7, #8]
 811 007c DA43     		mvns	r2, r3
 429:Drivers/Src/stm32f10x_usart.c ****   }
 812              		.loc 1 429 33
 813 007e 7B69     		ldr	r3, [r7, #20]
 814 0080 0A40     		ands	r2, r2, r1
 815 0082 1A60     		str	r2, [r3]
 816              	.L32:
 817              		.loc 1 431 1
ARM GAS  /tmp/cc26wfU0.s 			page 23


 818 0084 00BF     		nop
 819 0086 1C37     		adds	r7, r7, #28
 820              	.LCFI37:
 821              		.cfi_def_cfa_offset 4
 822 0088 BD46     		mov	sp, r7
 823              	.LCFI38:
 824              		.cfi_def_cfa_register 13
 825              		@ sp needed
 826 008a 80BC     		pop	{r7}
 827              	.LCFI39:
 828              		.cfi_restore 7
 829              		.cfi_def_cfa_offset 0
 830 008c 7047     		bx	lr
 831              		.cfi_endproc
 832              	.LFE69:
 834              		.section	.text.USART_DMACmd,"ax",%progbits
 835              		.align	1
 836              		.global	USART_DMACmd
 837              		.syntax unified
 838              		.thumb
 839              		.thumb_func
 840              		.fpu softvfp
 842              	USART_DMACmd:
 843              	.LFB70:
 432:Drivers/Src/stm32f10x_usart.c **** 
 433:Drivers/Src/stm32f10x_usart.c **** /**
 434:Drivers/Src/stm32f10x_usart.c ****   * @brief  Enables or disables the USART�s DMA interface.
 435:Drivers/Src/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 436:Drivers/Src/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 437:Drivers/Src/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 438:Drivers/Src/stm32f10x_usart.c ****   * @param  USART_DMAReq: specifies the DMA request.
 439:Drivers/Src/stm32f10x_usart.c ****   *   This parameter can be any combination of the following values:
 440:Drivers/Src/stm32f10x_usart.c ****   *     @arg USART_DMAReq_Tx: USART DMA transmit request
 441:Drivers/Src/stm32f10x_usart.c ****   *     @arg USART_DMAReq_Rx: USART DMA receive request
 442:Drivers/Src/stm32f10x_usart.c ****   * @param  NewState: new state of the DMA Request sources.
 443:Drivers/Src/stm32f10x_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
 444:Drivers/Src/stm32f10x_usart.c ****   * @note The DMA mode is not available for UART5 except in the STM32
 445:Drivers/Src/stm32f10x_usart.c ****   *       High density value line devices(STM32F10X_HD_VL).  
 446:Drivers/Src/stm32f10x_usart.c ****   * @retval None
 447:Drivers/Src/stm32f10x_usart.c ****   */
 448:Drivers/Src/stm32f10x_usart.c **** void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
 449:Drivers/Src/stm32f10x_usart.c **** {
 844              		.loc 1 449 1
 845              		.cfi_startproc
 846              		@ args = 0, pretend = 0, frame = 8
 847              		@ frame_needed = 1, uses_anonymous_args = 0
 848              		@ link register save eliminated.
 849 0000 80B4     		push	{r7}
 850              	.LCFI40:
 851              		.cfi_def_cfa_offset 4
 852              		.cfi_offset 7, -4
 853 0002 83B0     		sub	sp, sp, #12
 854              	.LCFI41:
 855              		.cfi_def_cfa_offset 16
 856 0004 00AF     		add	r7, sp, #0
 857              	.LCFI42:
 858              		.cfi_def_cfa_register 7
ARM GAS  /tmp/cc26wfU0.s 			page 24


 859 0006 7860     		str	r0, [r7, #4]
 860 0008 0B46     		mov	r3, r1
 861 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 862 000c 1346     		mov	r3, r2
 863 000e 7B70     		strb	r3, [r7, #1]
 450:Drivers/Src/stm32f10x_usart.c ****   /* Check the parameters */
 451:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 452:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_USART_DMAREQ(USART_DMAReq));  
 453:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
 454:Drivers/Src/stm32f10x_usart.c ****   if (NewState != DISABLE)
 864              		.loc 1 454 6
 865 0010 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 866 0012 002B     		cmp	r3, #0
 867 0014 08D0     		beq	.L34
 455:Drivers/Src/stm32f10x_usart.c ****   {
 456:Drivers/Src/stm32f10x_usart.c ****     /* Enable the DMA transfer for selected requests by setting the DMAT and/or
 457:Drivers/Src/stm32f10x_usart.c ****        DMAR bits in the USART CR3 register */
 458:Drivers/Src/stm32f10x_usart.c ****     USARTx->CR3 |= USART_DMAReq;
 868              		.loc 1 458 17
 869 0016 7B68     		ldr	r3, [r7, #4]
 870 0018 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 871 001a 9AB2     		uxth	r2, r3
 872 001c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 873 001e 1343     		orrs	r3, r3, r2
 874 0020 9AB2     		uxth	r2, r3
 875 0022 7B68     		ldr	r3, [r7, #4]
 876 0024 9A82     		strh	r2, [r3, #20]	@ movhi
 459:Drivers/Src/stm32f10x_usart.c ****   }
 460:Drivers/Src/stm32f10x_usart.c ****   else
 461:Drivers/Src/stm32f10x_usart.c ****   {
 462:Drivers/Src/stm32f10x_usart.c ****     /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
 463:Drivers/Src/stm32f10x_usart.c ****        DMAR bits in the USART CR3 register */
 464:Drivers/Src/stm32f10x_usart.c ****     USARTx->CR3 &= (uint16_t)~USART_DMAReq;
 465:Drivers/Src/stm32f10x_usart.c ****   }
 466:Drivers/Src/stm32f10x_usart.c **** }
 877              		.loc 1 466 1
 878 0026 09E0     		b	.L36
 879              	.L34:
 464:Drivers/Src/stm32f10x_usart.c ****   }
 880              		.loc 1 464 17
 881 0028 7B68     		ldr	r3, [r7, #4]
 882 002a 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 883 002c 9AB2     		uxth	r2, r3
 464:Drivers/Src/stm32f10x_usart.c ****   }
 884              		.loc 1 464 20
 885 002e 7B88     		ldrh	r3, [r7, #2]	@ movhi
 886 0030 DB43     		mvns	r3, r3
 887 0032 9BB2     		uxth	r3, r3
 464:Drivers/Src/stm32f10x_usart.c ****   }
 888              		.loc 1 464 17
 889 0034 1340     		ands	r3, r3, r2
 890 0036 9AB2     		uxth	r2, r3
 891 0038 7B68     		ldr	r3, [r7, #4]
 892 003a 9A82     		strh	r2, [r3, #20]	@ movhi
 893              	.L36:
 894              		.loc 1 466 1
 895 003c 00BF     		nop
ARM GAS  /tmp/cc26wfU0.s 			page 25


 896 003e 0C37     		adds	r7, r7, #12
 897              	.LCFI43:
 898              		.cfi_def_cfa_offset 4
 899 0040 BD46     		mov	sp, r7
 900              	.LCFI44:
 901              		.cfi_def_cfa_register 13
 902              		@ sp needed
 903 0042 80BC     		pop	{r7}
 904              	.LCFI45:
 905              		.cfi_restore 7
 906              		.cfi_def_cfa_offset 0
 907 0044 7047     		bx	lr
 908              		.cfi_endproc
 909              	.LFE70:
 911              		.section	.text.USART_SetAddress,"ax",%progbits
 912              		.align	1
 913              		.global	USART_SetAddress
 914              		.syntax unified
 915              		.thumb
 916              		.thumb_func
 917              		.fpu softvfp
 919              	USART_SetAddress:
 920              	.LFB71:
 467:Drivers/Src/stm32f10x_usart.c **** 
 468:Drivers/Src/stm32f10x_usart.c **** /**
 469:Drivers/Src/stm32f10x_usart.c ****   * @brief  Sets the address of the USART node.
 470:Drivers/Src/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 471:Drivers/Src/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 472:Drivers/Src/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 473:Drivers/Src/stm32f10x_usart.c ****   * @param  USART_Address: Indicates the address of the USART node.
 474:Drivers/Src/stm32f10x_usart.c ****   * @retval None
 475:Drivers/Src/stm32f10x_usart.c ****   */
 476:Drivers/Src/stm32f10x_usart.c **** void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
 477:Drivers/Src/stm32f10x_usart.c **** {
 921              		.loc 1 477 1
 922              		.cfi_startproc
 923              		@ args = 0, pretend = 0, frame = 8
 924              		@ frame_needed = 1, uses_anonymous_args = 0
 925              		@ link register save eliminated.
 926 0000 80B4     		push	{r7}
 927              	.LCFI46:
 928              		.cfi_def_cfa_offset 4
 929              		.cfi_offset 7, -4
 930 0002 83B0     		sub	sp, sp, #12
 931              	.LCFI47:
 932              		.cfi_def_cfa_offset 16
 933 0004 00AF     		add	r7, sp, #0
 934              	.LCFI48:
 935              		.cfi_def_cfa_register 7
 936 0006 7860     		str	r0, [r7, #4]
 937 0008 0B46     		mov	r3, r1
 938 000a FB70     		strb	r3, [r7, #3]
 478:Drivers/Src/stm32f10x_usart.c ****   /* Check the parameters */
 479:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 480:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_USART_ADDRESS(USART_Address)); 
 481:Drivers/Src/stm32f10x_usart.c ****     
 482:Drivers/Src/stm32f10x_usart.c ****   /* Clear the USART address */
ARM GAS  /tmp/cc26wfU0.s 			page 26


 483:Drivers/Src/stm32f10x_usart.c ****   USARTx->CR2 &= CR2_Address_Mask;
 939              		.loc 1 483 15
 940 000c 7B68     		ldr	r3, [r7, #4]
 941 000e 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 942 0010 9BB2     		uxth	r3, r3
 943 0012 23F00F03 		bic	r3, r3, #15
 944 0016 9AB2     		uxth	r2, r3
 945 0018 7B68     		ldr	r3, [r7, #4]
 946 001a 1A82     		strh	r2, [r3, #16]	@ movhi
 484:Drivers/Src/stm32f10x_usart.c **** 
 485:Drivers/Src/stm32f10x_usart.c ****   // [ILG]
 486:Drivers/Src/stm32f10x_usart.c ****   #if defined ( __GNUC__ )
 487:Drivers/Src/stm32f10x_usart.c ****   #pragma GCC diagnostic push
 488:Drivers/Src/stm32f10x_usart.c ****   #pragma GCC diagnostic ignored "-Wconversion"
 489:Drivers/Src/stm32f10x_usart.c ****   #endif
 490:Drivers/Src/stm32f10x_usart.c **** 
 491:Drivers/Src/stm32f10x_usart.c ****   /* Set the USART address node */
 492:Drivers/Src/stm32f10x_usart.c ****   USARTx->CR2 |= USART_Address;
 947              		.loc 1 492 15
 948 001c 7B68     		ldr	r3, [r7, #4]
 949 001e 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 950 0020 9AB2     		uxth	r2, r3
 951 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 952 0024 9BB2     		uxth	r3, r3
 953 0026 1343     		orrs	r3, r3, r2
 954 0028 9AB2     		uxth	r2, r3
 955 002a 7B68     		ldr	r3, [r7, #4]
 956 002c 1A82     		strh	r2, [r3, #16]	@ movhi
 493:Drivers/Src/stm32f10x_usart.c **** 
 494:Drivers/Src/stm32f10x_usart.c ****   // [ILG]
 495:Drivers/Src/stm32f10x_usart.c ****   #if defined ( __GNUC__ )
 496:Drivers/Src/stm32f10x_usart.c ****   #pragma GCC diagnostic pop
 497:Drivers/Src/stm32f10x_usart.c ****   #endif
 498:Drivers/Src/stm32f10x_usart.c **** }
 957              		.loc 1 498 1
 958 002e 00BF     		nop
 959 0030 0C37     		adds	r7, r7, #12
 960              	.LCFI49:
 961              		.cfi_def_cfa_offset 4
 962 0032 BD46     		mov	sp, r7
 963              	.LCFI50:
 964              		.cfi_def_cfa_register 13
 965              		@ sp needed
 966 0034 80BC     		pop	{r7}
 967              	.LCFI51:
 968              		.cfi_restore 7
 969              		.cfi_def_cfa_offset 0
 970 0036 7047     		bx	lr
 971              		.cfi_endproc
 972              	.LFE71:
 974              		.section	.text.USART_WakeUpConfig,"ax",%progbits
 975              		.align	1
 976              		.global	USART_WakeUpConfig
 977              		.syntax unified
 978              		.thumb
 979              		.thumb_func
 980              		.fpu softvfp
ARM GAS  /tmp/cc26wfU0.s 			page 27


 982              	USART_WakeUpConfig:
 983              	.LFB72:
 499:Drivers/Src/stm32f10x_usart.c **** 
 500:Drivers/Src/stm32f10x_usart.c **** /**
 501:Drivers/Src/stm32f10x_usart.c ****   * @brief  Selects the USART WakeUp method.
 502:Drivers/Src/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 503:Drivers/Src/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 504:Drivers/Src/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 505:Drivers/Src/stm32f10x_usart.c ****   * @param  USART_WakeUp: specifies the USART wakeup method.
 506:Drivers/Src/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 507:Drivers/Src/stm32f10x_usart.c ****   *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
 508:Drivers/Src/stm32f10x_usart.c ****   *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
 509:Drivers/Src/stm32f10x_usart.c ****   * @retval None
 510:Drivers/Src/stm32f10x_usart.c ****   */
 511:Drivers/Src/stm32f10x_usart.c **** void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
 512:Drivers/Src/stm32f10x_usart.c **** {
 984              		.loc 1 512 1
 985              		.cfi_startproc
 986              		@ args = 0, pretend = 0, frame = 8
 987              		@ frame_needed = 1, uses_anonymous_args = 0
 988              		@ link register save eliminated.
 989 0000 80B4     		push	{r7}
 990              	.LCFI52:
 991              		.cfi_def_cfa_offset 4
 992              		.cfi_offset 7, -4
 993 0002 83B0     		sub	sp, sp, #12
 994              	.LCFI53:
 995              		.cfi_def_cfa_offset 16
 996 0004 00AF     		add	r7, sp, #0
 997              	.LCFI54:
 998              		.cfi_def_cfa_register 7
 999 0006 7860     		str	r0, [r7, #4]
 1000 0008 0B46     		mov	r3, r1
 1001 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 513:Drivers/Src/stm32f10x_usart.c ****   /* Check the parameters */
 514:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 515:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_USART_WAKEUP(USART_WakeUp));
 516:Drivers/Src/stm32f10x_usart.c ****   
 517:Drivers/Src/stm32f10x_usart.c ****   USARTx->CR1 &= CR1_WAKE_Mask;
 1002              		.loc 1 517 15
 1003 000c 7B68     		ldr	r3, [r7, #4]
 1004 000e 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1005 0010 9BB2     		uxth	r3, r3
 1006 0012 23F40063 		bic	r3, r3, #2048
 1007 0016 9AB2     		uxth	r2, r3
 1008 0018 7B68     		ldr	r3, [r7, #4]
 1009 001a 9A81     		strh	r2, [r3, #12]	@ movhi
 518:Drivers/Src/stm32f10x_usart.c ****   USARTx->CR1 |= USART_WakeUp;
 1010              		.loc 1 518 15
 1011 001c 7B68     		ldr	r3, [r7, #4]
 1012 001e 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1013 0020 9AB2     		uxth	r2, r3
 1014 0022 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1015 0024 1343     		orrs	r3, r3, r2
 1016 0026 9AB2     		uxth	r2, r3
 1017 0028 7B68     		ldr	r3, [r7, #4]
 1018 002a 9A81     		strh	r2, [r3, #12]	@ movhi
ARM GAS  /tmp/cc26wfU0.s 			page 28


 519:Drivers/Src/stm32f10x_usart.c **** }
 1019              		.loc 1 519 1
 1020 002c 00BF     		nop
 1021 002e 0C37     		adds	r7, r7, #12
 1022              	.LCFI55:
 1023              		.cfi_def_cfa_offset 4
 1024 0030 BD46     		mov	sp, r7
 1025              	.LCFI56:
 1026              		.cfi_def_cfa_register 13
 1027              		@ sp needed
 1028 0032 80BC     		pop	{r7}
 1029              	.LCFI57:
 1030              		.cfi_restore 7
 1031              		.cfi_def_cfa_offset 0
 1032 0034 7047     		bx	lr
 1033              		.cfi_endproc
 1034              	.LFE72:
 1036              		.section	.text.USART_ReceiverWakeUpCmd,"ax",%progbits
 1037              		.align	1
 1038              		.global	USART_ReceiverWakeUpCmd
 1039              		.syntax unified
 1040              		.thumb
 1041              		.thumb_func
 1042              		.fpu softvfp
 1044              	USART_ReceiverWakeUpCmd:
 1045              	.LFB73:
 520:Drivers/Src/stm32f10x_usart.c **** 
 521:Drivers/Src/stm32f10x_usart.c **** /**
 522:Drivers/Src/stm32f10x_usart.c ****   * @brief  Determines if the USART is in mute mode or not.
 523:Drivers/Src/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 524:Drivers/Src/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 525:Drivers/Src/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 526:Drivers/Src/stm32f10x_usart.c ****   * @param  NewState: new state of the USART mute mode.
 527:Drivers/Src/stm32f10x_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
 528:Drivers/Src/stm32f10x_usart.c ****   * @retval None
 529:Drivers/Src/stm32f10x_usart.c ****   */
 530:Drivers/Src/stm32f10x_usart.c **** void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 531:Drivers/Src/stm32f10x_usart.c **** {
 1046              		.loc 1 531 1
 1047              		.cfi_startproc
 1048              		@ args = 0, pretend = 0, frame = 8
 1049              		@ frame_needed = 1, uses_anonymous_args = 0
 1050              		@ link register save eliminated.
 1051 0000 80B4     		push	{r7}
 1052              	.LCFI58:
 1053              		.cfi_def_cfa_offset 4
 1054              		.cfi_offset 7, -4
 1055 0002 83B0     		sub	sp, sp, #12
 1056              	.LCFI59:
 1057              		.cfi_def_cfa_offset 16
 1058 0004 00AF     		add	r7, sp, #0
 1059              	.LCFI60:
 1060              		.cfi_def_cfa_register 7
 1061 0006 7860     		str	r0, [r7, #4]
 1062 0008 0B46     		mov	r3, r1
 1063 000a FB70     		strb	r3, [r7, #3]
 532:Drivers/Src/stm32f10x_usart.c ****   /* Check the parameters */
ARM GAS  /tmp/cc26wfU0.s 			page 29


 533:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 534:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState)); 
 535:Drivers/Src/stm32f10x_usart.c ****   
 536:Drivers/Src/stm32f10x_usart.c ****   if (NewState != DISABLE)
 1064              		.loc 1 536 6
 1065 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1066 000e 002B     		cmp	r3, #0
 1067 0010 08D0     		beq	.L40
 537:Drivers/Src/stm32f10x_usart.c ****   {
 538:Drivers/Src/stm32f10x_usart.c ****     /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
 539:Drivers/Src/stm32f10x_usart.c ****     USARTx->CR1 |= CR1_RWU_Set;
 1068              		.loc 1 539 17
 1069 0012 7B68     		ldr	r3, [r7, #4]
 1070 0014 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1071 0016 9BB2     		uxth	r3, r3
 1072 0018 43F00203 		orr	r3, r3, #2
 1073 001c 9AB2     		uxth	r2, r3
 1074 001e 7B68     		ldr	r3, [r7, #4]
 1075 0020 9A81     		strh	r2, [r3, #12]	@ movhi
 540:Drivers/Src/stm32f10x_usart.c ****   }
 541:Drivers/Src/stm32f10x_usart.c ****   else
 542:Drivers/Src/stm32f10x_usart.c ****   {
 543:Drivers/Src/stm32f10x_usart.c ****     /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
 544:Drivers/Src/stm32f10x_usart.c ****     USARTx->CR1 &= CR1_RWU_Reset;
 545:Drivers/Src/stm32f10x_usart.c ****   }
 546:Drivers/Src/stm32f10x_usart.c **** }
 1076              		.loc 1 546 1
 1077 0022 07E0     		b	.L42
 1078              	.L40:
 544:Drivers/Src/stm32f10x_usart.c ****   }
 1079              		.loc 1 544 17
 1080 0024 7B68     		ldr	r3, [r7, #4]
 1081 0026 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1082 0028 9BB2     		uxth	r3, r3
 1083 002a 23F00203 		bic	r3, r3, #2
 1084 002e 9AB2     		uxth	r2, r3
 1085 0030 7B68     		ldr	r3, [r7, #4]
 1086 0032 9A81     		strh	r2, [r3, #12]	@ movhi
 1087              	.L42:
 1088              		.loc 1 546 1
 1089 0034 00BF     		nop
 1090 0036 0C37     		adds	r7, r7, #12
 1091              	.LCFI61:
 1092              		.cfi_def_cfa_offset 4
 1093 0038 BD46     		mov	sp, r7
 1094              	.LCFI62:
 1095              		.cfi_def_cfa_register 13
 1096              		@ sp needed
 1097 003a 80BC     		pop	{r7}
 1098              	.LCFI63:
 1099              		.cfi_restore 7
 1100              		.cfi_def_cfa_offset 0
 1101 003c 7047     		bx	lr
 1102              		.cfi_endproc
 1103              	.LFE73:
 1105              		.section	.text.USART_LINBreakDetectLengthConfig,"ax",%progbits
 1106              		.align	1
ARM GAS  /tmp/cc26wfU0.s 			page 30


 1107              		.global	USART_LINBreakDetectLengthConfig
 1108              		.syntax unified
 1109              		.thumb
 1110              		.thumb_func
 1111              		.fpu softvfp
 1113              	USART_LINBreakDetectLengthConfig:
 1114              	.LFB74:
 547:Drivers/Src/stm32f10x_usart.c **** 
 548:Drivers/Src/stm32f10x_usart.c **** /**
 549:Drivers/Src/stm32f10x_usart.c ****   * @brief  Sets the USART LIN Break detection length.
 550:Drivers/Src/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 551:Drivers/Src/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 552:Drivers/Src/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 553:Drivers/Src/stm32f10x_usart.c ****   * @param  USART_LINBreakDetectLength: specifies the LIN break detection length.
 554:Drivers/Src/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 555:Drivers/Src/stm32f10x_usart.c ****   *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
 556:Drivers/Src/stm32f10x_usart.c ****   *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
 557:Drivers/Src/stm32f10x_usart.c ****   * @retval None
 558:Drivers/Src/stm32f10x_usart.c ****   */
 559:Drivers/Src/stm32f10x_usart.c **** void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
 560:Drivers/Src/stm32f10x_usart.c **** {
 1115              		.loc 1 560 1
 1116              		.cfi_startproc
 1117              		@ args = 0, pretend = 0, frame = 8
 1118              		@ frame_needed = 1, uses_anonymous_args = 0
 1119              		@ link register save eliminated.
 1120 0000 80B4     		push	{r7}
 1121              	.LCFI64:
 1122              		.cfi_def_cfa_offset 4
 1123              		.cfi_offset 7, -4
 1124 0002 83B0     		sub	sp, sp, #12
 1125              	.LCFI65:
 1126              		.cfi_def_cfa_offset 16
 1127 0004 00AF     		add	r7, sp, #0
 1128              	.LCFI66:
 1129              		.cfi_def_cfa_register 7
 1130 0006 7860     		str	r0, [r7, #4]
 1131 0008 0B46     		mov	r3, r1
 1132 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 561:Drivers/Src/stm32f10x_usart.c ****   /* Check the parameters */
 562:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 563:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
 564:Drivers/Src/stm32f10x_usart.c ****   
 565:Drivers/Src/stm32f10x_usart.c ****   USARTx->CR2 &= CR2_LBDL_Mask;
 1133              		.loc 1 565 15
 1134 000c 7B68     		ldr	r3, [r7, #4]
 1135 000e 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1136 0010 9BB2     		uxth	r3, r3
 1137 0012 23F02003 		bic	r3, r3, #32
 1138 0016 9AB2     		uxth	r2, r3
 1139 0018 7B68     		ldr	r3, [r7, #4]
 1140 001a 1A82     		strh	r2, [r3, #16]	@ movhi
 566:Drivers/Src/stm32f10x_usart.c ****   USARTx->CR2 |= USART_LINBreakDetectLength;  
 1141              		.loc 1 566 15
 1142 001c 7B68     		ldr	r3, [r7, #4]
 1143 001e 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1144 0020 9AB2     		uxth	r2, r3
ARM GAS  /tmp/cc26wfU0.s 			page 31


 1145 0022 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1146 0024 1343     		orrs	r3, r3, r2
 1147 0026 9AB2     		uxth	r2, r3
 1148 0028 7B68     		ldr	r3, [r7, #4]
 1149 002a 1A82     		strh	r2, [r3, #16]	@ movhi
 567:Drivers/Src/stm32f10x_usart.c **** }
 1150              		.loc 1 567 1
 1151 002c 00BF     		nop
 1152 002e 0C37     		adds	r7, r7, #12
 1153              	.LCFI67:
 1154              		.cfi_def_cfa_offset 4
 1155 0030 BD46     		mov	sp, r7
 1156              	.LCFI68:
 1157              		.cfi_def_cfa_register 13
 1158              		@ sp needed
 1159 0032 80BC     		pop	{r7}
 1160              	.LCFI69:
 1161              		.cfi_restore 7
 1162              		.cfi_def_cfa_offset 0
 1163 0034 7047     		bx	lr
 1164              		.cfi_endproc
 1165              	.LFE74:
 1167              		.section	.text.USART_LINCmd,"ax",%progbits
 1168              		.align	1
 1169              		.global	USART_LINCmd
 1170              		.syntax unified
 1171              		.thumb
 1172              		.thumb_func
 1173              		.fpu softvfp
 1175              	USART_LINCmd:
 1176              	.LFB75:
 568:Drivers/Src/stm32f10x_usart.c **** 
 569:Drivers/Src/stm32f10x_usart.c **** /**
 570:Drivers/Src/stm32f10x_usart.c ****   * @brief  Enables or disables the USART�s LIN mode.
 571:Drivers/Src/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 572:Drivers/Src/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 573:Drivers/Src/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 574:Drivers/Src/stm32f10x_usart.c ****   * @param  NewState: new state of the USART LIN mode.
 575:Drivers/Src/stm32f10x_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
 576:Drivers/Src/stm32f10x_usart.c ****   * @retval None
 577:Drivers/Src/stm32f10x_usart.c ****   */
 578:Drivers/Src/stm32f10x_usart.c **** void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 579:Drivers/Src/stm32f10x_usart.c **** {
 1177              		.loc 1 579 1
 1178              		.cfi_startproc
 1179              		@ args = 0, pretend = 0, frame = 8
 1180              		@ frame_needed = 1, uses_anonymous_args = 0
 1181              		@ link register save eliminated.
 1182 0000 80B4     		push	{r7}
 1183              	.LCFI70:
 1184              		.cfi_def_cfa_offset 4
 1185              		.cfi_offset 7, -4
 1186 0002 83B0     		sub	sp, sp, #12
 1187              	.LCFI71:
 1188              		.cfi_def_cfa_offset 16
 1189 0004 00AF     		add	r7, sp, #0
 1190              	.LCFI72:
ARM GAS  /tmp/cc26wfU0.s 			page 32


 1191              		.cfi_def_cfa_register 7
 1192 0006 7860     		str	r0, [r7, #4]
 1193 0008 0B46     		mov	r3, r1
 1194 000a FB70     		strb	r3, [r7, #3]
 580:Drivers/Src/stm32f10x_usart.c ****   /* Check the parameters */
 581:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 582:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 583:Drivers/Src/stm32f10x_usart.c ****   
 584:Drivers/Src/stm32f10x_usart.c ****   if (NewState != DISABLE)
 1195              		.loc 1 584 6
 1196 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1197 000e 002B     		cmp	r3, #0
 1198 0010 08D0     		beq	.L45
 585:Drivers/Src/stm32f10x_usart.c ****   {
 586:Drivers/Src/stm32f10x_usart.c ****     /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
 587:Drivers/Src/stm32f10x_usart.c ****     USARTx->CR2 |= CR2_LINEN_Set;
 1199              		.loc 1 587 17
 1200 0012 7B68     		ldr	r3, [r7, #4]
 1201 0014 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1202 0016 9BB2     		uxth	r3, r3
 1203 0018 43F48043 		orr	r3, r3, #16384
 1204 001c 9AB2     		uxth	r2, r3
 1205 001e 7B68     		ldr	r3, [r7, #4]
 1206 0020 1A82     		strh	r2, [r3, #16]	@ movhi
 588:Drivers/Src/stm32f10x_usart.c ****   }
 589:Drivers/Src/stm32f10x_usart.c ****   else
 590:Drivers/Src/stm32f10x_usart.c ****   {
 591:Drivers/Src/stm32f10x_usart.c ****     /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
 592:Drivers/Src/stm32f10x_usart.c ****     USARTx->CR2 &= CR2_LINEN_Reset;
 593:Drivers/Src/stm32f10x_usart.c ****   }
 594:Drivers/Src/stm32f10x_usart.c **** }
 1207              		.loc 1 594 1
 1208 0022 07E0     		b	.L47
 1209              	.L45:
 592:Drivers/Src/stm32f10x_usart.c ****   }
 1210              		.loc 1 592 17
 1211 0024 7B68     		ldr	r3, [r7, #4]
 1212 0026 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 1213 0028 9BB2     		uxth	r3, r3
 1214 002a 23F48043 		bic	r3, r3, #16384
 1215 002e 9AB2     		uxth	r2, r3
 1216 0030 7B68     		ldr	r3, [r7, #4]
 1217 0032 1A82     		strh	r2, [r3, #16]	@ movhi
 1218              	.L47:
 1219              		.loc 1 594 1
 1220 0034 00BF     		nop
 1221 0036 0C37     		adds	r7, r7, #12
 1222              	.LCFI73:
 1223              		.cfi_def_cfa_offset 4
 1224 0038 BD46     		mov	sp, r7
 1225              	.LCFI74:
 1226              		.cfi_def_cfa_register 13
 1227              		@ sp needed
 1228 003a 80BC     		pop	{r7}
 1229              	.LCFI75:
 1230              		.cfi_restore 7
 1231              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/cc26wfU0.s 			page 33


 1232 003c 7047     		bx	lr
 1233              		.cfi_endproc
 1234              	.LFE75:
 1236              		.section	.text.USART_SendData,"ax",%progbits
 1237              		.align	1
 1238              		.global	USART_SendData
 1239              		.syntax unified
 1240              		.thumb
 1241              		.thumb_func
 1242              		.fpu softvfp
 1244              	USART_SendData:
 1245              	.LFB76:
 595:Drivers/Src/stm32f10x_usart.c **** 
 596:Drivers/Src/stm32f10x_usart.c **** /**
 597:Drivers/Src/stm32f10x_usart.c ****   * @brief  Transmits single data through the USARTx peripheral.
 598:Drivers/Src/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 599:Drivers/Src/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 600:Drivers/Src/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 601:Drivers/Src/stm32f10x_usart.c ****   * @param  Data: the data to transmit.
 602:Drivers/Src/stm32f10x_usart.c ****   * @retval None
 603:Drivers/Src/stm32f10x_usart.c ****   */
 604:Drivers/Src/stm32f10x_usart.c **** void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
 605:Drivers/Src/stm32f10x_usart.c **** {
 1246              		.loc 1 605 1
 1247              		.cfi_startproc
 1248              		@ args = 0, pretend = 0, frame = 8
 1249              		@ frame_needed = 1, uses_anonymous_args = 0
 1250              		@ link register save eliminated.
 1251 0000 80B4     		push	{r7}
 1252              	.LCFI76:
 1253              		.cfi_def_cfa_offset 4
 1254              		.cfi_offset 7, -4
 1255 0002 83B0     		sub	sp, sp, #12
 1256              	.LCFI77:
 1257              		.cfi_def_cfa_offset 16
 1258 0004 00AF     		add	r7, sp, #0
 1259              	.LCFI78:
 1260              		.cfi_def_cfa_register 7
 1261 0006 7860     		str	r0, [r7, #4]
 1262 0008 0B46     		mov	r3, r1
 1263 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 606:Drivers/Src/stm32f10x_usart.c ****   /* Check the parameters */
 607:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 608:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_USART_DATA(Data)); 
 609:Drivers/Src/stm32f10x_usart.c ****     
 610:Drivers/Src/stm32f10x_usart.c ****   /* Transmit Data */
 611:Drivers/Src/stm32f10x_usart.c ****   USARTx->DR = (Data & (uint16_t)0x01FF);
 1264              		.loc 1 611 22
 1265 000c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 1266 000e C3F30803 		ubfx	r3, r3, #0, #9
 1267 0012 9AB2     		uxth	r2, r3
 1268              		.loc 1 611 14
 1269 0014 7B68     		ldr	r3, [r7, #4]
 1270 0016 9A80     		strh	r2, [r3, #4]	@ movhi
 612:Drivers/Src/stm32f10x_usart.c **** }
 1271              		.loc 1 612 1
 1272 0018 00BF     		nop
ARM GAS  /tmp/cc26wfU0.s 			page 34


 1273 001a 0C37     		adds	r7, r7, #12
 1274              	.LCFI79:
 1275              		.cfi_def_cfa_offset 4
 1276 001c BD46     		mov	sp, r7
 1277              	.LCFI80:
 1278              		.cfi_def_cfa_register 13
 1279              		@ sp needed
 1280 001e 80BC     		pop	{r7}
 1281              	.LCFI81:
 1282              		.cfi_restore 7
 1283              		.cfi_def_cfa_offset 0
 1284 0020 7047     		bx	lr
 1285              		.cfi_endproc
 1286              	.LFE76:
 1288              		.section	.text.USART_ReceiveData,"ax",%progbits
 1289              		.align	1
 1290              		.global	USART_ReceiveData
 1291              		.syntax unified
 1292              		.thumb
 1293              		.thumb_func
 1294              		.fpu softvfp
 1296              	USART_ReceiveData:
 1297              	.LFB77:
 613:Drivers/Src/stm32f10x_usart.c **** 
 614:Drivers/Src/stm32f10x_usart.c **** /**
 615:Drivers/Src/stm32f10x_usart.c ****   * @brief  Returns the most recent received data by the USARTx peripheral.
 616:Drivers/Src/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 617:Drivers/Src/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 618:Drivers/Src/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 619:Drivers/Src/stm32f10x_usart.c ****   * @retval The received data.
 620:Drivers/Src/stm32f10x_usart.c ****   */
 621:Drivers/Src/stm32f10x_usart.c **** uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
 622:Drivers/Src/stm32f10x_usart.c **** {
 1298              		.loc 1 622 1
 1299              		.cfi_startproc
 1300              		@ args = 0, pretend = 0, frame = 8
 1301              		@ frame_needed = 1, uses_anonymous_args = 0
 1302              		@ link register save eliminated.
 1303 0000 80B4     		push	{r7}
 1304              	.LCFI82:
 1305              		.cfi_def_cfa_offset 4
 1306              		.cfi_offset 7, -4
 1307 0002 83B0     		sub	sp, sp, #12
 1308              	.LCFI83:
 1309              		.cfi_def_cfa_offset 16
 1310 0004 00AF     		add	r7, sp, #0
 1311              	.LCFI84:
 1312              		.cfi_def_cfa_register 7
 1313 0006 7860     		str	r0, [r7, #4]
 623:Drivers/Src/stm32f10x_usart.c ****   /* Check the parameters */
 624:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 625:Drivers/Src/stm32f10x_usart.c ****   
 626:Drivers/Src/stm32f10x_usart.c ****   /* Receive Data */
 627:Drivers/Src/stm32f10x_usart.c ****   return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 1314              		.loc 1 627 27
 1315 0008 7B68     		ldr	r3, [r7, #4]
 1316 000a 9B88     		ldrh	r3, [r3, #4]	@ movhi
ARM GAS  /tmp/cc26wfU0.s 			page 35


 1317 000c 9BB2     		uxth	r3, r3
 1318              		.loc 1 627 10
 1319 000e C3F30803 		ubfx	r3, r3, #0, #9
 1320 0012 9BB2     		uxth	r3, r3
 628:Drivers/Src/stm32f10x_usart.c **** }
 1321              		.loc 1 628 1
 1322 0014 1846     		mov	r0, r3
 1323 0016 0C37     		adds	r7, r7, #12
 1324              	.LCFI85:
 1325              		.cfi_def_cfa_offset 4
 1326 0018 BD46     		mov	sp, r7
 1327              	.LCFI86:
 1328              		.cfi_def_cfa_register 13
 1329              		@ sp needed
 1330 001a 80BC     		pop	{r7}
 1331              	.LCFI87:
 1332              		.cfi_restore 7
 1333              		.cfi_def_cfa_offset 0
 1334 001c 7047     		bx	lr
 1335              		.cfi_endproc
 1336              	.LFE77:
 1338              		.section	.text.USART_SendBreak,"ax",%progbits
 1339              		.align	1
 1340              		.global	USART_SendBreak
 1341              		.syntax unified
 1342              		.thumb
 1343              		.thumb_func
 1344              		.fpu softvfp
 1346              	USART_SendBreak:
 1347              	.LFB78:
 629:Drivers/Src/stm32f10x_usart.c **** 
 630:Drivers/Src/stm32f10x_usart.c **** /**
 631:Drivers/Src/stm32f10x_usart.c ****   * @brief  Transmits break characters.
 632:Drivers/Src/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 633:Drivers/Src/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 634:Drivers/Src/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 635:Drivers/Src/stm32f10x_usart.c ****   * @retval None
 636:Drivers/Src/stm32f10x_usart.c ****   */
 637:Drivers/Src/stm32f10x_usart.c **** void USART_SendBreak(USART_TypeDef* USARTx)
 638:Drivers/Src/stm32f10x_usart.c **** {
 1348              		.loc 1 638 1
 1349              		.cfi_startproc
 1350              		@ args = 0, pretend = 0, frame = 8
 1351              		@ frame_needed = 1, uses_anonymous_args = 0
 1352              		@ link register save eliminated.
 1353 0000 80B4     		push	{r7}
 1354              	.LCFI88:
 1355              		.cfi_def_cfa_offset 4
 1356              		.cfi_offset 7, -4
 1357 0002 83B0     		sub	sp, sp, #12
 1358              	.LCFI89:
 1359              		.cfi_def_cfa_offset 16
 1360 0004 00AF     		add	r7, sp, #0
 1361              	.LCFI90:
 1362              		.cfi_def_cfa_register 7
 1363 0006 7860     		str	r0, [r7, #4]
 639:Drivers/Src/stm32f10x_usart.c ****   /* Check the parameters */
ARM GAS  /tmp/cc26wfU0.s 			page 36


 640:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 641:Drivers/Src/stm32f10x_usart.c ****   
 642:Drivers/Src/stm32f10x_usart.c ****   /* Send break characters */
 643:Drivers/Src/stm32f10x_usart.c ****   USARTx->CR1 |= CR1_SBK_Set;
 1364              		.loc 1 643 15
 1365 0008 7B68     		ldr	r3, [r7, #4]
 1366 000a 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1367 000c 9BB2     		uxth	r3, r3
 1368 000e 43F00103 		orr	r3, r3, #1
 1369 0012 9AB2     		uxth	r2, r3
 1370 0014 7B68     		ldr	r3, [r7, #4]
 1371 0016 9A81     		strh	r2, [r3, #12]	@ movhi
 644:Drivers/Src/stm32f10x_usart.c **** }
 1372              		.loc 1 644 1
 1373 0018 00BF     		nop
 1374 001a 0C37     		adds	r7, r7, #12
 1375              	.LCFI91:
 1376              		.cfi_def_cfa_offset 4
 1377 001c BD46     		mov	sp, r7
 1378              	.LCFI92:
 1379              		.cfi_def_cfa_register 13
 1380              		@ sp needed
 1381 001e 80BC     		pop	{r7}
 1382              	.LCFI93:
 1383              		.cfi_restore 7
 1384              		.cfi_def_cfa_offset 0
 1385 0020 7047     		bx	lr
 1386              		.cfi_endproc
 1387              	.LFE78:
 1389              		.section	.text.USART_SetGuardTime,"ax",%progbits
 1390              		.align	1
 1391              		.global	USART_SetGuardTime
 1392              		.syntax unified
 1393              		.thumb
 1394              		.thumb_func
 1395              		.fpu softvfp
 1397              	USART_SetGuardTime:
 1398              	.LFB79:
 645:Drivers/Src/stm32f10x_usart.c **** 
 646:Drivers/Src/stm32f10x_usart.c **** /**
 647:Drivers/Src/stm32f10x_usart.c ****   * @brief  Sets the specified USART guard time.
 648:Drivers/Src/stm32f10x_usart.c ****   * @param  USARTx: where x can be 1, 2 or 3 to select the USART peripheral.
 649:Drivers/Src/stm32f10x_usart.c ****   * @param  USART_GuardTime: specifies the guard time.
 650:Drivers/Src/stm32f10x_usart.c ****   * @note The guard time bits are not available for UART4 and UART5.   
 651:Drivers/Src/stm32f10x_usart.c ****   * @retval None
 652:Drivers/Src/stm32f10x_usart.c ****   */
 653:Drivers/Src/stm32f10x_usart.c **** void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
 654:Drivers/Src/stm32f10x_usart.c **** {    
 1399              		.loc 1 654 1
 1400              		.cfi_startproc
 1401              		@ args = 0, pretend = 0, frame = 8
 1402              		@ frame_needed = 1, uses_anonymous_args = 0
 1403              		@ link register save eliminated.
 1404 0000 80B4     		push	{r7}
 1405              	.LCFI94:
 1406              		.cfi_def_cfa_offset 4
 1407              		.cfi_offset 7, -4
ARM GAS  /tmp/cc26wfU0.s 			page 37


 1408 0002 83B0     		sub	sp, sp, #12
 1409              	.LCFI95:
 1410              		.cfi_def_cfa_offset 16
 1411 0004 00AF     		add	r7, sp, #0
 1412              	.LCFI96:
 1413              		.cfi_def_cfa_register 7
 1414 0006 7860     		str	r0, [r7, #4]
 1415 0008 0B46     		mov	r3, r1
 1416 000a FB70     		strb	r3, [r7, #3]
 655:Drivers/Src/stm32f10x_usart.c ****   /* Check the parameters */
 656:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_USART_123_PERIPH(USARTx));
 657:Drivers/Src/stm32f10x_usart.c ****   
 658:Drivers/Src/stm32f10x_usart.c ****   /* Clear the USART Guard time */
 659:Drivers/Src/stm32f10x_usart.c ****   USARTx->GTPR &= GTPR_LSB_Mask;
 1417              		.loc 1 659 16
 1418 000c 7B68     		ldr	r3, [r7, #4]
 1419 000e 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1420 0010 9BB2     		uxth	r3, r3
 1421 0012 DBB2     		uxtb	r3, r3
 1422 0014 9AB2     		uxth	r2, r3
 1423 0016 7B68     		ldr	r3, [r7, #4]
 1424 0018 1A83     		strh	r2, [r3, #24]	@ movhi
 660:Drivers/Src/stm32f10x_usart.c ****   /* Set the USART guard time */
 661:Drivers/Src/stm32f10x_usart.c ****   USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 1425              		.loc 1 661 16
 1426 001a 7B68     		ldr	r3, [r7, #4]
 1427 001c 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1428 001e 9AB2     		uxth	r2, r3
 1429              		.loc 1 661 19
 1430 0020 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1431 0022 9BB2     		uxth	r3, r3
 1432 0024 1B02     		lsls	r3, r3, #8
 1433 0026 9BB2     		uxth	r3, r3
 1434              		.loc 1 661 16
 1435 0028 1343     		orrs	r3, r3, r2
 1436 002a 9AB2     		uxth	r2, r3
 1437 002c 7B68     		ldr	r3, [r7, #4]
 1438 002e 1A83     		strh	r2, [r3, #24]	@ movhi
 662:Drivers/Src/stm32f10x_usart.c **** }
 1439              		.loc 1 662 1
 1440 0030 00BF     		nop
 1441 0032 0C37     		adds	r7, r7, #12
 1442              	.LCFI97:
 1443              		.cfi_def_cfa_offset 4
 1444 0034 BD46     		mov	sp, r7
 1445              	.LCFI98:
 1446              		.cfi_def_cfa_register 13
 1447              		@ sp needed
 1448 0036 80BC     		pop	{r7}
 1449              	.LCFI99:
 1450              		.cfi_restore 7
 1451              		.cfi_def_cfa_offset 0
 1452 0038 7047     		bx	lr
 1453              		.cfi_endproc
 1454              	.LFE79:
 1456              		.section	.text.USART_SetPrescaler,"ax",%progbits
 1457              		.align	1
ARM GAS  /tmp/cc26wfU0.s 			page 38


 1458              		.global	USART_SetPrescaler
 1459              		.syntax unified
 1460              		.thumb
 1461              		.thumb_func
 1462              		.fpu softvfp
 1464              	USART_SetPrescaler:
 1465              	.LFB80:
 663:Drivers/Src/stm32f10x_usart.c **** 
 664:Drivers/Src/stm32f10x_usart.c **** /**
 665:Drivers/Src/stm32f10x_usart.c ****   * @brief  Sets the system clock prescaler.
 666:Drivers/Src/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 667:Drivers/Src/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 668:Drivers/Src/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 669:Drivers/Src/stm32f10x_usart.c ****   * @param  USART_Prescaler: specifies the prescaler clock.  
 670:Drivers/Src/stm32f10x_usart.c ****   * @note   The function is used for IrDA mode with UART4 and UART5.
 671:Drivers/Src/stm32f10x_usart.c ****   * @retval None
 672:Drivers/Src/stm32f10x_usart.c ****   */
 673:Drivers/Src/stm32f10x_usart.c **** void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
 674:Drivers/Src/stm32f10x_usart.c **** { 
 1466              		.loc 1 674 1
 1467              		.cfi_startproc
 1468              		@ args = 0, pretend = 0, frame = 8
 1469              		@ frame_needed = 1, uses_anonymous_args = 0
 1470              		@ link register save eliminated.
 1471 0000 80B4     		push	{r7}
 1472              	.LCFI100:
 1473              		.cfi_def_cfa_offset 4
 1474              		.cfi_offset 7, -4
 1475 0002 83B0     		sub	sp, sp, #12
 1476              	.LCFI101:
 1477              		.cfi_def_cfa_offset 16
 1478 0004 00AF     		add	r7, sp, #0
 1479              	.LCFI102:
 1480              		.cfi_def_cfa_register 7
 1481 0006 7860     		str	r0, [r7, #4]
 1482 0008 0B46     		mov	r3, r1
 1483 000a FB70     		strb	r3, [r7, #3]
 675:Drivers/Src/stm32f10x_usart.c ****   /* Check the parameters */
 676:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 677:Drivers/Src/stm32f10x_usart.c ****   
 678:Drivers/Src/stm32f10x_usart.c ****   /* Clear the USART prescaler */
 679:Drivers/Src/stm32f10x_usart.c ****   USARTx->GTPR &= GTPR_MSB_Mask;
 1484              		.loc 1 679 16
 1485 000c 7B68     		ldr	r3, [r7, #4]
 1486 000e 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1487 0010 9BB2     		uxth	r3, r3
 1488 0012 23F0FF03 		bic	r3, r3, #255
 1489 0016 9AB2     		uxth	r2, r3
 1490 0018 7B68     		ldr	r3, [r7, #4]
 1491 001a 1A83     		strh	r2, [r3, #24]	@ movhi
 680:Drivers/Src/stm32f10x_usart.c **** 
 681:Drivers/Src/stm32f10x_usart.c ****   // [ILG]
 682:Drivers/Src/stm32f10x_usart.c ****   #if defined ( __GNUC__ )
 683:Drivers/Src/stm32f10x_usart.c ****   #pragma GCC diagnostic push
 684:Drivers/Src/stm32f10x_usart.c ****   #pragma GCC diagnostic ignored "-Wconversion"
 685:Drivers/Src/stm32f10x_usart.c ****   #endif
 686:Drivers/Src/stm32f10x_usart.c **** 
ARM GAS  /tmp/cc26wfU0.s 			page 39


 687:Drivers/Src/stm32f10x_usart.c ****   /* Set the USART prescaler */
 688:Drivers/Src/stm32f10x_usart.c ****   USARTx->GTPR |= USART_Prescaler;
 1492              		.loc 1 688 16
 1493 001c 7B68     		ldr	r3, [r7, #4]
 1494 001e 1B8B     		ldrh	r3, [r3, #24]	@ movhi
 1495 0020 9AB2     		uxth	r2, r3
 1496 0022 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1497 0024 9BB2     		uxth	r3, r3
 1498 0026 1343     		orrs	r3, r3, r2
 1499 0028 9AB2     		uxth	r2, r3
 1500 002a 7B68     		ldr	r3, [r7, #4]
 1501 002c 1A83     		strh	r2, [r3, #24]	@ movhi
 689:Drivers/Src/stm32f10x_usart.c **** 
 690:Drivers/Src/stm32f10x_usart.c ****   // [ILG]
 691:Drivers/Src/stm32f10x_usart.c ****   #if defined ( __GNUC__ )
 692:Drivers/Src/stm32f10x_usart.c ****   #pragma GCC diagnostic pop
 693:Drivers/Src/stm32f10x_usart.c ****   #endif
 694:Drivers/Src/stm32f10x_usart.c **** }
 1502              		.loc 1 694 1
 1503 002e 00BF     		nop
 1504 0030 0C37     		adds	r7, r7, #12
 1505              	.LCFI103:
 1506              		.cfi_def_cfa_offset 4
 1507 0032 BD46     		mov	sp, r7
 1508              	.LCFI104:
 1509              		.cfi_def_cfa_register 13
 1510              		@ sp needed
 1511 0034 80BC     		pop	{r7}
 1512              	.LCFI105:
 1513              		.cfi_restore 7
 1514              		.cfi_def_cfa_offset 0
 1515 0036 7047     		bx	lr
 1516              		.cfi_endproc
 1517              	.LFE80:
 1519              		.section	.text.USART_SmartCardCmd,"ax",%progbits
 1520              		.align	1
 1521              		.global	USART_SmartCardCmd
 1522              		.syntax unified
 1523              		.thumb
 1524              		.thumb_func
 1525              		.fpu softvfp
 1527              	USART_SmartCardCmd:
 1528              	.LFB81:
 695:Drivers/Src/stm32f10x_usart.c **** 
 696:Drivers/Src/stm32f10x_usart.c **** /**
 697:Drivers/Src/stm32f10x_usart.c ****   * @brief  Enables or disables the USART�s Smart Card mode.
 698:Drivers/Src/stm32f10x_usart.c ****   * @param  USARTx: where x can be 1, 2 or 3 to select the USART peripheral.
 699:Drivers/Src/stm32f10x_usart.c ****   * @param  NewState: new state of the Smart Card mode.
 700:Drivers/Src/stm32f10x_usart.c ****   *   This parameter can be: ENABLE or DISABLE.     
 701:Drivers/Src/stm32f10x_usart.c ****   * @note The Smart Card mode is not available for UART4 and UART5. 
 702:Drivers/Src/stm32f10x_usart.c ****   * @retval None
 703:Drivers/Src/stm32f10x_usart.c ****   */
 704:Drivers/Src/stm32f10x_usart.c **** void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 705:Drivers/Src/stm32f10x_usart.c **** {
 1529              		.loc 1 705 1
 1530              		.cfi_startproc
 1531              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/cc26wfU0.s 			page 40


 1532              		@ frame_needed = 1, uses_anonymous_args = 0
 1533              		@ link register save eliminated.
 1534 0000 80B4     		push	{r7}
 1535              	.LCFI106:
 1536              		.cfi_def_cfa_offset 4
 1537              		.cfi_offset 7, -4
 1538 0002 83B0     		sub	sp, sp, #12
 1539              	.LCFI107:
 1540              		.cfi_def_cfa_offset 16
 1541 0004 00AF     		add	r7, sp, #0
 1542              	.LCFI108:
 1543              		.cfi_def_cfa_register 7
 1544 0006 7860     		str	r0, [r7, #4]
 1545 0008 0B46     		mov	r3, r1
 1546 000a FB70     		strb	r3, [r7, #3]
 706:Drivers/Src/stm32f10x_usart.c ****   /* Check the parameters */
 707:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_USART_123_PERIPH(USARTx));
 708:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 709:Drivers/Src/stm32f10x_usart.c ****   if (NewState != DISABLE)
 1547              		.loc 1 709 6
 1548 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1549 000e 002B     		cmp	r3, #0
 1550 0010 08D0     		beq	.L55
 710:Drivers/Src/stm32f10x_usart.c ****   {
 711:Drivers/Src/stm32f10x_usart.c ****     /* Enable the SC mode by setting the SCEN bit in the CR3 register */
 712:Drivers/Src/stm32f10x_usart.c ****     USARTx->CR3 |= CR3_SCEN_Set;
 1551              		.loc 1 712 17
 1552 0012 7B68     		ldr	r3, [r7, #4]
 1553 0014 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1554 0016 9BB2     		uxth	r3, r3
 1555 0018 43F02003 		orr	r3, r3, #32
 1556 001c 9AB2     		uxth	r2, r3
 1557 001e 7B68     		ldr	r3, [r7, #4]
 1558 0020 9A82     		strh	r2, [r3, #20]	@ movhi
 713:Drivers/Src/stm32f10x_usart.c ****   }
 714:Drivers/Src/stm32f10x_usart.c ****   else
 715:Drivers/Src/stm32f10x_usart.c ****   {
 716:Drivers/Src/stm32f10x_usart.c ****     /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
 717:Drivers/Src/stm32f10x_usart.c ****     USARTx->CR3 &= CR3_SCEN_Reset;
 718:Drivers/Src/stm32f10x_usart.c ****   }
 719:Drivers/Src/stm32f10x_usart.c **** }
 1559              		.loc 1 719 1
 1560 0022 07E0     		b	.L57
 1561              	.L55:
 717:Drivers/Src/stm32f10x_usart.c ****   }
 1562              		.loc 1 717 17
 1563 0024 7B68     		ldr	r3, [r7, #4]
 1564 0026 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1565 0028 9BB2     		uxth	r3, r3
 1566 002a 23F02003 		bic	r3, r3, #32
 1567 002e 9AB2     		uxth	r2, r3
 1568 0030 7B68     		ldr	r3, [r7, #4]
 1569 0032 9A82     		strh	r2, [r3, #20]	@ movhi
 1570              	.L57:
 1571              		.loc 1 719 1
 1572 0034 00BF     		nop
 1573 0036 0C37     		adds	r7, r7, #12
ARM GAS  /tmp/cc26wfU0.s 			page 41


 1574              	.LCFI109:
 1575              		.cfi_def_cfa_offset 4
 1576 0038 BD46     		mov	sp, r7
 1577              	.LCFI110:
 1578              		.cfi_def_cfa_register 13
 1579              		@ sp needed
 1580 003a 80BC     		pop	{r7}
 1581              	.LCFI111:
 1582              		.cfi_restore 7
 1583              		.cfi_def_cfa_offset 0
 1584 003c 7047     		bx	lr
 1585              		.cfi_endproc
 1586              	.LFE81:
 1588              		.section	.text.USART_SmartCardNACKCmd,"ax",%progbits
 1589              		.align	1
 1590              		.global	USART_SmartCardNACKCmd
 1591              		.syntax unified
 1592              		.thumb
 1593              		.thumb_func
 1594              		.fpu softvfp
 1596              	USART_SmartCardNACKCmd:
 1597              	.LFB82:
 720:Drivers/Src/stm32f10x_usart.c **** 
 721:Drivers/Src/stm32f10x_usart.c **** /**
 722:Drivers/Src/stm32f10x_usart.c ****   * @brief  Enables or disables NACK transmission.
 723:Drivers/Src/stm32f10x_usart.c ****   * @param  USARTx: where x can be 1, 2 or 3 to select the USART peripheral. 
 724:Drivers/Src/stm32f10x_usart.c ****   * @param  NewState: new state of the NACK transmission.
 725:Drivers/Src/stm32f10x_usart.c ****   *   This parameter can be: ENABLE or DISABLE.  
 726:Drivers/Src/stm32f10x_usart.c ****   * @note The Smart Card mode is not available for UART4 and UART5.
 727:Drivers/Src/stm32f10x_usart.c ****   * @retval None
 728:Drivers/Src/stm32f10x_usart.c ****   */
 729:Drivers/Src/stm32f10x_usart.c **** void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 730:Drivers/Src/stm32f10x_usart.c **** {
 1598              		.loc 1 730 1
 1599              		.cfi_startproc
 1600              		@ args = 0, pretend = 0, frame = 8
 1601              		@ frame_needed = 1, uses_anonymous_args = 0
 1602              		@ link register save eliminated.
 1603 0000 80B4     		push	{r7}
 1604              	.LCFI112:
 1605              		.cfi_def_cfa_offset 4
 1606              		.cfi_offset 7, -4
 1607 0002 83B0     		sub	sp, sp, #12
 1608              	.LCFI113:
 1609              		.cfi_def_cfa_offset 16
 1610 0004 00AF     		add	r7, sp, #0
 1611              	.LCFI114:
 1612              		.cfi_def_cfa_register 7
 1613 0006 7860     		str	r0, [r7, #4]
 1614 0008 0B46     		mov	r3, r1
 1615 000a FB70     		strb	r3, [r7, #3]
 731:Drivers/Src/stm32f10x_usart.c ****   /* Check the parameters */
 732:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_USART_123_PERIPH(USARTx));  
 733:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 734:Drivers/Src/stm32f10x_usart.c ****   if (NewState != DISABLE)
 1616              		.loc 1 734 6
 1617 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
ARM GAS  /tmp/cc26wfU0.s 			page 42


 1618 000e 002B     		cmp	r3, #0
 1619 0010 08D0     		beq	.L59
 735:Drivers/Src/stm32f10x_usart.c ****   {
 736:Drivers/Src/stm32f10x_usart.c ****     /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
 737:Drivers/Src/stm32f10x_usart.c ****     USARTx->CR3 |= CR3_NACK_Set;
 1620              		.loc 1 737 17
 1621 0012 7B68     		ldr	r3, [r7, #4]
 1622 0014 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1623 0016 9BB2     		uxth	r3, r3
 1624 0018 43F01003 		orr	r3, r3, #16
 1625 001c 9AB2     		uxth	r2, r3
 1626 001e 7B68     		ldr	r3, [r7, #4]
 1627 0020 9A82     		strh	r2, [r3, #20]	@ movhi
 738:Drivers/Src/stm32f10x_usart.c ****   }
 739:Drivers/Src/stm32f10x_usart.c ****   else
 740:Drivers/Src/stm32f10x_usart.c ****   {
 741:Drivers/Src/stm32f10x_usart.c ****     /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
 742:Drivers/Src/stm32f10x_usart.c ****     USARTx->CR3 &= CR3_NACK_Reset;
 743:Drivers/Src/stm32f10x_usart.c ****   }
 744:Drivers/Src/stm32f10x_usart.c **** }
 1628              		.loc 1 744 1
 1629 0022 07E0     		b	.L61
 1630              	.L59:
 742:Drivers/Src/stm32f10x_usart.c ****   }
 1631              		.loc 1 742 17
 1632 0024 7B68     		ldr	r3, [r7, #4]
 1633 0026 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1634 0028 9BB2     		uxth	r3, r3
 1635 002a 23F01003 		bic	r3, r3, #16
 1636 002e 9AB2     		uxth	r2, r3
 1637 0030 7B68     		ldr	r3, [r7, #4]
 1638 0032 9A82     		strh	r2, [r3, #20]	@ movhi
 1639              	.L61:
 1640              		.loc 1 744 1
 1641 0034 00BF     		nop
 1642 0036 0C37     		adds	r7, r7, #12
 1643              	.LCFI115:
 1644              		.cfi_def_cfa_offset 4
 1645 0038 BD46     		mov	sp, r7
 1646              	.LCFI116:
 1647              		.cfi_def_cfa_register 13
 1648              		@ sp needed
 1649 003a 80BC     		pop	{r7}
 1650              	.LCFI117:
 1651              		.cfi_restore 7
 1652              		.cfi_def_cfa_offset 0
 1653 003c 7047     		bx	lr
 1654              		.cfi_endproc
 1655              	.LFE82:
 1657              		.section	.text.USART_HalfDuplexCmd,"ax",%progbits
 1658              		.align	1
 1659              		.global	USART_HalfDuplexCmd
 1660              		.syntax unified
 1661              		.thumb
 1662              		.thumb_func
 1663              		.fpu softvfp
 1665              	USART_HalfDuplexCmd:
ARM GAS  /tmp/cc26wfU0.s 			page 43


 1666              	.LFB83:
 745:Drivers/Src/stm32f10x_usart.c **** 
 746:Drivers/Src/stm32f10x_usart.c **** /**
 747:Drivers/Src/stm32f10x_usart.c ****   * @brief  Enables or disables the USART�s Half Duplex communication.
 748:Drivers/Src/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 749:Drivers/Src/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 750:Drivers/Src/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 751:Drivers/Src/stm32f10x_usart.c ****   * @param  NewState: new state of the USART Communication.
 752:Drivers/Src/stm32f10x_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
 753:Drivers/Src/stm32f10x_usart.c ****   * @retval None
 754:Drivers/Src/stm32f10x_usart.c ****   */
 755:Drivers/Src/stm32f10x_usart.c **** void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 756:Drivers/Src/stm32f10x_usart.c **** {
 1667              		.loc 1 756 1
 1668              		.cfi_startproc
 1669              		@ args = 0, pretend = 0, frame = 8
 1670              		@ frame_needed = 1, uses_anonymous_args = 0
 1671              		@ link register save eliminated.
 1672 0000 80B4     		push	{r7}
 1673              	.LCFI118:
 1674              		.cfi_def_cfa_offset 4
 1675              		.cfi_offset 7, -4
 1676 0002 83B0     		sub	sp, sp, #12
 1677              	.LCFI119:
 1678              		.cfi_def_cfa_offset 16
 1679 0004 00AF     		add	r7, sp, #0
 1680              	.LCFI120:
 1681              		.cfi_def_cfa_register 7
 1682 0006 7860     		str	r0, [r7, #4]
 1683 0008 0B46     		mov	r3, r1
 1684 000a FB70     		strb	r3, [r7, #3]
 757:Drivers/Src/stm32f10x_usart.c ****   /* Check the parameters */
 758:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 759:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 760:Drivers/Src/stm32f10x_usart.c ****   
 761:Drivers/Src/stm32f10x_usart.c ****   if (NewState != DISABLE)
 1685              		.loc 1 761 6
 1686 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1687 000e 002B     		cmp	r3, #0
 1688 0010 08D0     		beq	.L63
 762:Drivers/Src/stm32f10x_usart.c ****   {
 763:Drivers/Src/stm32f10x_usart.c ****     /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
 764:Drivers/Src/stm32f10x_usart.c ****     USARTx->CR3 |= CR3_HDSEL_Set;
 1689              		.loc 1 764 17
 1690 0012 7B68     		ldr	r3, [r7, #4]
 1691 0014 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1692 0016 9BB2     		uxth	r3, r3
 1693 0018 43F00803 		orr	r3, r3, #8
 1694 001c 9AB2     		uxth	r2, r3
 1695 001e 7B68     		ldr	r3, [r7, #4]
 1696 0020 9A82     		strh	r2, [r3, #20]	@ movhi
 765:Drivers/Src/stm32f10x_usart.c ****   }
 766:Drivers/Src/stm32f10x_usart.c ****   else
 767:Drivers/Src/stm32f10x_usart.c ****   {
 768:Drivers/Src/stm32f10x_usart.c ****     /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
 769:Drivers/Src/stm32f10x_usart.c ****     USARTx->CR3 &= CR3_HDSEL_Reset;
 770:Drivers/Src/stm32f10x_usart.c ****   }
ARM GAS  /tmp/cc26wfU0.s 			page 44


 771:Drivers/Src/stm32f10x_usart.c **** }
 1697              		.loc 1 771 1
 1698 0022 07E0     		b	.L65
 1699              	.L63:
 769:Drivers/Src/stm32f10x_usart.c ****   }
 1700              		.loc 1 769 17
 1701 0024 7B68     		ldr	r3, [r7, #4]
 1702 0026 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1703 0028 9BB2     		uxth	r3, r3
 1704 002a 23F00803 		bic	r3, r3, #8
 1705 002e 9AB2     		uxth	r2, r3
 1706 0030 7B68     		ldr	r3, [r7, #4]
 1707 0032 9A82     		strh	r2, [r3, #20]	@ movhi
 1708              	.L65:
 1709              		.loc 1 771 1
 1710 0034 00BF     		nop
 1711 0036 0C37     		adds	r7, r7, #12
 1712              	.LCFI121:
 1713              		.cfi_def_cfa_offset 4
 1714 0038 BD46     		mov	sp, r7
 1715              	.LCFI122:
 1716              		.cfi_def_cfa_register 13
 1717              		@ sp needed
 1718 003a 80BC     		pop	{r7}
 1719              	.LCFI123:
 1720              		.cfi_restore 7
 1721              		.cfi_def_cfa_offset 0
 1722 003c 7047     		bx	lr
 1723              		.cfi_endproc
 1724              	.LFE83:
 1726              		.section	.text.USART_OverSampling8Cmd,"ax",%progbits
 1727              		.align	1
 1728              		.global	USART_OverSampling8Cmd
 1729              		.syntax unified
 1730              		.thumb
 1731              		.thumb_func
 1732              		.fpu softvfp
 1734              	USART_OverSampling8Cmd:
 1735              	.LFB84:
 772:Drivers/Src/stm32f10x_usart.c **** 
 773:Drivers/Src/stm32f10x_usart.c **** 
 774:Drivers/Src/stm32f10x_usart.c **** /**
 775:Drivers/Src/stm32f10x_usart.c ****   * @brief  Enables or disables the USART's 8x oversampling mode.
 776:Drivers/Src/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral.
 777:Drivers/Src/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 778:Drivers/Src/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 779:Drivers/Src/stm32f10x_usart.c ****   * @param  NewState: new state of the USART one bit sampling method.
 780:Drivers/Src/stm32f10x_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
 781:Drivers/Src/stm32f10x_usart.c ****   * @note
 782:Drivers/Src/stm32f10x_usart.c ****   *     This function has to be called before calling USART_Init()
 783:Drivers/Src/stm32f10x_usart.c ****   *     function in order to have correct baudrate Divider value.   
 784:Drivers/Src/stm32f10x_usart.c ****   * @retval None
 785:Drivers/Src/stm32f10x_usart.c ****   */
 786:Drivers/Src/stm32f10x_usart.c **** void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
 787:Drivers/Src/stm32f10x_usart.c **** {
 1736              		.loc 1 787 1
 1737              		.cfi_startproc
ARM GAS  /tmp/cc26wfU0.s 			page 45


 1738              		@ args = 0, pretend = 0, frame = 8
 1739              		@ frame_needed = 1, uses_anonymous_args = 0
 1740              		@ link register save eliminated.
 1741 0000 80B4     		push	{r7}
 1742              	.LCFI124:
 1743              		.cfi_def_cfa_offset 4
 1744              		.cfi_offset 7, -4
 1745 0002 83B0     		sub	sp, sp, #12
 1746              	.LCFI125:
 1747              		.cfi_def_cfa_offset 16
 1748 0004 00AF     		add	r7, sp, #0
 1749              	.LCFI126:
 1750              		.cfi_def_cfa_register 7
 1751 0006 7860     		str	r0, [r7, #4]
 1752 0008 0B46     		mov	r3, r1
 1753 000a FB70     		strb	r3, [r7, #3]
 788:Drivers/Src/stm32f10x_usart.c ****   /* Check the parameters */
 789:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 790:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 791:Drivers/Src/stm32f10x_usart.c ****   
 792:Drivers/Src/stm32f10x_usart.c ****   if (NewState != DISABLE)
 1754              		.loc 1 792 6
 1755 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1756 000e 002B     		cmp	r3, #0
 1757 0010 0AD0     		beq	.L67
 793:Drivers/Src/stm32f10x_usart.c ****   {
 794:Drivers/Src/stm32f10x_usart.c ****     /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
 795:Drivers/Src/stm32f10x_usart.c ****     USARTx->CR1 |= CR1_OVER8_Set;
 1758              		.loc 1 795 17
 1759 0012 7B68     		ldr	r3, [r7, #4]
 1760 0014 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1761 0016 9BB2     		uxth	r3, r3
 1762 0018 6FEA4343 		mvn	r3, r3, lsl #17
 1763 001c 6FEA5343 		mvn	r3, r3, lsr #17
 1764 0020 9AB2     		uxth	r2, r3
 1765 0022 7B68     		ldr	r3, [r7, #4]
 1766 0024 9A81     		strh	r2, [r3, #12]	@ movhi
 796:Drivers/Src/stm32f10x_usart.c ****   }
 797:Drivers/Src/stm32f10x_usart.c ****   else
 798:Drivers/Src/stm32f10x_usart.c ****   {
 799:Drivers/Src/stm32f10x_usart.c ****     /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
 800:Drivers/Src/stm32f10x_usart.c ****     USARTx->CR1 &= CR1_OVER8_Reset;
 801:Drivers/Src/stm32f10x_usart.c ****   }
 802:Drivers/Src/stm32f10x_usart.c **** }
 1767              		.loc 1 802 1
 1768 0026 07E0     		b	.L69
 1769              	.L67:
 800:Drivers/Src/stm32f10x_usart.c ****   }
 1770              		.loc 1 800 17
 1771 0028 7B68     		ldr	r3, [r7, #4]
 1772 002a 9B89     		ldrh	r3, [r3, #12]	@ movhi
 1773 002c 9BB2     		uxth	r3, r3
 1774 002e C3F30E03 		ubfx	r3, r3, #0, #15
 1775 0032 9AB2     		uxth	r2, r3
 1776 0034 7B68     		ldr	r3, [r7, #4]
 1777 0036 9A81     		strh	r2, [r3, #12]	@ movhi
 1778              	.L69:
ARM GAS  /tmp/cc26wfU0.s 			page 46


 1779              		.loc 1 802 1
 1780 0038 00BF     		nop
 1781 003a 0C37     		adds	r7, r7, #12
 1782              	.LCFI127:
 1783              		.cfi_def_cfa_offset 4
 1784 003c BD46     		mov	sp, r7
 1785              	.LCFI128:
 1786              		.cfi_def_cfa_register 13
 1787              		@ sp needed
 1788 003e 80BC     		pop	{r7}
 1789              	.LCFI129:
 1790              		.cfi_restore 7
 1791              		.cfi_def_cfa_offset 0
 1792 0040 7047     		bx	lr
 1793              		.cfi_endproc
 1794              	.LFE84:
 1796              		.section	.text.USART_OneBitMethodCmd,"ax",%progbits
 1797              		.align	1
 1798              		.global	USART_OneBitMethodCmd
 1799              		.syntax unified
 1800              		.thumb
 1801              		.thumb_func
 1802              		.fpu softvfp
 1804              	USART_OneBitMethodCmd:
 1805              	.LFB85:
 803:Drivers/Src/stm32f10x_usart.c **** 
 804:Drivers/Src/stm32f10x_usart.c **** /**
 805:Drivers/Src/stm32f10x_usart.c ****   * @brief  Enables or disables the USART's one bit sampling method.
 806:Drivers/Src/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral.
 807:Drivers/Src/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 808:Drivers/Src/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 809:Drivers/Src/stm32f10x_usart.c ****   * @param  NewState: new state of the USART one bit sampling method.
 810:Drivers/Src/stm32f10x_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
 811:Drivers/Src/stm32f10x_usart.c ****   * @retval None
 812:Drivers/Src/stm32f10x_usart.c ****   */
 813:Drivers/Src/stm32f10x_usart.c **** void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
 814:Drivers/Src/stm32f10x_usart.c **** {
 1806              		.loc 1 814 1
 1807              		.cfi_startproc
 1808              		@ args = 0, pretend = 0, frame = 8
 1809              		@ frame_needed = 1, uses_anonymous_args = 0
 1810              		@ link register save eliminated.
 1811 0000 80B4     		push	{r7}
 1812              	.LCFI130:
 1813              		.cfi_def_cfa_offset 4
 1814              		.cfi_offset 7, -4
 1815 0002 83B0     		sub	sp, sp, #12
 1816              	.LCFI131:
 1817              		.cfi_def_cfa_offset 16
 1818 0004 00AF     		add	r7, sp, #0
 1819              	.LCFI132:
 1820              		.cfi_def_cfa_register 7
 1821 0006 7860     		str	r0, [r7, #4]
 1822 0008 0B46     		mov	r3, r1
 1823 000a FB70     		strb	r3, [r7, #3]
 815:Drivers/Src/stm32f10x_usart.c ****   /* Check the parameters */
 816:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
ARM GAS  /tmp/cc26wfU0.s 			page 47


 817:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 818:Drivers/Src/stm32f10x_usart.c ****   
 819:Drivers/Src/stm32f10x_usart.c ****   if (NewState != DISABLE)
 1824              		.loc 1 819 6
 1825 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1826 000e 002B     		cmp	r3, #0
 1827 0010 08D0     		beq	.L71
 820:Drivers/Src/stm32f10x_usart.c ****   {
 821:Drivers/Src/stm32f10x_usart.c ****     /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
 822:Drivers/Src/stm32f10x_usart.c ****     USARTx->CR3 |= CR3_ONEBITE_Set;
 1828              		.loc 1 822 17
 1829 0012 7B68     		ldr	r3, [r7, #4]
 1830 0014 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1831 0016 9BB2     		uxth	r3, r3
 1832 0018 43F40063 		orr	r3, r3, #2048
 1833 001c 9AB2     		uxth	r2, r3
 1834 001e 7B68     		ldr	r3, [r7, #4]
 1835 0020 9A82     		strh	r2, [r3, #20]	@ movhi
 823:Drivers/Src/stm32f10x_usart.c ****   }
 824:Drivers/Src/stm32f10x_usart.c ****   else
 825:Drivers/Src/stm32f10x_usart.c ****   {
 826:Drivers/Src/stm32f10x_usart.c ****     /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
 827:Drivers/Src/stm32f10x_usart.c ****     USARTx->CR3 &= CR3_ONEBITE_Reset;
 828:Drivers/Src/stm32f10x_usart.c ****   }
 829:Drivers/Src/stm32f10x_usart.c **** }
 1836              		.loc 1 829 1
 1837 0022 07E0     		b	.L73
 1838              	.L71:
 827:Drivers/Src/stm32f10x_usart.c ****   }
 1839              		.loc 1 827 17
 1840 0024 7B68     		ldr	r3, [r7, #4]
 1841 0026 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1842 0028 9BB2     		uxth	r3, r3
 1843 002a 23F40063 		bic	r3, r3, #2048
 1844 002e 9AB2     		uxth	r2, r3
 1845 0030 7B68     		ldr	r3, [r7, #4]
 1846 0032 9A82     		strh	r2, [r3, #20]	@ movhi
 1847              	.L73:
 1848              		.loc 1 829 1
 1849 0034 00BF     		nop
 1850 0036 0C37     		adds	r7, r7, #12
 1851              	.LCFI133:
 1852              		.cfi_def_cfa_offset 4
 1853 0038 BD46     		mov	sp, r7
 1854              	.LCFI134:
 1855              		.cfi_def_cfa_register 13
 1856              		@ sp needed
 1857 003a 80BC     		pop	{r7}
 1858              	.LCFI135:
 1859              		.cfi_restore 7
 1860              		.cfi_def_cfa_offset 0
 1861 003c 7047     		bx	lr
 1862              		.cfi_endproc
 1863              	.LFE85:
 1865              		.section	.text.USART_IrDAConfig,"ax",%progbits
 1866              		.align	1
 1867              		.global	USART_IrDAConfig
ARM GAS  /tmp/cc26wfU0.s 			page 48


 1868              		.syntax unified
 1869              		.thumb
 1870              		.thumb_func
 1871              		.fpu softvfp
 1873              	USART_IrDAConfig:
 1874              	.LFB86:
 830:Drivers/Src/stm32f10x_usart.c **** 
 831:Drivers/Src/stm32f10x_usart.c **** /**
 832:Drivers/Src/stm32f10x_usart.c ****   * @brief  Configures the USART's IrDA interface.
 833:Drivers/Src/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 834:Drivers/Src/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 835:Drivers/Src/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 836:Drivers/Src/stm32f10x_usart.c ****   * @param  USART_IrDAMode: specifies the IrDA mode.
 837:Drivers/Src/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 838:Drivers/Src/stm32f10x_usart.c ****   *     @arg USART_IrDAMode_LowPower
 839:Drivers/Src/stm32f10x_usart.c ****   *     @arg USART_IrDAMode_Normal
 840:Drivers/Src/stm32f10x_usart.c ****   * @retval None
 841:Drivers/Src/stm32f10x_usart.c ****   */
 842:Drivers/Src/stm32f10x_usart.c **** void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
 843:Drivers/Src/stm32f10x_usart.c **** {
 1875              		.loc 1 843 1
 1876              		.cfi_startproc
 1877              		@ args = 0, pretend = 0, frame = 8
 1878              		@ frame_needed = 1, uses_anonymous_args = 0
 1879              		@ link register save eliminated.
 1880 0000 80B4     		push	{r7}
 1881              	.LCFI136:
 1882              		.cfi_def_cfa_offset 4
 1883              		.cfi_offset 7, -4
 1884 0002 83B0     		sub	sp, sp, #12
 1885              	.LCFI137:
 1886              		.cfi_def_cfa_offset 16
 1887 0004 00AF     		add	r7, sp, #0
 1888              	.LCFI138:
 1889              		.cfi_def_cfa_register 7
 1890 0006 7860     		str	r0, [r7, #4]
 1891 0008 0B46     		mov	r3, r1
 1892 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 844:Drivers/Src/stm32f10x_usart.c ****   /* Check the parameters */
 845:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 846:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
 847:Drivers/Src/stm32f10x_usart.c ****     
 848:Drivers/Src/stm32f10x_usart.c ****   USARTx->CR3 &= CR3_IRLP_Mask;
 1893              		.loc 1 848 15
 1894 000c 7B68     		ldr	r3, [r7, #4]
 1895 000e 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1896 0010 9BB2     		uxth	r3, r3
 1897 0012 23F00403 		bic	r3, r3, #4
 1898 0016 9AB2     		uxth	r2, r3
 1899 0018 7B68     		ldr	r3, [r7, #4]
 1900 001a 9A82     		strh	r2, [r3, #20]	@ movhi
 849:Drivers/Src/stm32f10x_usart.c ****   USARTx->CR3 |= USART_IrDAMode;
 1901              		.loc 1 849 15
 1902 001c 7B68     		ldr	r3, [r7, #4]
 1903 001e 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1904 0020 9AB2     		uxth	r2, r3
 1905 0022 7B88     		ldrh	r3, [r7, #2]	@ movhi
ARM GAS  /tmp/cc26wfU0.s 			page 49


 1906 0024 1343     		orrs	r3, r3, r2
 1907 0026 9AB2     		uxth	r2, r3
 1908 0028 7B68     		ldr	r3, [r7, #4]
 1909 002a 9A82     		strh	r2, [r3, #20]	@ movhi
 850:Drivers/Src/stm32f10x_usart.c **** }
 1910              		.loc 1 850 1
 1911 002c 00BF     		nop
 1912 002e 0C37     		adds	r7, r7, #12
 1913              	.LCFI139:
 1914              		.cfi_def_cfa_offset 4
 1915 0030 BD46     		mov	sp, r7
 1916              	.LCFI140:
 1917              		.cfi_def_cfa_register 13
 1918              		@ sp needed
 1919 0032 80BC     		pop	{r7}
 1920              	.LCFI141:
 1921              		.cfi_restore 7
 1922              		.cfi_def_cfa_offset 0
 1923 0034 7047     		bx	lr
 1924              		.cfi_endproc
 1925              	.LFE86:
 1927              		.section	.text.USART_IrDACmd,"ax",%progbits
 1928              		.align	1
 1929              		.global	USART_IrDACmd
 1930              		.syntax unified
 1931              		.thumb
 1932              		.thumb_func
 1933              		.fpu softvfp
 1935              	USART_IrDACmd:
 1936              	.LFB87:
 851:Drivers/Src/stm32f10x_usart.c **** 
 852:Drivers/Src/stm32f10x_usart.c **** /**
 853:Drivers/Src/stm32f10x_usart.c ****   * @brief  Enables or disables the USART's IrDA interface.
 854:Drivers/Src/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 855:Drivers/Src/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 856:Drivers/Src/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 857:Drivers/Src/stm32f10x_usart.c ****   * @param  NewState: new state of the IrDA mode.
 858:Drivers/Src/stm32f10x_usart.c ****   *   This parameter can be: ENABLE or DISABLE.
 859:Drivers/Src/stm32f10x_usart.c ****   * @retval None
 860:Drivers/Src/stm32f10x_usart.c ****   */
 861:Drivers/Src/stm32f10x_usart.c **** void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
 862:Drivers/Src/stm32f10x_usart.c **** {
 1937              		.loc 1 862 1
 1938              		.cfi_startproc
 1939              		@ args = 0, pretend = 0, frame = 8
 1940              		@ frame_needed = 1, uses_anonymous_args = 0
 1941              		@ link register save eliminated.
 1942 0000 80B4     		push	{r7}
 1943              	.LCFI142:
 1944              		.cfi_def_cfa_offset 4
 1945              		.cfi_offset 7, -4
 1946 0002 83B0     		sub	sp, sp, #12
 1947              	.LCFI143:
 1948              		.cfi_def_cfa_offset 16
 1949 0004 00AF     		add	r7, sp, #0
 1950              	.LCFI144:
 1951              		.cfi_def_cfa_register 7
ARM GAS  /tmp/cc26wfU0.s 			page 50


 1952 0006 7860     		str	r0, [r7, #4]
 1953 0008 0B46     		mov	r3, r1
 1954 000a FB70     		strb	r3, [r7, #3]
 863:Drivers/Src/stm32f10x_usart.c ****   /* Check the parameters */
 864:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 865:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_FUNCTIONAL_STATE(NewState));
 866:Drivers/Src/stm32f10x_usart.c ****     
 867:Drivers/Src/stm32f10x_usart.c ****   if (NewState != DISABLE)
 1955              		.loc 1 867 6
 1956 000c FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1957 000e 002B     		cmp	r3, #0
 1958 0010 08D0     		beq	.L76
 868:Drivers/Src/stm32f10x_usart.c ****   {
 869:Drivers/Src/stm32f10x_usart.c ****     /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
 870:Drivers/Src/stm32f10x_usart.c ****     USARTx->CR3 |= CR3_IREN_Set;
 1959              		.loc 1 870 17
 1960 0012 7B68     		ldr	r3, [r7, #4]
 1961 0014 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1962 0016 9BB2     		uxth	r3, r3
 1963 0018 43F00203 		orr	r3, r3, #2
 1964 001c 9AB2     		uxth	r2, r3
 1965 001e 7B68     		ldr	r3, [r7, #4]
 1966 0020 9A82     		strh	r2, [r3, #20]	@ movhi
 871:Drivers/Src/stm32f10x_usart.c ****   }
 872:Drivers/Src/stm32f10x_usart.c ****   else
 873:Drivers/Src/stm32f10x_usart.c ****   {
 874:Drivers/Src/stm32f10x_usart.c ****     /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
 875:Drivers/Src/stm32f10x_usart.c ****     USARTx->CR3 &= CR3_IREN_Reset;
 876:Drivers/Src/stm32f10x_usart.c ****   }
 877:Drivers/Src/stm32f10x_usart.c **** }
 1967              		.loc 1 877 1
 1968 0022 07E0     		b	.L78
 1969              	.L76:
 875:Drivers/Src/stm32f10x_usart.c ****   }
 1970              		.loc 1 875 17
 1971 0024 7B68     		ldr	r3, [r7, #4]
 1972 0026 9B8A     		ldrh	r3, [r3, #20]	@ movhi
 1973 0028 9BB2     		uxth	r3, r3
 1974 002a 23F00203 		bic	r3, r3, #2
 1975 002e 9AB2     		uxth	r2, r3
 1976 0030 7B68     		ldr	r3, [r7, #4]
 1977 0032 9A82     		strh	r2, [r3, #20]	@ movhi
 1978              	.L78:
 1979              		.loc 1 877 1
 1980 0034 00BF     		nop
 1981 0036 0C37     		adds	r7, r7, #12
 1982              	.LCFI145:
 1983              		.cfi_def_cfa_offset 4
 1984 0038 BD46     		mov	sp, r7
 1985              	.LCFI146:
 1986              		.cfi_def_cfa_register 13
 1987              		@ sp needed
 1988 003a 80BC     		pop	{r7}
 1989              	.LCFI147:
 1990              		.cfi_restore 7
 1991              		.cfi_def_cfa_offset 0
 1992 003c 7047     		bx	lr
ARM GAS  /tmp/cc26wfU0.s 			page 51


 1993              		.cfi_endproc
 1994              	.LFE87:
 1996              		.section	.text.USART_GetFlagStatus,"ax",%progbits
 1997              		.align	1
 1998              		.global	USART_GetFlagStatus
 1999              		.syntax unified
 2000              		.thumb
 2001              		.thumb_func
 2002              		.fpu softvfp
 2004              	USART_GetFlagStatus:
 2005              	.LFB88:
 878:Drivers/Src/stm32f10x_usart.c **** 
 879:Drivers/Src/stm32f10x_usart.c **** /**
 880:Drivers/Src/stm32f10x_usart.c ****   * @brief  Checks whether the specified USART flag is set or not.
 881:Drivers/Src/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 882:Drivers/Src/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 883:Drivers/Src/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 884:Drivers/Src/stm32f10x_usart.c ****   * @param  USART_FLAG: specifies the flag to check.
 885:Drivers/Src/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 886:Drivers/Src/stm32f10x_usart.c ****   *     @arg USART_FLAG_CTS:  CTS Change flag (not available for UART4 and UART5)
 887:Drivers/Src/stm32f10x_usart.c ****   *     @arg USART_FLAG_LBD:  LIN Break detection flag
 888:Drivers/Src/stm32f10x_usart.c ****   *     @arg USART_FLAG_TXE:  Transmit data register empty flag
 889:Drivers/Src/stm32f10x_usart.c ****   *     @arg USART_FLAG_TC:   Transmission Complete flag
 890:Drivers/Src/stm32f10x_usart.c ****   *     @arg USART_FLAG_RXNE: Receive data register not empty flag
 891:Drivers/Src/stm32f10x_usart.c ****   *     @arg USART_FLAG_IDLE: Idle Line detection flag
 892:Drivers/Src/stm32f10x_usart.c ****   *     @arg USART_FLAG_ORE:  OverRun Error flag
 893:Drivers/Src/stm32f10x_usart.c ****   *     @arg USART_FLAG_NE:   Noise Error flag
 894:Drivers/Src/stm32f10x_usart.c ****   *     @arg USART_FLAG_FE:   Framing Error flag
 895:Drivers/Src/stm32f10x_usart.c ****   *     @arg USART_FLAG_PE:   Parity Error flag
 896:Drivers/Src/stm32f10x_usart.c ****   * @retval The new state of USART_FLAG (SET or RESET).
 897:Drivers/Src/stm32f10x_usart.c ****   */
 898:Drivers/Src/stm32f10x_usart.c **** FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
 899:Drivers/Src/stm32f10x_usart.c **** {
 2006              		.loc 1 899 1
 2007              		.cfi_startproc
 2008              		@ args = 0, pretend = 0, frame = 16
 2009              		@ frame_needed = 1, uses_anonymous_args = 0
 2010              		@ link register save eliminated.
 2011 0000 80B4     		push	{r7}
 2012              	.LCFI148:
 2013              		.cfi_def_cfa_offset 4
 2014              		.cfi_offset 7, -4
 2015 0002 85B0     		sub	sp, sp, #20
 2016              	.LCFI149:
 2017              		.cfi_def_cfa_offset 24
 2018 0004 00AF     		add	r7, sp, #0
 2019              	.LCFI150:
 2020              		.cfi_def_cfa_register 7
 2021 0006 7860     		str	r0, [r7, #4]
 2022 0008 0B46     		mov	r3, r1
 2023 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 900:Drivers/Src/stm32f10x_usart.c ****   FlagStatus bitstatus = RESET;
 2024              		.loc 1 900 14
 2025 000c 0023     		movs	r3, #0
 2026 000e FB73     		strb	r3, [r7, #15]
 901:Drivers/Src/stm32f10x_usart.c ****   /* Check the parameters */
 902:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
ARM GAS  /tmp/cc26wfU0.s 			page 52


 903:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_USART_FLAG(USART_FLAG));
 904:Drivers/Src/stm32f10x_usart.c ****   /* The CTS flag is not available for UART4 and UART5 */
 905:Drivers/Src/stm32f10x_usart.c ****   if (USART_FLAG == USART_FLAG_CTS)
 906:Drivers/Src/stm32f10x_usart.c ****   {
 907:Drivers/Src/stm32f10x_usart.c ****     assert_param(IS_USART_123_PERIPH(USARTx));
 908:Drivers/Src/stm32f10x_usart.c ****   }  
 909:Drivers/Src/stm32f10x_usart.c ****   
 910:Drivers/Src/stm32f10x_usart.c ****   if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 2027              		.loc 1 910 14
 2028 0010 7B68     		ldr	r3, [r7, #4]
 2029 0012 1B88     		ldrh	r3, [r3]	@ movhi
 2030 0014 9AB2     		uxth	r2, r3
 2031              		.loc 1 910 33
 2032 0016 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2033 0018 1340     		ands	r3, r3, r2
 2034 001a 9BB2     		uxth	r3, r3
 2035              		.loc 1 910 6
 2036 001c 002B     		cmp	r3, #0
 2037 001e 02D0     		beq	.L80
 911:Drivers/Src/stm32f10x_usart.c ****   {
 912:Drivers/Src/stm32f10x_usart.c ****     bitstatus = SET;
 2038              		.loc 1 912 15
 2039 0020 0123     		movs	r3, #1
 2040 0022 FB73     		strb	r3, [r7, #15]
 2041 0024 01E0     		b	.L81
 2042              	.L80:
 913:Drivers/Src/stm32f10x_usart.c ****   }
 914:Drivers/Src/stm32f10x_usart.c ****   else
 915:Drivers/Src/stm32f10x_usart.c ****   {
 916:Drivers/Src/stm32f10x_usart.c ****     bitstatus = RESET;
 2043              		.loc 1 916 15
 2044 0026 0023     		movs	r3, #0
 2045 0028 FB73     		strb	r3, [r7, #15]
 2046              	.L81:
 917:Drivers/Src/stm32f10x_usart.c ****   }
 918:Drivers/Src/stm32f10x_usart.c ****   return bitstatus;
 2047              		.loc 1 918 10
 2048 002a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 919:Drivers/Src/stm32f10x_usart.c **** }
 2049              		.loc 1 919 1
 2050 002c 1846     		mov	r0, r3
 2051 002e 1437     		adds	r7, r7, #20
 2052              	.LCFI151:
 2053              		.cfi_def_cfa_offset 4
 2054 0030 BD46     		mov	sp, r7
 2055              	.LCFI152:
 2056              		.cfi_def_cfa_register 13
 2057              		@ sp needed
 2058 0032 80BC     		pop	{r7}
 2059              	.LCFI153:
 2060              		.cfi_restore 7
 2061              		.cfi_def_cfa_offset 0
 2062 0034 7047     		bx	lr
 2063              		.cfi_endproc
 2064              	.LFE88:
 2066              		.section	.text.USART_ClearFlag,"ax",%progbits
 2067              		.align	1
ARM GAS  /tmp/cc26wfU0.s 			page 53


 2068              		.global	USART_ClearFlag
 2069              		.syntax unified
 2070              		.thumb
 2071              		.thumb_func
 2072              		.fpu softvfp
 2074              	USART_ClearFlag:
 2075              	.LFB89:
 920:Drivers/Src/stm32f10x_usart.c **** 
 921:Drivers/Src/stm32f10x_usart.c **** /**
 922:Drivers/Src/stm32f10x_usart.c ****   * @brief  Clears the USARTx's pending flags.
 923:Drivers/Src/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 924:Drivers/Src/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 925:Drivers/Src/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 926:Drivers/Src/stm32f10x_usart.c ****   * @param  USART_FLAG: specifies the flag to clear.
 927:Drivers/Src/stm32f10x_usart.c ****   *   This parameter can be any combination of the following values:
 928:Drivers/Src/stm32f10x_usart.c ****   *     @arg USART_FLAG_CTS:  CTS Change flag (not available for UART4 and UART5).
 929:Drivers/Src/stm32f10x_usart.c ****   *     @arg USART_FLAG_LBD:  LIN Break detection flag.
 930:Drivers/Src/stm32f10x_usart.c ****   *     @arg USART_FLAG_TC:   Transmission Complete flag.
 931:Drivers/Src/stm32f10x_usart.c ****   *     @arg USART_FLAG_RXNE: Receive data register not empty flag.
 932:Drivers/Src/stm32f10x_usart.c ****   *   
 933:Drivers/Src/stm32f10x_usart.c ****   * @note
 934:Drivers/Src/stm32f10x_usart.c ****   *   - PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun 
 935:Drivers/Src/stm32f10x_usart.c ****   *     error) and IDLE (Idle line detected) flags are cleared by software 
 936:Drivers/Src/stm32f10x_usart.c ****   *     sequence: a read operation to USART_SR register (USART_GetFlagStatus()) 
 937:Drivers/Src/stm32f10x_usart.c ****   *     followed by a read operation to USART_DR register (USART_ReceiveData()).
 938:Drivers/Src/stm32f10x_usart.c ****   *   - RXNE flag can be also cleared by a read to the USART_DR register 
 939:Drivers/Src/stm32f10x_usart.c ****   *     (USART_ReceiveData()).
 940:Drivers/Src/stm32f10x_usart.c ****   *   - TC flag can be also cleared by software sequence: a read operation to 
 941:Drivers/Src/stm32f10x_usart.c ****   *     USART_SR register (USART_GetFlagStatus()) followed by a write operation
 942:Drivers/Src/stm32f10x_usart.c ****   *     to USART_DR register (USART_SendData()).
 943:Drivers/Src/stm32f10x_usart.c ****   *   - TXE flag is cleared only by a write to the USART_DR register 
 944:Drivers/Src/stm32f10x_usart.c ****   *     (USART_SendData()).
 945:Drivers/Src/stm32f10x_usart.c ****   * @retval None
 946:Drivers/Src/stm32f10x_usart.c ****   */
 947:Drivers/Src/stm32f10x_usart.c **** void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
 948:Drivers/Src/stm32f10x_usart.c **** {
 2076              		.loc 1 948 1
 2077              		.cfi_startproc
 2078              		@ args = 0, pretend = 0, frame = 8
 2079              		@ frame_needed = 1, uses_anonymous_args = 0
 2080              		@ link register save eliminated.
 2081 0000 80B4     		push	{r7}
 2082              	.LCFI154:
 2083              		.cfi_def_cfa_offset 4
 2084              		.cfi_offset 7, -4
 2085 0002 83B0     		sub	sp, sp, #12
 2086              	.LCFI155:
 2087              		.cfi_def_cfa_offset 16
 2088 0004 00AF     		add	r7, sp, #0
 2089              	.LCFI156:
 2090              		.cfi_def_cfa_register 7
 2091 0006 7860     		str	r0, [r7, #4]
 2092 0008 0B46     		mov	r3, r1
 2093 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 949:Drivers/Src/stm32f10x_usart.c ****   /* Check the parameters */
 950:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 951:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
ARM GAS  /tmp/cc26wfU0.s 			page 54


 952:Drivers/Src/stm32f10x_usart.c ****   /* The CTS flag is not available for UART4 and UART5 */
 953:Drivers/Src/stm32f10x_usart.c ****   if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
 954:Drivers/Src/stm32f10x_usart.c ****   {
 955:Drivers/Src/stm32f10x_usart.c ****     assert_param(IS_USART_123_PERIPH(USARTx));
 956:Drivers/Src/stm32f10x_usart.c ****   } 
 957:Drivers/Src/stm32f10x_usart.c ****    
 958:Drivers/Src/stm32f10x_usart.c ****   USARTx->SR = (uint16_t)~USART_FLAG;
 2094              		.loc 1 958 16
 2095 000c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2096 000e DB43     		mvns	r3, r3
 2097 0010 9AB2     		uxth	r2, r3
 2098              		.loc 1 958 14
 2099 0012 7B68     		ldr	r3, [r7, #4]
 2100 0014 1A80     		strh	r2, [r3]	@ movhi
 959:Drivers/Src/stm32f10x_usart.c **** }
 2101              		.loc 1 959 1
 2102 0016 00BF     		nop
 2103 0018 0C37     		adds	r7, r7, #12
 2104              	.LCFI157:
 2105              		.cfi_def_cfa_offset 4
 2106 001a BD46     		mov	sp, r7
 2107              	.LCFI158:
 2108              		.cfi_def_cfa_register 13
 2109              		@ sp needed
 2110 001c 80BC     		pop	{r7}
 2111              	.LCFI159:
 2112              		.cfi_restore 7
 2113              		.cfi_def_cfa_offset 0
 2114 001e 7047     		bx	lr
 2115              		.cfi_endproc
 2116              	.LFE89:
 2118              		.section	.text.USART_GetITStatus,"ax",%progbits
 2119              		.align	1
 2120              		.global	USART_GetITStatus
 2121              		.syntax unified
 2122              		.thumb
 2123              		.thumb_func
 2124              		.fpu softvfp
 2126              	USART_GetITStatus:
 2127              	.LFB90:
 960:Drivers/Src/stm32f10x_usart.c **** 
 961:Drivers/Src/stm32f10x_usart.c **** /**
 962:Drivers/Src/stm32f10x_usart.c ****   * @brief  Checks whether the specified USART interrupt has occurred or not.
 963:Drivers/Src/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
 964:Drivers/Src/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 965:Drivers/Src/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
 966:Drivers/Src/stm32f10x_usart.c ****   * @param  USART_IT: specifies the USART interrupt source to check.
 967:Drivers/Src/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
 968:Drivers/Src/stm32f10x_usart.c ****   *     @arg USART_IT_CTS:  CTS change interrupt (not available for UART4 and UART5)
 969:Drivers/Src/stm32f10x_usart.c ****   *     @arg USART_IT_LBD:  LIN Break detection interrupt
 970:Drivers/Src/stm32f10x_usart.c ****   *     @arg USART_IT_TXE:  Tansmit Data Register empty interrupt
 971:Drivers/Src/stm32f10x_usart.c ****   *     @arg USART_IT_TC:   Transmission complete interrupt
 972:Drivers/Src/stm32f10x_usart.c ****   *     @arg USART_IT_RXNE: Receive Data register not empty interrupt
 973:Drivers/Src/stm32f10x_usart.c ****   *     @arg USART_IT_IDLE: Idle line detection interrupt
 974:Drivers/Src/stm32f10x_usart.c ****   *     @arg USART_IT_ORE:  OverRun Error interrupt
 975:Drivers/Src/stm32f10x_usart.c ****   *     @arg USART_IT_NE:   Noise Error interrupt
 976:Drivers/Src/stm32f10x_usart.c ****   *     @arg USART_IT_FE:   Framing Error interrupt
ARM GAS  /tmp/cc26wfU0.s 			page 55


 977:Drivers/Src/stm32f10x_usart.c ****   *     @arg USART_IT_PE:   Parity Error interrupt
 978:Drivers/Src/stm32f10x_usart.c ****   * @retval The new state of USART_IT (SET or RESET).
 979:Drivers/Src/stm32f10x_usart.c ****   */
 980:Drivers/Src/stm32f10x_usart.c **** ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
 981:Drivers/Src/stm32f10x_usart.c **** {
 2128              		.loc 1 981 1
 2129              		.cfi_startproc
 2130              		@ args = 0, pretend = 0, frame = 24
 2131              		@ frame_needed = 1, uses_anonymous_args = 0
 2132              		@ link register save eliminated.
 2133 0000 80B4     		push	{r7}
 2134              	.LCFI160:
 2135              		.cfi_def_cfa_offset 4
 2136              		.cfi_offset 7, -4
 2137 0002 87B0     		sub	sp, sp, #28
 2138              	.LCFI161:
 2139              		.cfi_def_cfa_offset 32
 2140 0004 00AF     		add	r7, sp, #0
 2141              	.LCFI162:
 2142              		.cfi_def_cfa_register 7
 2143 0006 7860     		str	r0, [r7, #4]
 2144 0008 0B46     		mov	r3, r1
 2145 000a 7B80     		strh	r3, [r7, #2]	@ movhi
 982:Drivers/Src/stm32f10x_usart.c ****   uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 2146              		.loc 1 982 12
 2147 000c 0023     		movs	r3, #0
 2148 000e FB60     		str	r3, [r7, #12]
 2149              		.loc 1 982 27
 2150 0010 0023     		movs	r3, #0
 2151 0012 7B61     		str	r3, [r7, #20]
 2152              		.loc 1 982 42
 2153 0014 0023     		movs	r3, #0
 2154 0016 BB60     		str	r3, [r7, #8]
 983:Drivers/Src/stm32f10x_usart.c ****   ITStatus bitstatus = RESET;
 2155              		.loc 1 983 12
 2156 0018 0023     		movs	r3, #0
 2157 001a FB74     		strb	r3, [r7, #19]
 984:Drivers/Src/stm32f10x_usart.c ****   /* Check the parameters */
 985:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
 986:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_USART_GET_IT(USART_IT));
 987:Drivers/Src/stm32f10x_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */ 
 988:Drivers/Src/stm32f10x_usart.c ****   if (USART_IT == USART_IT_CTS)
 989:Drivers/Src/stm32f10x_usart.c ****   {
 990:Drivers/Src/stm32f10x_usart.c ****     assert_param(IS_USART_123_PERIPH(USARTx));
 991:Drivers/Src/stm32f10x_usart.c ****   }   
 992:Drivers/Src/stm32f10x_usart.c ****   
 993:Drivers/Src/stm32f10x_usart.c ****   /* Get the USART register index */
 994:Drivers/Src/stm32f10x_usart.c ****   usartreg = (((uint8_t)USART_IT) >> 0x05);
 2158              		.loc 1 994 16
 2159 001c 7B88     		ldrh	r3, [r7, #2]	@ movhi
 2160 001e DBB2     		uxtb	r3, r3
 2161              		.loc 1 994 35
 2162 0020 5B09     		lsrs	r3, r3, #5
 2163 0022 DBB2     		uxtb	r3, r3
 2164              		.loc 1 994 12
 2165 0024 BB60     		str	r3, [r7, #8]
 995:Drivers/Src/stm32f10x_usart.c ****   /* Get the interrupt position */
ARM GAS  /tmp/cc26wfU0.s 			page 56


 996:Drivers/Src/stm32f10x_usart.c ****   itmask = USART_IT & IT_Mask;
 2166              		.loc 1 996 21
 2167 0026 7B88     		ldrh	r3, [r7, #2]
 2168              		.loc 1 996 10
 2169 0028 03F01F03 		and	r3, r3, #31
 2170 002c 7B61     		str	r3, [r7, #20]
 997:Drivers/Src/stm32f10x_usart.c ****   itmask = (uint32_t)0x01 << itmask;
 2171              		.loc 1 997 10
 2172 002e 0122     		movs	r2, #1
 2173 0030 7B69     		ldr	r3, [r7, #20]
 2174 0032 02FA03F3 		lsl	r3, r2, r3
 2175 0036 7B61     		str	r3, [r7, #20]
 998:Drivers/Src/stm32f10x_usart.c ****   
 999:Drivers/Src/stm32f10x_usart.c ****   if (usartreg == 0x01) /* The IT  is in CR1 register */
 2176              		.loc 1 999 6
 2177 0038 BB68     		ldr	r3, [r7, #8]
 2178 003a 012B     		cmp	r3, #1
 2179 003c 07D1     		bne	.L85
1000:Drivers/Src/stm32f10x_usart.c ****   {
1001:Drivers/Src/stm32f10x_usart.c ****     itmask &= USARTx->CR1;
 2180              		.loc 1 1001 21
 2181 003e 7B68     		ldr	r3, [r7, #4]
 2182 0040 9B89     		ldrh	r3, [r3, #12]	@ movhi
 2183 0042 9BB2     		uxth	r3, r3
 2184 0044 1A46     		mov	r2, r3
 2185              		.loc 1 1001 12
 2186 0046 7B69     		ldr	r3, [r7, #20]
 2187 0048 1340     		ands	r3, r3, r2
 2188 004a 7B61     		str	r3, [r7, #20]
 2189 004c 11E0     		b	.L86
 2190              	.L85:
1002:Drivers/Src/stm32f10x_usart.c ****   }
1003:Drivers/Src/stm32f10x_usart.c ****   else if (usartreg == 0x02) /* The IT  is in CR2 register */
 2191              		.loc 1 1003 11
 2192 004e BB68     		ldr	r3, [r7, #8]
 2193 0050 022B     		cmp	r3, #2
 2194 0052 07D1     		bne	.L87
1004:Drivers/Src/stm32f10x_usart.c ****   {
1005:Drivers/Src/stm32f10x_usart.c ****     itmask &= USARTx->CR2;
 2195              		.loc 1 1005 21
 2196 0054 7B68     		ldr	r3, [r7, #4]
 2197 0056 1B8A     		ldrh	r3, [r3, #16]	@ movhi
 2198 0058 9BB2     		uxth	r3, r3
 2199 005a 1A46     		mov	r2, r3
 2200              		.loc 1 1005 12
 2201 005c 7B69     		ldr	r3, [r7, #20]
 2202 005e 1340     		ands	r3, r3, r2
 2203 0060 7B61     		str	r3, [r7, #20]
 2204 0062 06E0     		b	.L86
 2205              	.L87:
1006:Drivers/Src/stm32f10x_usart.c ****   }
1007:Drivers/Src/stm32f10x_usart.c ****   else /* The IT  is in CR3 register */
1008:Drivers/Src/stm32f10x_usart.c ****   {
1009:Drivers/Src/stm32f10x_usart.c ****     itmask &= USARTx->CR3;
 2206              		.loc 1 1009 21
 2207 0064 7B68     		ldr	r3, [r7, #4]
 2208 0066 9B8A     		ldrh	r3, [r3, #20]	@ movhi
ARM GAS  /tmp/cc26wfU0.s 			page 57


 2209 0068 9BB2     		uxth	r3, r3
 2210 006a 1A46     		mov	r2, r3
 2211              		.loc 1 1009 12
 2212 006c 7B69     		ldr	r3, [r7, #20]
 2213 006e 1340     		ands	r3, r3, r2
 2214 0070 7B61     		str	r3, [r7, #20]
 2215              	.L86:
1010:Drivers/Src/stm32f10x_usart.c ****   }
1011:Drivers/Src/stm32f10x_usart.c ****   
1012:Drivers/Src/stm32f10x_usart.c ****   bitpos = USART_IT >> 0x08;
 2216              		.loc 1 1012 21
 2217 0072 7B88     		ldrh	r3, [r7, #2]
 2218 0074 1B0A     		lsrs	r3, r3, #8
 2219 0076 9BB2     		uxth	r3, r3
 2220              		.loc 1 1012 10
 2221 0078 FB60     		str	r3, [r7, #12]
1013:Drivers/Src/stm32f10x_usart.c ****   bitpos = (uint32_t)0x01 << bitpos;
 2222              		.loc 1 1013 10
 2223 007a 0122     		movs	r2, #1
 2224 007c FB68     		ldr	r3, [r7, #12]
 2225 007e 02FA03F3 		lsl	r3, r2, r3
 2226 0082 FB60     		str	r3, [r7, #12]
1014:Drivers/Src/stm32f10x_usart.c ****   bitpos &= USARTx->SR;
 2227              		.loc 1 1014 19
 2228 0084 7B68     		ldr	r3, [r7, #4]
 2229 0086 1B88     		ldrh	r3, [r3]	@ movhi
 2230 0088 9BB2     		uxth	r3, r3
 2231 008a 1A46     		mov	r2, r3
 2232              		.loc 1 1014 10
 2233 008c FB68     		ldr	r3, [r7, #12]
 2234 008e 1340     		ands	r3, r3, r2
 2235 0090 FB60     		str	r3, [r7, #12]
1015:Drivers/Src/stm32f10x_usart.c ****   if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 2236              		.loc 1 1015 6
 2237 0092 7B69     		ldr	r3, [r7, #20]
 2238 0094 002B     		cmp	r3, #0
 2239 0096 05D0     		beq	.L88
 2240              		.loc 1 1015 34 discriminator 1
 2241 0098 FB68     		ldr	r3, [r7, #12]
 2242 009a 002B     		cmp	r3, #0
 2243 009c 02D0     		beq	.L88
1016:Drivers/Src/stm32f10x_usart.c ****   {
1017:Drivers/Src/stm32f10x_usart.c ****     bitstatus = SET;
 2244              		.loc 1 1017 15
 2245 009e 0123     		movs	r3, #1
 2246 00a0 FB74     		strb	r3, [r7, #19]
 2247 00a2 01E0     		b	.L89
 2248              	.L88:
1018:Drivers/Src/stm32f10x_usart.c ****   }
1019:Drivers/Src/stm32f10x_usart.c ****   else
1020:Drivers/Src/stm32f10x_usart.c ****   {
1021:Drivers/Src/stm32f10x_usart.c ****     bitstatus = RESET;
 2249              		.loc 1 1021 15
 2250 00a4 0023     		movs	r3, #0
 2251 00a6 FB74     		strb	r3, [r7, #19]
 2252              	.L89:
1022:Drivers/Src/stm32f10x_usart.c ****   }
ARM GAS  /tmp/cc26wfU0.s 			page 58


1023:Drivers/Src/stm32f10x_usart.c ****   
1024:Drivers/Src/stm32f10x_usart.c ****   return bitstatus;  
 2253              		.loc 1 1024 10
 2254 00a8 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
1025:Drivers/Src/stm32f10x_usart.c **** }
 2255              		.loc 1 1025 1
 2256 00aa 1846     		mov	r0, r3
 2257 00ac 1C37     		adds	r7, r7, #28
 2258              	.LCFI163:
 2259              		.cfi_def_cfa_offset 4
 2260 00ae BD46     		mov	sp, r7
 2261              	.LCFI164:
 2262              		.cfi_def_cfa_register 13
 2263              		@ sp needed
 2264 00b0 80BC     		pop	{r7}
 2265              	.LCFI165:
 2266              		.cfi_restore 7
 2267              		.cfi_def_cfa_offset 0
 2268 00b2 7047     		bx	lr
 2269              		.cfi_endproc
 2270              	.LFE90:
 2272              		.section	.text.USART_ClearITPendingBit,"ax",%progbits
 2273              		.align	1
 2274              		.global	USART_ClearITPendingBit
 2275              		.syntax unified
 2276              		.thumb
 2277              		.thumb_func
 2278              		.fpu softvfp
 2280              	USART_ClearITPendingBit:
 2281              	.LFB91:
1026:Drivers/Src/stm32f10x_usart.c **** 
1027:Drivers/Src/stm32f10x_usart.c **** /**
1028:Drivers/Src/stm32f10x_usart.c ****   * @brief  Clears the USARTx's interrupt pending bits.
1029:Drivers/Src/stm32f10x_usart.c ****   * @param  USARTx: Select the USART or the UART peripheral. 
1030:Drivers/Src/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
1031:Drivers/Src/stm32f10x_usart.c ****   *   USART1, USART2, USART3, UART4 or UART5.
1032:Drivers/Src/stm32f10x_usart.c ****   * @param  USART_IT: specifies the interrupt pending bit to clear.
1033:Drivers/Src/stm32f10x_usart.c ****   *   This parameter can be one of the following values:
1034:Drivers/Src/stm32f10x_usart.c ****   *     @arg USART_IT_CTS:  CTS change interrupt (not available for UART4 and UART5)
1035:Drivers/Src/stm32f10x_usart.c ****   *     @arg USART_IT_LBD:  LIN Break detection interrupt
1036:Drivers/Src/stm32f10x_usart.c ****   *     @arg USART_IT_TC:   Transmission complete interrupt. 
1037:Drivers/Src/stm32f10x_usart.c ****   *     @arg USART_IT_RXNE: Receive Data register not empty interrupt.
1038:Drivers/Src/stm32f10x_usart.c ****   *   
1039:Drivers/Src/stm32f10x_usart.c ****   * @note
1040:Drivers/Src/stm32f10x_usart.c ****   *   - PE (Parity error), FE (Framing error), NE (Noise error), ORE (OverRun 
1041:Drivers/Src/stm32f10x_usart.c ****   *     error) and IDLE (Idle line detected) pending bits are cleared by 
1042:Drivers/Src/stm32f10x_usart.c ****   *     software sequence: a read operation to USART_SR register 
1043:Drivers/Src/stm32f10x_usart.c ****   *     (USART_GetITStatus()) followed by a read operation to USART_DR register 
1044:Drivers/Src/stm32f10x_usart.c ****   *     (USART_ReceiveData()).
1045:Drivers/Src/stm32f10x_usart.c ****   *   - RXNE pending bit can be also cleared by a read to the USART_DR register 
1046:Drivers/Src/stm32f10x_usart.c ****   *     (USART_ReceiveData()).
1047:Drivers/Src/stm32f10x_usart.c ****   *   - TC pending bit can be also cleared by software sequence: a read 
1048:Drivers/Src/stm32f10x_usart.c ****   *     operation to USART_SR register (USART_GetITStatus()) followed by a write 
1049:Drivers/Src/stm32f10x_usart.c ****   *     operation to USART_DR register (USART_SendData()).
1050:Drivers/Src/stm32f10x_usart.c ****   *   - TXE pending bit is cleared only by a write to the USART_DR register 
1051:Drivers/Src/stm32f10x_usart.c ****   *     (USART_SendData()).
1052:Drivers/Src/stm32f10x_usart.c ****   * @retval None
ARM GAS  /tmp/cc26wfU0.s 			page 59


1053:Drivers/Src/stm32f10x_usart.c ****   */
1054:Drivers/Src/stm32f10x_usart.c **** void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
1055:Drivers/Src/stm32f10x_usart.c **** {
 2282              		.loc 1 1055 1
 2283              		.cfi_startproc
 2284              		@ args = 0, pretend = 0, frame = 16
 2285              		@ frame_needed = 1, uses_anonymous_args = 0
 2286              		@ link register save eliminated.
 2287 0000 80B4     		push	{r7}
 2288              	.LCFI166:
 2289              		.cfi_def_cfa_offset 4
 2290              		.cfi_offset 7, -4
 2291 0002 85B0     		sub	sp, sp, #20
 2292              	.LCFI167:
 2293              		.cfi_def_cfa_offset 24
 2294 0004 00AF     		add	r7, sp, #0
 2295              	.LCFI168:
 2296              		.cfi_def_cfa_register 7
 2297 0006 7860     		str	r0, [r7, #4]
 2298 0008 0B46     		mov	r3, r1
 2299 000a 7B80     		strh	r3, [r7, #2]	@ movhi
1056:Drivers/Src/stm32f10x_usart.c ****   uint16_t bitpos = 0x00, itmask = 0x00;
 2300              		.loc 1 1056 12
 2301 000c 0023     		movs	r3, #0
 2302 000e FB81     		strh	r3, [r7, #14]	@ movhi
 2303              		.loc 1 1056 27
 2304 0010 0023     		movs	r3, #0
 2305 0012 BB81     		strh	r3, [r7, #12]	@ movhi
1057:Drivers/Src/stm32f10x_usart.c ****   /* Check the parameters */
1058:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_USART_ALL_PERIPH(USARTx));
1059:Drivers/Src/stm32f10x_usart.c ****   assert_param(IS_USART_CLEAR_IT(USART_IT));
1060:Drivers/Src/stm32f10x_usart.c ****   /* The CTS interrupt is not available for UART4 and UART5 */
1061:Drivers/Src/stm32f10x_usart.c ****   if (USART_IT == USART_IT_CTS)
1062:Drivers/Src/stm32f10x_usart.c ****   {
1063:Drivers/Src/stm32f10x_usart.c ****     assert_param(IS_USART_123_PERIPH(USARTx));
1064:Drivers/Src/stm32f10x_usart.c ****   }   
1065:Drivers/Src/stm32f10x_usart.c ****   
1066:Drivers/Src/stm32f10x_usart.c ****   bitpos = USART_IT >> 0x08;
 2306              		.loc 1 1066 10
 2307 0014 7B88     		ldrh	r3, [r7, #2]
 2308 0016 1B0A     		lsrs	r3, r3, #8
 2309 0018 FB81     		strh	r3, [r7, #14]	@ movhi
1067:Drivers/Src/stm32f10x_usart.c **** 
1068:Drivers/Src/stm32f10x_usart.c ****   // [ILG]
1069:Drivers/Src/stm32f10x_usart.c ****   #if defined ( __GNUC__ )
1070:Drivers/Src/stm32f10x_usart.c ****   #pragma GCC diagnostic push
1071:Drivers/Src/stm32f10x_usart.c ****   #pragma GCC diagnostic ignored "-Wconversion"
1072:Drivers/Src/stm32f10x_usart.c ****   #endif
1073:Drivers/Src/stm32f10x_usart.c ****   itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 2310              		.loc 1 1073 31
 2311 001a FB89     		ldrh	r3, [r7, #14]
 2312              		.loc 1 1073 28
 2313 001c 0122     		movs	r2, #1
 2314 001e 02FA03F3 		lsl	r3, r2, r3
 2315              		.loc 1 1073 10
 2316 0022 BB81     		strh	r3, [r7, #12]	@ movhi
1074:Drivers/Src/stm32f10x_usart.c ****   // [ILG]
ARM GAS  /tmp/cc26wfU0.s 			page 60


1075:Drivers/Src/stm32f10x_usart.c ****   #if defined ( __GNUC__ )
1076:Drivers/Src/stm32f10x_usart.c ****   #pragma GCC diagnostic pop
1077:Drivers/Src/stm32f10x_usart.c ****   #endif
1078:Drivers/Src/stm32f10x_usart.c **** 
1079:Drivers/Src/stm32f10x_usart.c ****   USARTx->SR = (uint16_t)~itmask;
 2317              		.loc 1 1079 16
 2318 0024 BB89     		ldrh	r3, [r7, #12]	@ movhi
 2319 0026 DB43     		mvns	r3, r3
 2320 0028 9AB2     		uxth	r2, r3
 2321              		.loc 1 1079 14
 2322 002a 7B68     		ldr	r3, [r7, #4]
 2323 002c 1A80     		strh	r2, [r3]	@ movhi
1080:Drivers/Src/stm32f10x_usart.c **** }
 2324              		.loc 1 1080 1
 2325 002e 00BF     		nop
 2326 0030 1437     		adds	r7, r7, #20
 2327              	.LCFI169:
 2328              		.cfi_def_cfa_offset 4
 2329 0032 BD46     		mov	sp, r7
 2330              	.LCFI170:
 2331              		.cfi_def_cfa_register 13
 2332              		@ sp needed
 2333 0034 80BC     		pop	{r7}
 2334              	.LCFI171:
 2335              		.cfi_restore 7
 2336              		.cfi_def_cfa_offset 0
 2337 0036 7047     		bx	lr
 2338              		.cfi_endproc
 2339              	.LFE91:
 2341              		.text
 2342              	.Letext0:
 2343              		.file 2 "/home/pico/tools/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/machine/_defaul
 2344              		.file 3 "/home/pico/tools/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/sys/_stdint.h"
 2345              		.file 4 "Inc/stm32f10x.h"
 2346              		.file 5 "Drivers/Inc/stm32f10x_rcc.h"
 2347              		.file 6 "Drivers/Inc/stm32f10x_usart.h"
ARM GAS  /tmp/cc26wfU0.s 			page 61


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f10x_usart.c
     /tmp/cc26wfU0.s:16     .text.USART_DeInit:0000000000000000 $t
     /tmp/cc26wfU0.s:24     .text.USART_DeInit:0000000000000000 USART_DeInit
     /tmp/cc26wfU0.s:134    .text.USART_DeInit:00000000000000a4 $d
     /tmp/cc26wfU0.s:143    .text.USART_Init:0000000000000000 $t
     /tmp/cc26wfU0.s:150    .text.USART_Init:0000000000000000 USART_Init
     /tmp/cc26wfU0.s:414    .text.USART_Init:000000000000016c $d
     /tmp/cc26wfU0.s:420    .text.USART_StructInit:0000000000000000 $t
     /tmp/cc26wfU0.s:427    .text.USART_StructInit:0000000000000000 USART_StructInit
     /tmp/cc26wfU0.s:487    .text.USART_ClockInit:0000000000000000 $t
     /tmp/cc26wfU0.s:494    .text.USART_ClockInit:0000000000000000 USART_ClockInit
     /tmp/cc26wfU0.s:577    .text.USART_ClockStructInit:0000000000000000 $t
     /tmp/cc26wfU0.s:584    .text.USART_ClockStructInit:0000000000000000 USART_ClockStructInit
     /tmp/cc26wfU0.s:636    .text.USART_Cmd:0000000000000000 $t
     /tmp/cc26wfU0.s:643    .text.USART_Cmd:0000000000000000 USART_Cmd
     /tmp/cc26wfU0.s:705    .text.USART_ITConfig:0000000000000000 $t
     /tmp/cc26wfU0.s:712    .text.USART_ITConfig:0000000000000000 USART_ITConfig
     /tmp/cc26wfU0.s:835    .text.USART_DMACmd:0000000000000000 $t
     /tmp/cc26wfU0.s:842    .text.USART_DMACmd:0000000000000000 USART_DMACmd
     /tmp/cc26wfU0.s:912    .text.USART_SetAddress:0000000000000000 $t
     /tmp/cc26wfU0.s:919    .text.USART_SetAddress:0000000000000000 USART_SetAddress
     /tmp/cc26wfU0.s:975    .text.USART_WakeUpConfig:0000000000000000 $t
     /tmp/cc26wfU0.s:982    .text.USART_WakeUpConfig:0000000000000000 USART_WakeUpConfig
     /tmp/cc26wfU0.s:1037   .text.USART_ReceiverWakeUpCmd:0000000000000000 $t
     /tmp/cc26wfU0.s:1044   .text.USART_ReceiverWakeUpCmd:0000000000000000 USART_ReceiverWakeUpCmd
     /tmp/cc26wfU0.s:1106   .text.USART_LINBreakDetectLengthConfig:0000000000000000 $t
     /tmp/cc26wfU0.s:1113   .text.USART_LINBreakDetectLengthConfig:0000000000000000 USART_LINBreakDetectLengthConfig
     /tmp/cc26wfU0.s:1168   .text.USART_LINCmd:0000000000000000 $t
     /tmp/cc26wfU0.s:1175   .text.USART_LINCmd:0000000000000000 USART_LINCmd
     /tmp/cc26wfU0.s:1237   .text.USART_SendData:0000000000000000 $t
     /tmp/cc26wfU0.s:1244   .text.USART_SendData:0000000000000000 USART_SendData
     /tmp/cc26wfU0.s:1289   .text.USART_ReceiveData:0000000000000000 $t
     /tmp/cc26wfU0.s:1296   .text.USART_ReceiveData:0000000000000000 USART_ReceiveData
     /tmp/cc26wfU0.s:1339   .text.USART_SendBreak:0000000000000000 $t
     /tmp/cc26wfU0.s:1346   .text.USART_SendBreak:0000000000000000 USART_SendBreak
     /tmp/cc26wfU0.s:1390   .text.USART_SetGuardTime:0000000000000000 $t
     /tmp/cc26wfU0.s:1397   .text.USART_SetGuardTime:0000000000000000 USART_SetGuardTime
     /tmp/cc26wfU0.s:1457   .text.USART_SetPrescaler:0000000000000000 $t
     /tmp/cc26wfU0.s:1464   .text.USART_SetPrescaler:0000000000000000 USART_SetPrescaler
     /tmp/cc26wfU0.s:1520   .text.USART_SmartCardCmd:0000000000000000 $t
     /tmp/cc26wfU0.s:1527   .text.USART_SmartCardCmd:0000000000000000 USART_SmartCardCmd
     /tmp/cc26wfU0.s:1589   .text.USART_SmartCardNACKCmd:0000000000000000 $t
     /tmp/cc26wfU0.s:1596   .text.USART_SmartCardNACKCmd:0000000000000000 USART_SmartCardNACKCmd
     /tmp/cc26wfU0.s:1658   .text.USART_HalfDuplexCmd:0000000000000000 $t
     /tmp/cc26wfU0.s:1665   .text.USART_HalfDuplexCmd:0000000000000000 USART_HalfDuplexCmd
     /tmp/cc26wfU0.s:1727   .text.USART_OverSampling8Cmd:0000000000000000 $t
     /tmp/cc26wfU0.s:1734   .text.USART_OverSampling8Cmd:0000000000000000 USART_OverSampling8Cmd
     /tmp/cc26wfU0.s:1797   .text.USART_OneBitMethodCmd:0000000000000000 $t
     /tmp/cc26wfU0.s:1804   .text.USART_OneBitMethodCmd:0000000000000000 USART_OneBitMethodCmd
     /tmp/cc26wfU0.s:1866   .text.USART_IrDAConfig:0000000000000000 $t
     /tmp/cc26wfU0.s:1873   .text.USART_IrDAConfig:0000000000000000 USART_IrDAConfig
     /tmp/cc26wfU0.s:1928   .text.USART_IrDACmd:0000000000000000 $t
     /tmp/cc26wfU0.s:1935   .text.USART_IrDACmd:0000000000000000 USART_IrDACmd
     /tmp/cc26wfU0.s:1997   .text.USART_GetFlagStatus:0000000000000000 $t
     /tmp/cc26wfU0.s:2004   .text.USART_GetFlagStatus:0000000000000000 USART_GetFlagStatus
     /tmp/cc26wfU0.s:2067   .text.USART_ClearFlag:0000000000000000 $t
ARM GAS  /tmp/cc26wfU0.s 			page 62


     /tmp/cc26wfU0.s:2074   .text.USART_ClearFlag:0000000000000000 USART_ClearFlag
     /tmp/cc26wfU0.s:2119   .text.USART_GetITStatus:0000000000000000 $t
     /tmp/cc26wfU0.s:2126   .text.USART_GetITStatus:0000000000000000 USART_GetITStatus
     /tmp/cc26wfU0.s:2273   .text.USART_ClearITPendingBit:0000000000000000 $t
     /tmp/cc26wfU0.s:2280   .text.USART_ClearITPendingBit:0000000000000000 USART_ClearITPendingBit

UNDEFINED SYMBOLS
RCC_APB2PeriphResetCmd
RCC_APB1PeriphResetCmd
RCC_GetClocksFreq
