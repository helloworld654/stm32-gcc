ARM GAS  /tmp/ccRqTjUh.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"esp8266.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.global	esp8266_buf
  16              		.section	.bss.esp8266_buf,"aw",%nobits
  17              		.align	2
  20              	esp8266_buf:
  21 0000 00000000 		.space	128
  21      00000000 
  21      00000000 
  21      00000000 
  21      00000000 
  22              		.global	esp8266_cnt
  23              		.section	.bss.esp8266_cnt,"aw",%nobits
  24              		.align	1
  27              	esp8266_cnt:
  28 0000 0000     		.space	2
  29              		.global	esp8266_cntPre
  30              		.section	.bss.esp8266_cntPre,"aw",%nobits
  31              		.align	1
  34              	esp8266_cntPre:
  35 0000 0000     		.space	2
  36              		.global	receive_flag
  37              		.section	.bss.receive_flag,"aw",%nobits
  40              	receive_flag:
  41 0000 00       		.space	1
  42              		.global	mess1_receive_flag
  43              		.section	.bss.mess1_receive_flag,"aw",%nobits
  46              	mess1_receive_flag:
  47 0000 00       		.space	1
  48              		.global	mess2_receive_flag
  49              		.section	.bss.mess2_receive_flag,"aw",%nobits
  52              	mess2_receive_flag:
  53 0000 00       		.space	1
  54              		.global	mess3_receive_flag
  55              		.section	.bss.mess3_receive_flag,"aw",%nobits
  58              	mess3_receive_flag:
  59 0000 00       		.space	1
  60              		.global	mess4_receive_flag
  61              		.section	.bss.mess4_receive_flag,"aw",%nobits
  64              	mess4_receive_flag:
  65 0000 00       		.space	1
  66              		.global	mess5_receive_flag
  67              		.section	.bss.mess5_receive_flag,"aw",%nobits
  70              	mess5_receive_flag:
  71 0000 00       		.space	1
ARM GAS  /tmp/ccRqTjUh.s 			page 2


  72              		.section	.text.ESP8266_Clear,"ax",%progbits
  73              		.align	1
  74              		.global	ESP8266_Clear
  75              		.arch armv7-m
  76              		.syntax unified
  77              		.thumb
  78              		.thumb_func
  79              		.fpu softvfp
  81              	ESP8266_Clear:
  82              	.LFB66:
  83              		.file 1 "hardware/src/esp8266.c"
   1:hardware/src/esp8266.c **** /**
   2:hardware/src/esp8266.c **** 	************************************************************
   3:hardware/src/esp8266.c **** 	************************************************************
   4:hardware/src/esp8266.c **** 	************************************************************
   5:hardware/src/esp8266.c **** 	*	文件名： 	esp8266.c
   6:hardware/src/esp8266.c **** 	*
   7:hardware/src/esp8266.c **** 	*	作者： 		张继瑞
   8:hardware/src/esp8266.c **** 	*
   9:hardware/src/esp8266.c **** 	*	日期： 		2017-05-08
  10:hardware/src/esp8266.c **** 	*
  11:hardware/src/esp8266.c **** 	*	版本： 		V1.0
  12:hardware/src/esp8266.c **** 	*
  13:hardware/src/esp8266.c **** 	*	说明： 		ESP8266的简单驱动
  14:hardware/src/esp8266.c **** 	*
  15:hardware/src/esp8266.c **** 	*	修改记录：	
  16:hardware/src/esp8266.c **** 	************************************************************
  17:hardware/src/esp8266.c **** 	************************************************************
  18:hardware/src/esp8266.c **** 	************************************************************
  19:hardware/src/esp8266.c **** **/
  20:hardware/src/esp8266.c **** 
  21:hardware/src/esp8266.c **** //单片机头文件
  22:hardware/src/esp8266.c **** #include "stm32f10x.h"
  23:hardware/src/esp8266.c **** 
  24:hardware/src/esp8266.c **** //网络设备驱动
  25:hardware/src/esp8266.c **** #include "esp8266.h"
  26:hardware/src/esp8266.c **** 
  27:hardware/src/esp8266.c **** //硬件驱动
  28:hardware/src/esp8266.c **** #include "delay.h"
  29:hardware/src/esp8266.c **** #include "usart.h"
  30:hardware/src/esp8266.c **** 
  31:hardware/src/esp8266.c **** //C库
  32:hardware/src/esp8266.c **** #include <string.h>
  33:hardware/src/esp8266.c **** #include <stdio.h>
  34:hardware/src/esp8266.c **** 
  35:hardware/src/esp8266.c **** #define COMPARE_MESS_SUCCESS    60
  36:hardware/src/esp8266.c **** 
  37:hardware/src/esp8266.c **** unsigned char esp8266_buf[128];
  38:hardware/src/esp8266.c **** unsigned short esp8266_cnt = 0, esp8266_cntPre = 0;
  39:hardware/src/esp8266.c **** uint8_t receive_flag = 0;
  40:hardware/src/esp8266.c **** uint8_t mess1_receive_flag,mess2_receive_flag,mess3_receive_flag,mess4_receive_flag,mess5_receive_f
  41:hardware/src/esp8266.c **** 
  42:hardware/src/esp8266.c **** //==========================================================
  43:hardware/src/esp8266.c **** //	函数名称：	ESP8266_Clear
  44:hardware/src/esp8266.c **** //
  45:hardware/src/esp8266.c **** //	函数功能：	清空缓存
  46:hardware/src/esp8266.c **** //
ARM GAS  /tmp/ccRqTjUh.s 			page 3


  47:hardware/src/esp8266.c **** //	入口参数：	无
  48:hardware/src/esp8266.c **** //
  49:hardware/src/esp8266.c **** //	返回参数：	无
  50:hardware/src/esp8266.c **** //
  51:hardware/src/esp8266.c **** //	说明：		
  52:hardware/src/esp8266.c **** //==========================================================
  53:hardware/src/esp8266.c **** void ESP8266_Clear(void)
  54:hardware/src/esp8266.c **** {
  84              		.loc 1 54 1
  85              		.cfi_startproc
  86              		@ args = 0, pretend = 0, frame = 0
  87              		@ frame_needed = 1, uses_anonymous_args = 0
  88 0000 80B5     		push	{r7, lr}
  89              	.LCFI0:
  90              		.cfi_def_cfa_offset 8
  91              		.cfi_offset 7, -8
  92              		.cfi_offset 14, -4
  93 0002 00AF     		add	r7, sp, #0
  94              	.LCFI1:
  95              		.cfi_def_cfa_register 7
  55:hardware/src/esp8266.c **** 	memset(esp8266_buf, 0, sizeof(esp8266_buf));
  96              		.loc 1 55 2
  97 0004 8022     		movs	r2, #128
  98 0006 0021     		movs	r1, #0
  99 0008 0348     		ldr	r0, .L2
 100 000a FFF7FEFF 		bl	memset
  56:hardware/src/esp8266.c **** 	esp8266_cnt = 0;
 101              		.loc 1 56 14
 102 000e 034B     		ldr	r3, .L2+4
 103 0010 0022     		movs	r2, #0
 104 0012 1A80     		strh	r2, [r3]	@ movhi
  57:hardware/src/esp8266.c **** }
 105              		.loc 1 57 1
 106 0014 00BF     		nop
 107 0016 80BD     		pop	{r7, pc}
 108              	.L3:
 109              		.align	2
 110              	.L2:
 111 0018 00000000 		.word	esp8266_buf
 112 001c 00000000 		.word	esp8266_cnt
 113              		.cfi_endproc
 114              	.LFE66:
 116              		.section	.text.clear_all_mess_rece_flags,"ax",%progbits
 117              		.align	1
 118              		.global	clear_all_mess_rece_flags
 119              		.syntax unified
 120              		.thumb
 121              		.thumb_func
 122              		.fpu softvfp
 124              	clear_all_mess_rece_flags:
 125              	.LFB67:
  58:hardware/src/esp8266.c **** 
  59:hardware/src/esp8266.c **** void clear_all_mess_rece_flags(void)
  60:hardware/src/esp8266.c **** {
 126              		.loc 1 60 1
 127              		.cfi_startproc
 128              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccRqTjUh.s 			page 4


 129              		@ frame_needed = 1, uses_anonymous_args = 0
 130              		@ link register save eliminated.
 131 0000 80B4     		push	{r7}
 132              	.LCFI2:
 133              		.cfi_def_cfa_offset 4
 134              		.cfi_offset 7, -4
 135 0002 00AF     		add	r7, sp, #0
 136              	.LCFI3:
 137              		.cfi_def_cfa_register 7
  61:hardware/src/esp8266.c **** 	mess1_receive_flag = 0;
 138              		.loc 1 61 21
 139 0004 094B     		ldr	r3, .L5
 140 0006 0022     		movs	r2, #0
 141 0008 1A70     		strb	r2, [r3]
  62:hardware/src/esp8266.c **** 	mess2_receive_flag = 0;
 142              		.loc 1 62 21
 143 000a 094B     		ldr	r3, .L5+4
 144 000c 0022     		movs	r2, #0
 145 000e 1A70     		strb	r2, [r3]
  63:hardware/src/esp8266.c **** 	mess3_receive_flag = 0;
 146              		.loc 1 63 21
 147 0010 084B     		ldr	r3, .L5+8
 148 0012 0022     		movs	r2, #0
 149 0014 1A70     		strb	r2, [r3]
  64:hardware/src/esp8266.c **** 	mess4_receive_flag = 0;
 150              		.loc 1 64 21
 151 0016 084B     		ldr	r3, .L5+12
 152 0018 0022     		movs	r2, #0
 153 001a 1A70     		strb	r2, [r3]
  65:hardware/src/esp8266.c **** 	mess5_receive_flag = 0;
 154              		.loc 1 65 21
 155 001c 074B     		ldr	r3, .L5+16
 156 001e 0022     		movs	r2, #0
 157 0020 1A70     		strb	r2, [r3]
  66:hardware/src/esp8266.c **** }
 158              		.loc 1 66 1
 159 0022 00BF     		nop
 160 0024 BD46     		mov	sp, r7
 161              	.LCFI4:
 162              		.cfi_def_cfa_register 13
 163              		@ sp needed
 164 0026 80BC     		pop	{r7}
 165              	.LCFI5:
 166              		.cfi_restore 7
 167              		.cfi_def_cfa_offset 0
 168 0028 7047     		bx	lr
 169              	.L6:
 170 002a 00BF     		.align	2
 171              	.L5:
 172 002c 00000000 		.word	mess1_receive_flag
 173 0030 00000000 		.word	mess2_receive_flag
 174 0034 00000000 		.word	mess3_receive_flag
 175 0038 00000000 		.word	mess4_receive_flag
 176 003c 00000000 		.word	mess5_receive_flag
 177              		.cfi_endproc
 178              	.LFE67:
 180              		.section	.text.ESP8266_WaitRecive,"ax",%progbits
ARM GAS  /tmp/ccRqTjUh.s 			page 5


 181              		.align	1
 182              		.global	ESP8266_WaitRecive
 183              		.syntax unified
 184              		.thumb
 185              		.thumb_func
 186              		.fpu softvfp
 188              	ESP8266_WaitRecive:
 189              	.LFB68:
  67:hardware/src/esp8266.c **** 
  68:hardware/src/esp8266.c **** //==========================================================
  69:hardware/src/esp8266.c **** //	函数名称：	ESP8266_WaitRecive
  70:hardware/src/esp8266.c **** //
  71:hardware/src/esp8266.c **** //	函数功能：	等待接收完成
  72:hardware/src/esp8266.c **** //
  73:hardware/src/esp8266.c **** //	入口参数：	无
  74:hardware/src/esp8266.c **** //
  75:hardware/src/esp8266.c **** //	返回参数：	REV_OK-接收完成		REV_WAIT-接收超时未完成
  76:hardware/src/esp8266.c **** //
  77:hardware/src/esp8266.c **** //	说明：		循环调用检测是否接收完成
  78:hardware/src/esp8266.c **** //==========================================================
  79:hardware/src/esp8266.c **** _Bool ESP8266_WaitRecive(void)
  80:hardware/src/esp8266.c **** {
 190              		.loc 1 80 1
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 0
 193              		@ frame_needed = 1, uses_anonymous_args = 0
 194              		@ link register save eliminated.
 195 0000 80B4     		push	{r7}
 196              	.LCFI6:
 197              		.cfi_def_cfa_offset 4
 198              		.cfi_offset 7, -4
 199 0002 00AF     		add	r7, sp, #0
 200              	.LCFI7:
 201              		.cfi_def_cfa_register 7
  81:hardware/src/esp8266.c **** 
  82:hardware/src/esp8266.c **** 	if(esp8266_cnt == 0) 							//如果接收计数为0 则说明没有处于接收数据中，所以直接跳出，结束函数
 202              		.loc 1 82 17
 203 0004 0B4B     		ldr	r3, .L11
 204 0006 1B88     		ldrh	r3, [r3]
 205              		.loc 1 82 4
 206 0008 002B     		cmp	r3, #0
 207 000a 01D1     		bne	.L8
  83:hardware/src/esp8266.c **** 		return REV_WAIT;
 208              		.loc 1 83 10
 209 000c 0123     		movs	r3, #1
 210 000e 0CE0     		b	.L9
 211              	.L8:
  84:hardware/src/esp8266.c **** 		
  85:hardware/src/esp8266.c **** 	if(esp8266_cnt == esp8266_cntPre)				//如果上一次的值和这次相同，则说明接收完毕
 212              		.loc 1 85 17
 213 0010 084B     		ldr	r3, .L11
 214 0012 1A88     		ldrh	r2, [r3]
 215 0014 084B     		ldr	r3, .L11+4
 216 0016 1B88     		ldrh	r3, [r3]
 217              		.loc 1 85 4
 218 0018 9A42     		cmp	r2, r3
 219 001a 01D1     		bne	.L10
ARM GAS  /tmp/ccRqTjUh.s 			page 6


  86:hardware/src/esp8266.c **** 	{			
  87:hardware/src/esp8266.c **** 		return REV_OK;								//返回接收完成标志
 220              		.loc 1 87 10
 221 001c 0023     		movs	r3, #0
 222 001e 04E0     		b	.L9
 223              	.L10:
  88:hardware/src/esp8266.c **** 	}
  89:hardware/src/esp8266.c **** 		
  90:hardware/src/esp8266.c **** 	esp8266_cntPre = esp8266_cnt;					//置为相同
 224              		.loc 1 90 17
 225 0020 044B     		ldr	r3, .L11
 226 0022 1A88     		ldrh	r2, [r3]
 227 0024 044B     		ldr	r3, .L11+4
 228 0026 1A80     		strh	r2, [r3]	@ movhi
  91:hardware/src/esp8266.c **** 	
  92:hardware/src/esp8266.c **** 	return REV_WAIT;								//返回接收未完成标志
 229              		.loc 1 92 9
 230 0028 0123     		movs	r3, #1
 231              	.L9:
  93:hardware/src/esp8266.c **** 
  94:hardware/src/esp8266.c **** }
 232              		.loc 1 94 1
 233 002a 1846     		mov	r0, r3
 234 002c BD46     		mov	sp, r7
 235              	.LCFI8:
 236              		.cfi_def_cfa_register 13
 237              		@ sp needed
 238 002e 80BC     		pop	{r7}
 239              	.LCFI9:
 240              		.cfi_restore 7
 241              		.cfi_def_cfa_offset 0
 242 0030 7047     		bx	lr
 243              	.L12:
 244 0032 00BF     		.align	2
 245              	.L11:
 246 0034 00000000 		.word	esp8266_cnt
 247 0038 00000000 		.word	esp8266_cntPre
 248              		.cfi_endproc
 249              	.LFE68:
 251              		.section	.text.ESP8266_SendCmd,"ax",%progbits
 252              		.align	1
 253              		.global	ESP8266_SendCmd
 254              		.syntax unified
 255              		.thumb
 256              		.thumb_func
 257              		.fpu softvfp
 259              	ESP8266_SendCmd:
 260              	.LFB69:
  95:hardware/src/esp8266.c **** 
  96:hardware/src/esp8266.c **** //==========================================================
  97:hardware/src/esp8266.c **** //	函数名称：	ESP8266_SendCmd
  98:hardware/src/esp8266.c **** //
  99:hardware/src/esp8266.c **** //	函数功能：	发送命令
 100:hardware/src/esp8266.c **** //
 101:hardware/src/esp8266.c **** //	入口参数：	cmd：命令
 102:hardware/src/esp8266.c **** //				res：需要检查的返回指令
 103:hardware/src/esp8266.c **** //
ARM GAS  /tmp/ccRqTjUh.s 			page 7


 104:hardware/src/esp8266.c **** //	返回参数：	0-成功	1-失败
 105:hardware/src/esp8266.c **** //
 106:hardware/src/esp8266.c **** //	说明：		
 107:hardware/src/esp8266.c **** //==========================================================
 108:hardware/src/esp8266.c **** _Bool ESP8266_SendCmd(char *cmd, char *res)
 109:hardware/src/esp8266.c **** {
 261              		.loc 1 109 1
 262              		.cfi_startproc
 263              		@ args = 0, pretend = 0, frame = 16
 264              		@ frame_needed = 1, uses_anonymous_args = 0
 265 0000 80B5     		push	{r7, lr}
 266              	.LCFI10:
 267              		.cfi_def_cfa_offset 8
 268              		.cfi_offset 7, -8
 269              		.cfi_offset 14, -4
 270 0002 84B0     		sub	sp, sp, #16
 271              	.LCFI11:
 272              		.cfi_def_cfa_offset 24
 273 0004 00AF     		add	r7, sp, #0
 274              	.LCFI12:
 275              		.cfi_def_cfa_register 7
 276 0006 7860     		str	r0, [r7, #4]
 277 0008 3960     		str	r1, [r7]
 110:hardware/src/esp8266.c **** 	
 111:hardware/src/esp8266.c **** 	unsigned char timeOut = 200;
 278              		.loc 1 111 16
 279 000a C823     		movs	r3, #200
 280 000c FB73     		strb	r3, [r7, #15]
 112:hardware/src/esp8266.c **** 	ESP8266_Clear();
 281              		.loc 1 112 2
 282 000e FFF7FEFF 		bl	ESP8266_Clear
 113:hardware/src/esp8266.c **** 	Usart_SendString(USART2, (unsigned char *)cmd, strlen((const char *)cmd));
 283              		.loc 1 113 49
 284 0012 7868     		ldr	r0, [r7, #4]
 285 0014 FFF7FEFF 		bl	strlen
 286 0018 0346     		mov	r3, r0
 287              		.loc 1 113 2
 288 001a 9BB2     		uxth	r3, r3
 289 001c 1A46     		mov	r2, r3
 290 001e 7968     		ldr	r1, [r7, #4]
 291 0020 1448     		ldr	r0, .L18
 292 0022 FFF7FEFF 		bl	Usart_SendString
 114:hardware/src/esp8266.c **** 	
 115:hardware/src/esp8266.c **** 	while(timeOut--)
 293              		.loc 1 115 7
 294 0026 1BE0     		b	.L14
 295              	.L17:
 116:hardware/src/esp8266.c **** 	{
 117:hardware/src/esp8266.c **** 		if(ESP8266_WaitRecive() == REV_OK)							//如果收到数据
 296              		.loc 1 117 6
 297 0028 FFF7FEFF 		bl	ESP8266_WaitRecive
 298 002c 0346     		mov	r3, r0
 299              		.loc 1 117 27
 300 002e 83F00103 		eor	r3, r3, #1
 301 0032 DBB2     		uxtb	r3, r3
 302              		.loc 1 117 5
 303 0034 002B     		cmp	r3, #0
ARM GAS  /tmp/ccRqTjUh.s 			page 8


 304 0036 10D0     		beq	.L15
 118:hardware/src/esp8266.c **** 		{
 119:hardware/src/esp8266.c **** 			esp8266_buf[esp8266_cnt] = '\0';
 305              		.loc 1 119 15
 306 0038 0F4B     		ldr	r3, .L18+4
 307 003a 1B88     		ldrh	r3, [r3]
 308 003c 1A46     		mov	r2, r3
 309              		.loc 1 119 29
 310 003e 0F4B     		ldr	r3, .L18+8
 311 0040 0021     		movs	r1, #0
 312 0042 9954     		strb	r1, [r3, r2]
 120:hardware/src/esp8266.c **** 			if(strstr((const char *)esp8266_buf, res) != NULL)		//如果检索到关键词
 313              		.loc 1 120 7
 314 0044 3968     		ldr	r1, [r7]
 315 0046 0D48     		ldr	r0, .L18+8
 316 0048 FFF7FEFF 		bl	strstr
 317 004c 0346     		mov	r3, r0
 318              		.loc 1 120 6
 319 004e 002B     		cmp	r3, #0
 320 0050 03D0     		beq	.L15
 121:hardware/src/esp8266.c **** 			{
 122:hardware/src/esp8266.c **** 				ESP8266_Clear();									//清空缓存
 321              		.loc 1 122 5
 322 0052 FFF7FEFF 		bl	ESP8266_Clear
 123:hardware/src/esp8266.c **** 				
 124:hardware/src/esp8266.c **** 				return 0;
 323              		.loc 1 124 12
 324 0056 0023     		movs	r3, #0
 325 0058 08E0     		b	.L16
 326              	.L15:
 125:hardware/src/esp8266.c **** 			}
 126:hardware/src/esp8266.c **** 		}
 127:hardware/src/esp8266.c **** 		
 128:hardware/src/esp8266.c **** 		delay_lms(10);
 327              		.loc 1 128 3
 328 005a 0A20     		movs	r0, #10
 329 005c FFF7FEFF 		bl	delay_lms
 330              	.L14:
 115:hardware/src/esp8266.c **** 	{
 331              		.loc 1 115 15
 332 0060 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 333 0062 5A1E     		subs	r2, r3, #1
 334 0064 FA73     		strb	r2, [r7, #15]
 115:hardware/src/esp8266.c **** 	{
 335              		.loc 1 115 7
 336 0066 002B     		cmp	r3, #0
 337 0068 DED1     		bne	.L17
 129:hardware/src/esp8266.c **** 	}
 130:hardware/src/esp8266.c **** 	
 131:hardware/src/esp8266.c **** 	return 1;
 338              		.loc 1 131 9
 339 006a 0123     		movs	r3, #1
 340              	.L16:
 132:hardware/src/esp8266.c **** 
 133:hardware/src/esp8266.c **** }
 341              		.loc 1 133 1
 342 006c 1846     		mov	r0, r3
ARM GAS  /tmp/ccRqTjUh.s 			page 9


 343 006e 1037     		adds	r7, r7, #16
 344              	.LCFI13:
 345              		.cfi_def_cfa_offset 8
 346 0070 BD46     		mov	sp, r7
 347              	.LCFI14:
 348              		.cfi_def_cfa_register 13
 349              		@ sp needed
 350 0072 80BD     		pop	{r7, pc}
 351              	.L19:
 352              		.align	2
 353              	.L18:
 354 0074 00440040 		.word	1073759232
 355 0078 00000000 		.word	esp8266_cnt
 356 007c 00000000 		.word	esp8266_buf
 357              		.cfi_endproc
 358              	.LFE69:
 360              		.section	.rodata
 361              		.align	2
 362              	.LC0:
 363 0000 5B25735D 		.ascii	"[%s]esp8266_buf:%s\015\012\000"
 363      65737038 
 363      3236365F 
 363      6275663A 
 363      25730D0A 
 364              		.section	.text.compare_rece_mess,"ax",%progbits
 365              		.align	1
 366              		.global	compare_rece_mess
 367              		.syntax unified
 368              		.thumb
 369              		.thumb_func
 370              		.fpu softvfp
 372              	compare_rece_mess:
 373              	.LFB70:
 134:hardware/src/esp8266.c **** 
 135:hardware/src/esp8266.c **** void compare_rece_mess(char *nlp_mess[])
 136:hardware/src/esp8266.c **** {
 374              		.loc 1 136 1
 375              		.cfi_startproc
 376              		@ args = 0, pretend = 0, frame = 8
 377              		@ frame_needed = 1, uses_anonymous_args = 0
 378 0000 80B5     		push	{r7, lr}
 379              	.LCFI15:
 380              		.cfi_def_cfa_offset 8
 381              		.cfi_offset 7, -8
 382              		.cfi_offset 14, -4
 383 0002 82B0     		sub	sp, sp, #8
 384              	.LCFI16:
 385              		.cfi_def_cfa_offset 16
 386 0004 00AF     		add	r7, sp, #0
 387              	.LCFI17:
 388              		.cfi_def_cfa_register 7
 389 0006 7860     		str	r0, [r7, #4]
 137:hardware/src/esp8266.c **** 	uint8_t i;
 138:hardware/src/esp8266.c **** 	clear_all_mess_rece_flags();
 390              		.loc 1 138 2
 391 0008 FFF7FEFF 		bl	clear_all_mess_rece_flags
 139:hardware/src/esp8266.c **** 	printf("[%s]esp8266_buf:%s\r\n",__func__,esp8266_buf);
ARM GAS  /tmp/ccRqTjUh.s 			page 10


 392              		.loc 1 139 2
 393 000c 264A     		ldr	r2, .L26
 394 000e 2749     		ldr	r1, .L26+4
 395 0010 2748     		ldr	r0, .L26+8
 396 0012 FFF7FEFF 		bl	printf
 397              	.LBB2:
 140:hardware/src/esp8266.c **** 	if(Find_Lcs(esp8266_buf,nlp_mess[0]) >= COMPARE_MESS_SUCCESS)
 398              		.loc 1 140 5
 399 0016 7B68     		ldr	r3, [r7, #4]
 400 0018 1B68     		ldr	r3, [r3]
 401 001a 1946     		mov	r1, r3
 402 001c 2248     		ldr	r0, .L26
 403 001e FFF7FEFF 		bl	Find_Lcs
 404 0022 0346     		mov	r3, r0
 405              		.loc 1 140 4
 406 0024 3B2B     		cmp	r3, #59
 407 0026 02DD     		ble	.L21
 141:hardware/src/esp8266.c **** 		mess1_receive_flag = 1;
 408              		.loc 1 141 22
 409 0028 224B     		ldr	r3, .L26+12
 410 002a 0122     		movs	r2, #1
 411 002c 1A70     		strb	r2, [r3]
 412              	.L21:
 413              	.LBE2:
 414              	.LBB3:
 142:hardware/src/esp8266.c **** 	if(Find_Lcs(esp8266_buf,nlp_mess[1]) >= COMPARE_MESS_SUCCESS)
 415              		.loc 1 142 34
 416 002e 7B68     		ldr	r3, [r7, #4]
 417 0030 0433     		adds	r3, r3, #4
 418              		.loc 1 142 5
 419 0032 1B68     		ldr	r3, [r3]
 420 0034 1946     		mov	r1, r3
 421 0036 1C48     		ldr	r0, .L26
 422 0038 FFF7FEFF 		bl	Find_Lcs
 423 003c 0346     		mov	r3, r0
 424              		.loc 1 142 4
 425 003e 3B2B     		cmp	r3, #59
 426 0040 02DD     		ble	.L22
 143:hardware/src/esp8266.c **** 		mess2_receive_flag = 1;
 427              		.loc 1 143 22
 428 0042 1D4B     		ldr	r3, .L26+16
 429 0044 0122     		movs	r2, #1
 430 0046 1A70     		strb	r2, [r3]
 431              	.L22:
 432              	.LBE3:
 433              	.LBB4:
 144:hardware/src/esp8266.c **** 	if(Find_Lcs(esp8266_buf,nlp_mess[2]) >= COMPARE_MESS_SUCCESS)
 434              		.loc 1 144 34
 435 0048 7B68     		ldr	r3, [r7, #4]
 436 004a 0833     		adds	r3, r3, #8
 437              		.loc 1 144 5
 438 004c 1B68     		ldr	r3, [r3]
 439 004e 1946     		mov	r1, r3
 440 0050 1548     		ldr	r0, .L26
 441 0052 FFF7FEFF 		bl	Find_Lcs
 442 0056 0346     		mov	r3, r0
 443              		.loc 1 144 4
ARM GAS  /tmp/ccRqTjUh.s 			page 11


 444 0058 3B2B     		cmp	r3, #59
 445 005a 02DD     		ble	.L23
 145:hardware/src/esp8266.c **** 		mess3_receive_flag = 1;
 446              		.loc 1 145 22
 447 005c 174B     		ldr	r3, .L26+20
 448 005e 0122     		movs	r2, #1
 449 0060 1A70     		strb	r2, [r3]
 450              	.L23:
 451              	.LBE4:
 452              	.LBB5:
 146:hardware/src/esp8266.c **** 	if(Find_Lcs(esp8266_buf,nlp_mess[3]) >= COMPARE_MESS_SUCCESS)
 453              		.loc 1 146 34
 454 0062 7B68     		ldr	r3, [r7, #4]
 455 0064 0C33     		adds	r3, r3, #12
 456              		.loc 1 146 5
 457 0066 1B68     		ldr	r3, [r3]
 458 0068 1946     		mov	r1, r3
 459 006a 0F48     		ldr	r0, .L26
 460 006c FFF7FEFF 		bl	Find_Lcs
 461 0070 0346     		mov	r3, r0
 462              		.loc 1 146 4
 463 0072 3B2B     		cmp	r3, #59
 464 0074 02DD     		ble	.L24
 147:hardware/src/esp8266.c **** 		mess4_receive_flag = 1;
 465              		.loc 1 147 22
 466 0076 124B     		ldr	r3, .L26+24
 467 0078 0122     		movs	r2, #1
 468 007a 1A70     		strb	r2, [r3]
 469              	.L24:
 470              	.LBE5:
 471              	.LBB6:
 148:hardware/src/esp8266.c **** 	if(Find_Lcs(esp8266_buf,nlp_mess[4]) >= COMPARE_MESS_SUCCESS)
 472              		.loc 1 148 34
 473 007c 7B68     		ldr	r3, [r7, #4]
 474 007e 1033     		adds	r3, r3, #16
 475              		.loc 1 148 5
 476 0080 1B68     		ldr	r3, [r3]
 477 0082 1946     		mov	r1, r3
 478 0084 0848     		ldr	r0, .L26
 479 0086 FFF7FEFF 		bl	Find_Lcs
 480 008a 0346     		mov	r3, r0
 481              		.loc 1 148 4
 482 008c 3B2B     		cmp	r3, #59
 483 008e 02DD     		ble	.L25
 149:hardware/src/esp8266.c **** 		mess5_receive_flag = 1;
 484              		.loc 1 149 22
 485 0090 0C4B     		ldr	r3, .L26+28
 486 0092 0122     		movs	r2, #1
 487 0094 1A70     		strb	r2, [r3]
 488              	.L25:
 489              	.LBE6:
 150:hardware/src/esp8266.c **** 	ESP8266_Clear();
 490              		.loc 1 150 2
 491 0096 FFF7FEFF 		bl	ESP8266_Clear
 151:hardware/src/esp8266.c **** 	receive_flag = 0;
 492              		.loc 1 151 15
 493 009a 0B4B     		ldr	r3, .L26+32
ARM GAS  /tmp/ccRqTjUh.s 			page 12


 494 009c 0022     		movs	r2, #0
 495 009e 1A70     		strb	r2, [r3]
 152:hardware/src/esp8266.c **** }
 496              		.loc 1 152 1
 497 00a0 00BF     		nop
 498 00a2 0837     		adds	r7, r7, #8
 499              	.LCFI18:
 500              		.cfi_def_cfa_offset 8
 501 00a4 BD46     		mov	sp, r7
 502              	.LCFI19:
 503              		.cfi_def_cfa_register 13
 504              		@ sp needed
 505 00a6 80BD     		pop	{r7, pc}
 506              	.L27:
 507              		.align	2
 508              	.L26:
 509 00a8 00000000 		.word	esp8266_buf
 510 00ac 00000000 		.word	__func__.0
 511 00b0 00000000 		.word	.LC0
 512 00b4 00000000 		.word	mess1_receive_flag
 513 00b8 00000000 		.word	mess2_receive_flag
 514 00bc 00000000 		.word	mess3_receive_flag
 515 00c0 00000000 		.word	mess4_receive_flag
 516 00c4 00000000 		.word	mess5_receive_flag
 517 00c8 00000000 		.word	receive_flag
 518              		.cfi_endproc
 519              	.LFE70:
 521              		.section	.rodata
 522 0015 000000   		.align	2
 523              	.LC1:
 524 0018 67657420 		.ascii	"get a mess:\000"
 524      61206D65 
 524      73733A00 
 525              		.align	2
 526              	.LC2:
 527 0024 25730D0A 		.ascii	"%s\015\012\000"
 527      00
 528              		.section	.text.print_rece_mess,"ax",%progbits
 529              		.align	1
 530              		.global	print_rece_mess
 531              		.syntax unified
 532              		.thumb
 533              		.thumb_func
 534              		.fpu softvfp
 536              	print_rece_mess:
 537              	.LFB71:
 153:hardware/src/esp8266.c **** 
 154:hardware/src/esp8266.c **** void print_rece_mess(void)
 155:hardware/src/esp8266.c **** {
 538              		.loc 1 155 1
 539              		.cfi_startproc
 540              		@ args = 0, pretend = 0, frame = 0
 541              		@ frame_needed = 1, uses_anonymous_args = 0
 542 0000 80B5     		push	{r7, lr}
 543              	.LCFI20:
 544              		.cfi_def_cfa_offset 8
 545              		.cfi_offset 7, -8
ARM GAS  /tmp/ccRqTjUh.s 			page 13


 546              		.cfi_offset 14, -4
 547 0002 00AF     		add	r7, sp, #0
 548              	.LCFI21:
 549              		.cfi_def_cfa_register 7
 156:hardware/src/esp8266.c **** 	printf("get a mess:");
 550              		.loc 1 156 2
 551 0004 0648     		ldr	r0, .L29
 552 0006 FFF7FEFF 		bl	printf
 157:hardware/src/esp8266.c **** 	printf("%s\r\n",esp8266_buf);
 553              		.loc 1 157 2
 554 000a 0649     		ldr	r1, .L29+4
 555 000c 0648     		ldr	r0, .L29+8
 556 000e FFF7FEFF 		bl	printf
 158:hardware/src/esp8266.c **** 	ESP8266_Clear();
 557              		.loc 1 158 2
 558 0012 FFF7FEFF 		bl	ESP8266_Clear
 159:hardware/src/esp8266.c **** 	receive_flag = 0;
 559              		.loc 1 159 15
 560 0016 054B     		ldr	r3, .L29+12
 561 0018 0022     		movs	r2, #0
 562 001a 1A70     		strb	r2, [r3]
 160:hardware/src/esp8266.c **** }
 563              		.loc 1 160 1
 564 001c 00BF     		nop
 565 001e 80BD     		pop	{r7, pc}
 566              	.L30:
 567              		.align	2
 568              	.L29:
 569 0020 18000000 		.word	.LC1
 570 0024 00000000 		.word	esp8266_buf
 571 0028 24000000 		.word	.LC2
 572 002c 00000000 		.word	receive_flag
 573              		.cfi_endproc
 574              	.LFE71:
 576              		.section	.text.USART2_IRQHandler,"ax",%progbits
 577              		.align	1
 578              		.global	USART2_IRQHandler
 579              		.syntax unified
 580              		.thumb
 581              		.thumb_func
 582              		.fpu softvfp
 584              	USART2_IRQHandler:
 585              	.LFB72:
 161:hardware/src/esp8266.c **** 
 162:hardware/src/esp8266.c **** //==========================================================
 163:hardware/src/esp8266.c **** //	函数名称：	USART2_IRQHandler
 164:hardware/src/esp8266.c **** //
 165:hardware/src/esp8266.c **** //	函数功能：	串口2收发中断
 166:hardware/src/esp8266.c **** //
 167:hardware/src/esp8266.c **** //	入口参数：	无
 168:hardware/src/esp8266.c **** //
 169:hardware/src/esp8266.c **** //	返回参数：	无
 170:hardware/src/esp8266.c **** //
 171:hardware/src/esp8266.c **** //	说明：		
 172:hardware/src/esp8266.c **** //==========================================================
 173:hardware/src/esp8266.c **** void USART2_IRQHandler(void)
 174:hardware/src/esp8266.c **** {
ARM GAS  /tmp/ccRqTjUh.s 			page 14


 586              		.loc 1 174 1
 587              		.cfi_startproc
 588              		@ args = 0, pretend = 0, frame = 0
 589              		@ frame_needed = 1, uses_anonymous_args = 0
 590 0000 80B5     		push	{r7, lr}
 591              	.LCFI22:
 592              		.cfi_def_cfa_offset 8
 593              		.cfi_offset 7, -8
 594              		.cfi_offset 14, -4
 595 0002 00AF     		add	r7, sp, #0
 596              	.LCFI23:
 597              		.cfi_def_cfa_register 7
 175:hardware/src/esp8266.c **** 
 176:hardware/src/esp8266.c **** 	if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET) //接收中断
 598              		.loc 1 176 5
 599 0004 40F22551 		movw	r1, #1317
 600 0008 1E48     		ldr	r0, .L36
 601 000a FFF7FEFF 		bl	USART_GetITStatus
 602 000e 0346     		mov	r3, r0
 603              		.loc 1 176 4
 604 0010 002B     		cmp	r3, #0
 605 0012 35D0     		beq	.L35
 177:hardware/src/esp8266.c **** 	{
 178:hardware/src/esp8266.c **** 		if(esp8266_cnt >= sizeof(esp8266_buf))	esp8266_cnt = 0; //防止串口被刷爆
 606              		.loc 1 178 18
 607 0014 1C4B     		ldr	r3, .L36+4
 608 0016 1B88     		ldrh	r3, [r3]
 609              		.loc 1 178 5
 610 0018 7F2B     		cmp	r3, #127
 611 001a 02D9     		bls	.L33
 612              		.loc 1 178 54 discriminator 1
 613 001c 1A4B     		ldr	r3, .L36+4
 614 001e 0022     		movs	r2, #0
 615 0020 1A80     		strh	r2, [r3]	@ movhi
 616              	.L33:
 179:hardware/src/esp8266.c **** 		esp8266_buf[esp8266_cnt++] = USART2->DR;
 617              		.loc 1 179 38
 618 0022 184B     		ldr	r3, .L36
 619 0024 9B88     		ldrh	r3, [r3, #4]	@ movhi
 620 0026 99B2     		uxth	r1, r3
 621              		.loc 1 179 26
 622 0028 174B     		ldr	r3, .L36+4
 623 002a 1B88     		ldrh	r3, [r3]
 624 002c 5A1C     		adds	r2, r3, #1
 625 002e 90B2     		uxth	r0, r2
 626 0030 154A     		ldr	r2, .L36+4
 627 0032 1080     		strh	r0, [r2]	@ movhi
 628 0034 1A46     		mov	r2, r3
 629              		.loc 1 179 30
 630 0036 C9B2     		uxtb	r1, r1
 631 0038 144B     		ldr	r3, .L36+8
 632 003a 9954     		strb	r1, [r3, r2]
 180:hardware/src/esp8266.c **** 		if(esp8266_buf[esp8266_cnt-1]=='\n' && esp8266_buf[esp8266_cnt-2]=='\r' && esp8266_buf[esp8266_cn
 633              		.loc 1 180 29
 634 003c 124B     		ldr	r3, .L36+4
 635 003e 1B88     		ldrh	r3, [r3]
 636 0040 013B     		subs	r3, r3, #1
ARM GAS  /tmp/ccRqTjUh.s 			page 15


 637              		.loc 1 180 17
 638 0042 124A     		ldr	r2, .L36+8
 639 0044 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 640              		.loc 1 180 5
 641 0046 0A2B     		cmp	r3, #10
 642 0048 16D1     		bne	.L34
 643              		.loc 1 180 65 discriminator 1
 644 004a 0F4B     		ldr	r3, .L36+4
 645 004c 1B88     		ldrh	r3, [r3]
 646 004e 023B     		subs	r3, r3, #2
 647              		.loc 1 180 53 discriminator 1
 648 0050 0E4A     		ldr	r2, .L36+8
 649 0052 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 650              		.loc 1 180 39 discriminator 1
 651 0054 0D2B     		cmp	r3, #13
 652 0056 0FD1     		bne	.L34
 653              		.loc 1 180 101 discriminator 2
 654 0058 0B4B     		ldr	r3, .L36+4
 655 005a 1B88     		ldrh	r3, [r3]
 656 005c 033B     		subs	r3, r3, #3
 657              		.loc 1 180 89 discriminator 2
 658 005e 0B4A     		ldr	r2, .L36+8
 659 0060 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 660              		.loc 1 180 75 discriminator 2
 661 0062 0D2B     		cmp	r3, #13
 662 0064 08D1     		bne	.L34
 181:hardware/src/esp8266.c **** 			esp8266_buf[esp8266_cnt-3] = '\0';
 663              		.loc 1 181 27
 664 0066 084B     		ldr	r3, .L36+4
 665 0068 1B88     		ldrh	r3, [r3]
 666 006a 033B     		subs	r3, r3, #3
 667              		.loc 1 181 31
 668 006c 074A     		ldr	r2, .L36+8
 669 006e 0021     		movs	r1, #0
 670 0070 D154     		strb	r1, [r2, r3]
 182:hardware/src/esp8266.c **** 		// if(esp8266_buf[esp8266_cnt-1]=='\n' && esp8266_buf[esp8266_cnt-2]=='\r'){
 183:hardware/src/esp8266.c **** 		// 	esp8266_buf[esp8266_cnt-2] = '\0';
 184:hardware/src/esp8266.c **** 			receive_flag = 1;
 671              		.loc 1 184 17
 672 0072 074B     		ldr	r3, .L36+12
 673 0074 0122     		movs	r2, #1
 674 0076 1A70     		strb	r2, [r3]
 675              	.L34:
 185:hardware/src/esp8266.c **** 		}
 186:hardware/src/esp8266.c **** 		
 187:hardware/src/esp8266.c **** 		USART_ClearFlag(USART2, USART_FLAG_RXNE);
 676              		.loc 1 187 3
 677 0078 2021     		movs	r1, #32
 678 007a 0248     		ldr	r0, .L36
 679 007c FFF7FEFF 		bl	USART_ClearFlag
 680              	.L35:
 188:hardware/src/esp8266.c **** 	}
 189:hardware/src/esp8266.c **** 
 190:hardware/src/esp8266.c **** }
 681              		.loc 1 190 1
 682 0080 00BF     		nop
 683 0082 80BD     		pop	{r7, pc}
ARM GAS  /tmp/ccRqTjUh.s 			page 16


 684              	.L37:
 685              		.align	2
 686              	.L36:
 687 0084 00440040 		.word	1073759232
 688 0088 00000000 		.word	esp8266_cnt
 689 008c 00000000 		.word	esp8266_buf
 690 0090 00000000 		.word	receive_flag
 691              		.cfi_endproc
 692              	.LFE72:
 694              		.section	.rodata.__func__.0,"a"
 695              		.align	2
 698              	__func__.0:
 699 0000 636F6D70 		.ascii	"compare_rece_mess\000"
 699      6172655F 
 699      72656365 
 699      5F6D6573 
 699      7300
 700              		.text
 701              	.Letext0:
 702              		.file 2 "/home/pico/tools/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/machine/_defaul
 703              		.file 3 "/home/pico/tools/gcc-arm-none-eabi-10-2020-q4-major/arm-none-eabi/include/sys/_stdint.h"
 704              		.file 4 "Inc/stm32f10x.h"
ARM GAS  /tmp/ccRqTjUh.s 			page 17


DEFINED SYMBOLS
                            *ABS*:0000000000000000 esp8266.c
     /tmp/ccRqTjUh.s:20     .bss.esp8266_buf:0000000000000000 esp8266_buf
     /tmp/ccRqTjUh.s:17     .bss.esp8266_buf:0000000000000000 $d
     /tmp/ccRqTjUh.s:27     .bss.esp8266_cnt:0000000000000000 esp8266_cnt
     /tmp/ccRqTjUh.s:24     .bss.esp8266_cnt:0000000000000000 $d
     /tmp/ccRqTjUh.s:34     .bss.esp8266_cntPre:0000000000000000 esp8266_cntPre
     /tmp/ccRqTjUh.s:31     .bss.esp8266_cntPre:0000000000000000 $d
     /tmp/ccRqTjUh.s:40     .bss.receive_flag:0000000000000000 receive_flag
     /tmp/ccRqTjUh.s:41     .bss.receive_flag:0000000000000000 $d
     /tmp/ccRqTjUh.s:46     .bss.mess1_receive_flag:0000000000000000 mess1_receive_flag
     /tmp/ccRqTjUh.s:47     .bss.mess1_receive_flag:0000000000000000 $d
     /tmp/ccRqTjUh.s:52     .bss.mess2_receive_flag:0000000000000000 mess2_receive_flag
     /tmp/ccRqTjUh.s:53     .bss.mess2_receive_flag:0000000000000000 $d
     /tmp/ccRqTjUh.s:58     .bss.mess3_receive_flag:0000000000000000 mess3_receive_flag
     /tmp/ccRqTjUh.s:59     .bss.mess3_receive_flag:0000000000000000 $d
     /tmp/ccRqTjUh.s:64     .bss.mess4_receive_flag:0000000000000000 mess4_receive_flag
     /tmp/ccRqTjUh.s:65     .bss.mess4_receive_flag:0000000000000000 $d
     /tmp/ccRqTjUh.s:70     .bss.mess5_receive_flag:0000000000000000 mess5_receive_flag
     /tmp/ccRqTjUh.s:71     .bss.mess5_receive_flag:0000000000000000 $d
     /tmp/ccRqTjUh.s:73     .text.ESP8266_Clear:0000000000000000 $t
     /tmp/ccRqTjUh.s:81     .text.ESP8266_Clear:0000000000000000 ESP8266_Clear
     /tmp/ccRqTjUh.s:111    .text.ESP8266_Clear:0000000000000018 $d
     /tmp/ccRqTjUh.s:117    .text.clear_all_mess_rece_flags:0000000000000000 $t
     /tmp/ccRqTjUh.s:124    .text.clear_all_mess_rece_flags:0000000000000000 clear_all_mess_rece_flags
     /tmp/ccRqTjUh.s:172    .text.clear_all_mess_rece_flags:000000000000002c $d
     /tmp/ccRqTjUh.s:181    .text.ESP8266_WaitRecive:0000000000000000 $t
     /tmp/ccRqTjUh.s:188    .text.ESP8266_WaitRecive:0000000000000000 ESP8266_WaitRecive
     /tmp/ccRqTjUh.s:246    .text.ESP8266_WaitRecive:0000000000000034 $d
     /tmp/ccRqTjUh.s:252    .text.ESP8266_SendCmd:0000000000000000 $t
     /tmp/ccRqTjUh.s:259    .text.ESP8266_SendCmd:0000000000000000 ESP8266_SendCmd
     /tmp/ccRqTjUh.s:354    .text.ESP8266_SendCmd:0000000000000074 $d
     /tmp/ccRqTjUh.s:361    .rodata:0000000000000000 $d
     /tmp/ccRqTjUh.s:365    .text.compare_rece_mess:0000000000000000 $t
     /tmp/ccRqTjUh.s:372    .text.compare_rece_mess:0000000000000000 compare_rece_mess
     /tmp/ccRqTjUh.s:509    .text.compare_rece_mess:00000000000000a8 $d
     /tmp/ccRqTjUh.s:698    .rodata.__func__.0:0000000000000000 __func__.0
     /tmp/ccRqTjUh.s:529    .text.print_rece_mess:0000000000000000 $t
     /tmp/ccRqTjUh.s:536    .text.print_rece_mess:0000000000000000 print_rece_mess
     /tmp/ccRqTjUh.s:569    .text.print_rece_mess:0000000000000020 $d
     /tmp/ccRqTjUh.s:577    .text.USART2_IRQHandler:0000000000000000 $t
     /tmp/ccRqTjUh.s:584    .text.USART2_IRQHandler:0000000000000000 USART2_IRQHandler
     /tmp/ccRqTjUh.s:687    .text.USART2_IRQHandler:0000000000000084 $d
     /tmp/ccRqTjUh.s:695    .rodata.__func__.0:0000000000000000 $d

UNDEFINED SYMBOLS
memset
strlen
Usart_SendString
strstr
delay_lms
printf
Find_Lcs
USART_GetITStatus
USART_ClearFlag
